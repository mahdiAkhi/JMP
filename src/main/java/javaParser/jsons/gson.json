[{"longName":"com.google.gson.codegen.CodeGen",
"methods":[{"Body : ":"{\r\n    String packageName = getPackage(type).getQualifiedName().toString();\r\n    String qualifiedName = type.getQualifiedName().toString();\r\n    result.append(packageName);\r\n    result.append('.');\r\n    result.append(qualifiedName.substring(packageName.length() + 1).replace('.', innerClassSeparator));\r\n}","Comment":"","Method:":"static void rawTypeToString(StringBuilder result, TypeElement type, char innerClassSeparator) {\r\n    String packageName = getPackage(type).getQualifiedName().toString();\r\n    String qualifiedName = type.getQualifiedName().toString();\r\n    result.append(packageName);\r\n    result.append('.');\r\n    result.append(qualifiedName.substring(packageName.length() + 1).replace('.', innerClassSeparator));\r\n}","Signature":" static void rawTypeToString(StringBuilder result, TypeElement type, char innerClassSeparator)"}, {"Body : ":"{\r\n    String packageName = getPackage(type).getQualifiedName().toString();\r\n    String qualifiedName = type.getQualifiedName().toString();\r\n    result.append(packageName);\r\n    result.append('.');\r\n    result.append(qualifiedName.substring(packageName.length() + 1).replace('.', innerClassSeparator));\r\n}","Comment":"","Method:":"static void rawTypeToString(StringBuilder result, TypeElement type, char innerClassSeparator) {\r\n    String packageName = getPackage(type).getQualifiedName().toString();\r\n    String qualifiedName = type.getQualifiedName().toString();\r\n    result.append(packageName);\r\n    result.append('.');\r\n    result.append(qualifiedName.substring(packageName.length() + 1).replace('.', innerClassSeparator));\r\n}","Signature":" static void rawTypeToString(StringBuilder result, TypeElement type, char innerClassSeparator)"}, {"Body : ":"{\r\n    String packageName = getPackage(type).getQualifiedName().toString();\r\n    String qualifiedName = type.getQualifiedName().toString();\r\n    result.append(packageName);\r\n    result.append('.');\r\n    result.append(qualifiedName.substring(packageName.length() + 1).replace('.', innerClassSeparator));\r\n}","Comment":"","Method:":"static void rawTypeToString(StringBuilder result, TypeElement type, char innerClassSeparator) {\r\n    String packageName = getPackage(type).getQualifiedName().toString();\r\n    String qualifiedName = type.getQualifiedName().toString();\r\n    result.append(packageName);\r\n    result.append('.');\r\n    result.append(qualifiedName.substring(packageName.length() + 1).replace('.', innerClassSeparator));\r\n}","Signature":" static void rawTypeToString(StringBuilder result, TypeElement type, char innerClassSeparator)"},]}, {"longName":"com.google.gson.codegen.GeneratedTypeAdapterProcessor",
"methods":[{"Body : ":"{\r\n    String typeAdapterName = CodeGen.adapterName(type, \"$TypeAdapter\");\r\n    JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(typeAdapterName, type);\r\n    System.out.println(\"Generating type adapter: \" + typeAdapterName + \" in \" + sourceFile.getName());\r\n    JavaWriter writer = new JavaWriter(sourceFile.openWriter());\r\n    writer.addPackage(CodeGen.getPackage(type).getQualifiedName().toString());\r\n    writer.beginType(typeAdapterName, \"class\", FINAL, null);\r\n    writer.endType();\r\n    writer.close();\r\n}","Comment":"","Method:":"private void writeAdapter(TypeElement type) throws IOException {\r\n    String typeAdapterName = CodeGen.adapterName(type, \"$TypeAdapter\");\r\n    JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(typeAdapterName, type);\r\n    System.out.println(\"Generating type adapter: \" + typeAdapterName + \" in \" + sourceFile.getName());\r\n    JavaWriter writer = new JavaWriter(sourceFile.openWriter());\r\n    writer.addPackage(CodeGen.getPackage(type).getQualifiedName().toString());\r\n    writer.beginType(typeAdapterName, \"class\", FINAL, null);\r\n    writer.endType();\r\n    writer.close();\r\n}","Signature":"private void writeAdapter(TypeElement type) throws IOException"}, {"Body : ":"{\r\n    String typeAdapterName = CodeGen.adapterName(type, \"$TypeAdapter\");\r\n    JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(typeAdapterName, type);\r\n    System.out.println(\"Generating type adapter: \" + typeAdapterName + \" in \" + sourceFile.getName());\r\n    JavaWriter writer = new JavaWriter(sourceFile.openWriter());\r\n    writer.addPackage(CodeGen.getPackage(type).getQualifiedName().toString());\r\n    writer.beginType(typeAdapterName, \"class\", FINAL, null);\r\n    writer.endType();\r\n    writer.close();\r\n}","Comment":"","Method:":"private void writeAdapter(TypeElement type) throws IOException {\r\n    String typeAdapterName = CodeGen.adapterName(type, \"$TypeAdapter\");\r\n    JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(typeAdapterName, type);\r\n    System.out.println(\"Generating type adapter: \" + typeAdapterName + \" in \" + sourceFile.getName());\r\n    JavaWriter writer = new JavaWriter(sourceFile.openWriter());\r\n    writer.addPackage(CodeGen.getPackage(type).getQualifiedName().toString());\r\n    writer.beginType(typeAdapterName, \"class\", FINAL, null);\r\n    writer.endType();\r\n    writer.close();\r\n}","Signature":"private void writeAdapter(TypeElement type) throws IOException"},]}, {"longName":"com.google.gson.codegen.JavaWriter",
"methods":[{"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"}, {"Body : ":"{\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Comment":"","Method:":"private Scope popScope() {\r\n    return scopes.remove(scopes.size() - 1);\r\n}","Signature":"private Scope popScope()"},]}, {"longName":"com.google.gson.codegen.functional.CodeGenFunctionalTest",
"methods":[{"Body : ":"{\r\n    Order order = new Order(\"toy\", 10);\r\n}","Comment":"","Method:":"public void testGeneratedJson() {\r\n    Order order = new Order(\"toy\", 10);\r\n}","Signature":"public void testGeneratedJson()"},]}, {"longName":"com.google.gson.codegen.functional.Order",
"methods":[{"Body : ":"{\r\n    return price;\r\n}","Comment":"","Method:":"public int getAmount() {\r\n    return price;\r\n}","Signature":"public int getAmount()"}, {"Body : ":"{\r\n    return price;\r\n}","Comment":"","Method:":"public int getAmount() {\r\n    return price;\r\n}","Signature":"public int getAmount()"},]}, {"longName":"com.google.gson.examples.android.GsonProguardExampleActivity",
"methods":[{"Body : ":"{\r\n    List<LineItem> lineItems = new ArrayList<LineItem>();\r\n    lineItems.add(new LineItem(\"hammer\", 1, 12000000, \"USD\"));\r\n    return new Cart(lineItems, \"Happy Buyer\", \"4111-1111-1111-1111\");\r\n}","Comment":"","Method:":"private Cart buildCart() {\r\n    List<LineItem> lineItems = new ArrayList<LineItem>();\r\n    lineItems.add(new LineItem(\"hammer\", 1, 12000000, \"USD\"));\r\n    return new Cart(lineItems, \"Happy Buyer\", \"4111-1111-1111-1111\");\r\n}","Signature":"private Cart buildCart()"}, {"Body : ":"{\r\n    List<LineItem> lineItems = new ArrayList<LineItem>();\r\n    lineItems.add(new LineItem(\"hammer\", 1, 12000000, \"USD\"));\r\n    return new Cart(lineItems, \"Happy Buyer\", \"4111-1111-1111-1111\");\r\n}","Comment":"","Method:":"private Cart buildCart() {\r\n    List<LineItem> lineItems = new ArrayList<LineItem>();\r\n    lineItems.add(new LineItem(\"hammer\", 1, 12000000, \"USD\"));\r\n    return new Cart(lineItems, \"Happy Buyer\", \"4111-1111-1111-1111\");\r\n}","Signature":"private Cart buildCart()"},]}, {"longName":"com.google.gson.examples.android.model.Cart",
"methods":[{"Body : ":"{\r\n    if (type == null) {\r\n        return \"null\";\r\n    }\r\n    if (type instanceof Class) {\r\n        return ((Class) type).getSimpleName();\r\n    } else if (type instanceof ParameterizedType) {\r\n        ParameterizedType pType = (ParameterizedType) type;\r\n        StringBuilder sb = new StringBuilder(getSimpleTypeName(pType.getRawType()));\r\n        sb.append('<');\r\n        boolean first = true;\r\n        for (Type argumentType : pType.getActualTypeArguments()) {\r\n            if (first) {\r\n                first = false;\r\n            } else {\r\n                sb.append(',');\r\n            }\r\n            sb.append(getSimpleTypeName(argumentType));\r\n        }\r\n        sb.append('>');\r\n        return sb.toString();\r\n    } else if (type instanceof WildcardType) {\r\n        return \"?\";\r\n    }\r\n    return type.toString();\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\npublic static String getSimpleTypeName(Type type) {\r\n    if (type == null) {\r\n        return \"null\";\r\n    }\r\n    if (type instanceof Class) {\r\n        return ((Class) type).getSimpleName();\r\n    } else if (type instanceof ParameterizedType) {\r\n        ParameterizedType pType = (ParameterizedType) type;\r\n        StringBuilder sb = new StringBuilder(getSimpleTypeName(pType.getRawType()));\r\n        sb.append('<');\r\n        boolean first = true;\r\n        for (Type argumentType : pType.getActualTypeArguments()) {\r\n            if (first) {\r\n                first = false;\r\n            } else {\r\n                sb.append(',');\r\n            }\r\n            sb.append(getSimpleTypeName(argumentType));\r\n        }\r\n        sb.append('>');\r\n        return sb.toString();\r\n    } else if (type instanceof WildcardType) {\r\n        return \"?\";\r\n    }\r\n    return type.toString();\r\n}","Signature":"public static String getSimpleTypeName(Type type)"}, {"Body : ":"{\r\n    if (type == null) {\r\n        return \"null\";\r\n    }\r\n    if (type instanceof Class) {\r\n        return ((Class) type).getSimpleName();\r\n    } else if (type instanceof ParameterizedType) {\r\n        ParameterizedType pType = (ParameterizedType) type;\r\n        StringBuilder sb = new StringBuilder(getSimpleTypeName(pType.getRawType()));\r\n        sb.append('<');\r\n        boolean first = true;\r\n        for (Type argumentType : pType.getActualTypeArguments()) {\r\n            if (first) {\r\n                first = false;\r\n            } else {\r\n                sb.append(',');\r\n            }\r\n            sb.append(getSimpleTypeName(argumentType));\r\n        }\r\n        sb.append('>');\r\n        return sb.toString();\r\n    } else if (type instanceof WildcardType) {\r\n        return \"?\";\r\n    }\r\n    return type.toString();\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\npublic static String getSimpleTypeName(Type type) {\r\n    if (type == null) {\r\n        return \"null\";\r\n    }\r\n    if (type instanceof Class) {\r\n        return ((Class) type).getSimpleName();\r\n    } else if (type instanceof ParameterizedType) {\r\n        ParameterizedType pType = (ParameterizedType) type;\r\n        StringBuilder sb = new StringBuilder(getSimpleTypeName(pType.getRawType()));\r\n        sb.append('<');\r\n        boolean first = true;\r\n        for (Type argumentType : pType.getActualTypeArguments()) {\r\n            if (first) {\r\n                first = false;\r\n            } else {\r\n                sb.append(',');\r\n            }\r\n            sb.append(getSimpleTypeName(argumentType));\r\n        }\r\n        sb.append('>');\r\n        return sb.toString();\r\n    } else if (type instanceof WildcardType) {\r\n        return \"?\";\r\n    }\r\n    return type.toString();\r\n}","Signature":"public static String getSimpleTypeName(Type type)"}, {"Body : ":"{\r\n    if (type == null) {\r\n        return \"null\";\r\n    }\r\n    if (type instanceof Class) {\r\n        return ((Class) type).getSimpleName();\r\n    } else if (type instanceof ParameterizedType) {\r\n        ParameterizedType pType = (ParameterizedType) type;\r\n        StringBuilder sb = new StringBuilder(getSimpleTypeName(pType.getRawType()));\r\n        sb.append('<');\r\n        boolean first = true;\r\n        for (Type argumentType : pType.getActualTypeArguments()) {\r\n            if (first) {\r\n                first = false;\r\n            } else {\r\n                sb.append(',');\r\n            }\r\n            sb.append(getSimpleTypeName(argumentType));\r\n        }\r\n        sb.append('>');\r\n        return sb.toString();\r\n    } else if (type instanceof WildcardType) {\r\n        return \"?\";\r\n    }\r\n    return type.toString();\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\npublic static String getSimpleTypeName(Type type) {\r\n    if (type == null) {\r\n        return \"null\";\r\n    }\r\n    if (type instanceof Class) {\r\n        return ((Class) type).getSimpleName();\r\n    } else if (type instanceof ParameterizedType) {\r\n        ParameterizedType pType = (ParameterizedType) type;\r\n        StringBuilder sb = new StringBuilder(getSimpleTypeName(pType.getRawType()));\r\n        sb.append('<');\r\n        boolean first = true;\r\n        for (Type argumentType : pType.getActualTypeArguments()) {\r\n            if (first) {\r\n                first = false;\r\n            } else {\r\n                sb.append(',');\r\n            }\r\n            sb.append(getSimpleTypeName(argumentType));\r\n        }\r\n        sb.append('>');\r\n        return sb.toString();\r\n    } else if (type instanceof WildcardType) {\r\n        return \"?\";\r\n    }\r\n    return type.toString();\r\n}","Signature":"public static String getSimpleTypeName(Type type)"}, {"Body : ":"{\r\n    if (type == null) {\r\n        return \"null\";\r\n    }\r\n    if (type instanceof Class) {\r\n        return ((Class) type).getSimpleName();\r\n    } else if (type instanceof ParameterizedType) {\r\n        ParameterizedType pType = (ParameterizedType) type;\r\n        StringBuilder sb = new StringBuilder(getSimpleTypeName(pType.getRawType()));\r\n        sb.append('<');\r\n        boolean first = true;\r\n        for (Type argumentType : pType.getActualTypeArguments()) {\r\n            if (first) {\r\n                first = false;\r\n            } else {\r\n                sb.append(',');\r\n            }\r\n            sb.append(getSimpleTypeName(argumentType));\r\n        }\r\n        sb.append('>');\r\n        return sb.toString();\r\n    } else if (type instanceof WildcardType) {\r\n        return \"?\";\r\n    }\r\n    return type.toString();\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\npublic static String getSimpleTypeName(Type type) {\r\n    if (type == null) {\r\n        return \"null\";\r\n    }\r\n    if (type instanceof Class) {\r\n        return ((Class) type).getSimpleName();\r\n    } else if (type instanceof ParameterizedType) {\r\n        ParameterizedType pType = (ParameterizedType) type;\r\n        StringBuilder sb = new StringBuilder(getSimpleTypeName(pType.getRawType()));\r\n        sb.append('<');\r\n        boolean first = true;\r\n        for (Type argumentType : pType.getActualTypeArguments()) {\r\n            if (first) {\r\n                first = false;\r\n            } else {\r\n                sb.append(',');\r\n            }\r\n            sb.append(getSimpleTypeName(argumentType));\r\n        }\r\n        sb.append('>');\r\n        return sb.toString();\r\n    } else if (type instanceof WildcardType) {\r\n        return \"?\";\r\n    }\r\n    return type.toString();\r\n}","Signature":"public static String getSimpleTypeName(Type type)"}, {"Body : ":"{\r\n    if (type == null) {\r\n        return \"null\";\r\n    }\r\n    if (type instanceof Class) {\r\n        return ((Class) type).getSimpleName();\r\n    } else if (type instanceof ParameterizedType) {\r\n        ParameterizedType pType = (ParameterizedType) type;\r\n        StringBuilder sb = new StringBuilder(getSimpleTypeName(pType.getRawType()));\r\n        sb.append('<');\r\n        boolean first = true;\r\n        for (Type argumentType : pType.getActualTypeArguments()) {\r\n            if (first) {\r\n                first = false;\r\n            } else {\r\n                sb.append(',');\r\n            }\r\n            sb.append(getSimpleTypeName(argumentType));\r\n        }\r\n        sb.append('>');\r\n        return sb.toString();\r\n    } else if (type instanceof WildcardType) {\r\n        return \"?\";\r\n    }\r\n    return type.toString();\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\npublic static String getSimpleTypeName(Type type) {\r\n    if (type == null) {\r\n        return \"null\";\r\n    }\r\n    if (type instanceof Class) {\r\n        return ((Class) type).getSimpleName();\r\n    } else if (type instanceof ParameterizedType) {\r\n        ParameterizedType pType = (ParameterizedType) type;\r\n        StringBuilder sb = new StringBuilder(getSimpleTypeName(pType.getRawType()));\r\n        sb.append('<');\r\n        boolean first = true;\r\n        for (Type argumentType : pType.getActualTypeArguments()) {\r\n            if (first) {\r\n                first = false;\r\n            } else {\r\n                sb.append(',');\r\n            }\r\n            sb.append(getSimpleTypeName(argumentType));\r\n        }\r\n        sb.append('>');\r\n        return sb.toString();\r\n    } else if (type instanceof WildcardType) {\r\n        return \"?\";\r\n    }\r\n    return type.toString();\r\n}","Signature":"public static String getSimpleTypeName(Type type)"},]}, {"longName":"com.google.gson.examples.android.model.LineItem",
"methods":[{"Body : ":"{\r\n    return String.format(\"(item: %s, qty: %s, price: %.2f %s)\", name, quantity, priceInMicros / 1000000d, currencyCode);\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return String.format(\"(item: %s, qty: %s, price: %.2f %s)\", name, quantity, priceInMicros / 1000000d, currencyCode);\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return String.format(\"(item: %s, qty: %s, price: %.2f %s)\", name, quantity, priceInMicros / 1000000d, currencyCode);\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return String.format(\"(item: %s, qty: %s, price: %.2f %s)\", name, quantity, priceInMicros / 1000000d, currencyCode);\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return String.format(\"(item: %s, qty: %s, price: %.2f %s)\", name, quantity, priceInMicros / 1000000d, currencyCode);\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return String.format(\"(item: %s, qty: %s, price: %.2f %s)\", name, quantity, priceInMicros / 1000000d, currencyCode);\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return String.format(\"(item: %s, qty: %s, price: %.2f %s)\", name, quantity, priceInMicros / 1000000d, currencyCode);\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return String.format(\"(item: %s, qty: %s, price: %.2f %s)\", name, quantity, priceInMicros / 1000000d, currencyCode);\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return String.format(\"(item: %s, qty: %s, price: %.2f %s)\", name, quantity, priceInMicros / 1000000d, currencyCode);\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return String.format(\"(item: %s, qty: %s, price: %.2f %s)\", name, quantity, priceInMicros / 1000000d, currencyCode);\r\n}","Signature":"public String toString()"},]}, {"longName":"com.google.gson.extras.examples.rawcollections.RawCollectionsExample",
"methods":[{"Body : ":"{\r\n    Gson gson = new Gson();\r\n    Collection collection = new ArrayList();\r\n    collection.add(\"hello\");\r\n    collection.add(5);\r\n    collection.add(new Event(\"GREETINGS\", \"guest\"));\r\n    String json = gson.toJson(collection);\r\n    System.out.println(\"Using Gson.toJson() on a raw collection: \" + json);\r\n    JsonArray array = JsonParser.parseString(json).getAsJsonArray();\r\n    String message = gson.fromJson(array.get(0), String.class);\r\n    int number = gson.fromJson(array.get(1), int.class);\r\n    Event event = gson.fromJson(array.get(2), Event.class);\r\n    System.out.printf(\"Using Gson.fromJson() to get: %s, %d, %s\", message, number, event);\r\n}","Comment":"","Method:":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\npublic static void main(String[] args) {\r\n    Gson gson = new Gson();\r\n    Collection collection = new ArrayList();\r\n    collection.add(\"hello\");\r\n    collection.add(5);\r\n    collection.add(new Event(\"GREETINGS\", \"guest\"));\r\n    String json = gson.toJson(collection);\r\n    System.out.println(\"Using Gson.toJson() on a raw collection: \" + json);\r\n    JsonArray array = JsonParser.parseString(json).getAsJsonArray();\r\n    String message = gson.fromJson(array.get(0), String.class);\r\n    int number = gson.fromJson(array.get(1), int.class);\r\n    Event event = gson.fromJson(array.get(2), Event.class);\r\n    System.out.printf(\"Using Gson.fromJson() to get: %s, %d, %s\", message, number, event);\r\n}","Signature":"public static void main(String[] args)"}, {"Body : ":"{\r\n    Gson gson = new Gson();\r\n    Collection collection = new ArrayList();\r\n    collection.add(\"hello\");\r\n    collection.add(5);\r\n    collection.add(new Event(\"GREETINGS\", \"guest\"));\r\n    String json = gson.toJson(collection);\r\n    System.out.println(\"Using Gson.toJson() on a raw collection: \" + json);\r\n    JsonArray array = JsonParser.parseString(json).getAsJsonArray();\r\n    String message = gson.fromJson(array.get(0), String.class);\r\n    int number = gson.fromJson(array.get(1), int.class);\r\n    Event event = gson.fromJson(array.get(2), Event.class);\r\n    System.out.printf(\"Using Gson.fromJson() to get: %s, %d, %s\", message, number, event);\r\n}","Comment":"","Method:":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\npublic static void main(String[] args) {\r\n    Gson gson = new Gson();\r\n    Collection collection = new ArrayList();\r\n    collection.add(\"hello\");\r\n    collection.add(5);\r\n    collection.add(new Event(\"GREETINGS\", \"guest\"));\r\n    String json = gson.toJson(collection);\r\n    System.out.println(\"Using Gson.toJson() on a raw collection: \" + json);\r\n    JsonArray array = JsonParser.parseString(json).getAsJsonArray();\r\n    String message = gson.fromJson(array.get(0), String.class);\r\n    int number = gson.fromJson(array.get(1), int.class);\r\n    Event event = gson.fromJson(array.get(2), Event.class);\r\n    System.out.printf(\"Using Gson.fromJson() to get: %s, %d, %s\", message, number, event);\r\n}","Signature":"public static void main(String[] args)"},]}, {"longName":"com.google.gson.graph.GraphAdapterBuilder",
"methods":[{"Body : ":"{\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Comment":"","Method:":"void read(Graph graph) throws IOException {\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Signature":" void read(Graph graph) throws IOException"}, {"Body : ":"{\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Comment":"","Method:":"void read(Graph graph) throws IOException {\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Signature":" void read(Graph graph) throws IOException"}, {"Body : ":"{\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Comment":"","Method:":"void read(Graph graph) throws IOException {\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Signature":" void read(Graph graph) throws IOException"}, {"Body : ":"{\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Comment":"","Method:":"void read(Graph graph) throws IOException {\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Signature":" void read(Graph graph) throws IOException"}, {"Body : ":"{\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Comment":"","Method:":"void read(Graph graph) throws IOException {\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Signature":" void read(Graph graph) throws IOException"}, {"Body : ":"{\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Comment":"","Method:":"void read(Graph graph) throws IOException {\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Signature":" void read(Graph graph) throws IOException"}, {"Body : ":"{\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Comment":"","Method:":"void read(Graph graph) throws IOException {\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Signature":" void read(Graph graph) throws IOException"}, {"Body : ":"{\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Comment":"","Method:":"void read(Graph graph) throws IOException {\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Signature":" void read(Graph graph) throws IOException"}, {"Body : ":"{\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Comment":"","Method:":"void read(Graph graph) throws IOException {\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Signature":" void read(Graph graph) throws IOException"}, {"Body : ":"{\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Comment":"","Method:":"void read(Graph graph) throws IOException {\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Signature":" void read(Graph graph) throws IOException"}, {"Body : ":"{\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Comment":"","Method:":"void read(Graph graph) throws IOException {\r\n    if (graph.nextCreate != null) {\r\n        throw new IllegalStateException(\"Unexpected recursive call to read() for \" + id);\r\n    }\r\n    graph.nextCreate = this;\r\n    value = typeAdapter.fromJsonTree(element);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"non-null value deserialized to null: \" + element);\r\n    }\r\n}","Signature":" void read(Graph graph) throws IOException"},]}, {"longName":"com.google.gson.interceptors.InterceptorFactory",
"methods":[{"Body : ":"{\r\n    T result = delegate.read(in);\r\n    postDeserializer.postDeserialize(result);\r\n    return result;\r\n}","Comment":"","Method:":"@Override\r\npublic T read(JsonReader in) throws IOException {\r\n    T result = delegate.read(in);\r\n    postDeserializer.postDeserialize(result);\r\n    return result;\r\n}","Signature":"public T read(JsonReader in) throws IOException"}, {"Body : ":"{\r\n    T result = delegate.read(in);\r\n    postDeserializer.postDeserialize(result);\r\n    return result;\r\n}","Comment":"","Method:":"@Override\r\npublic T read(JsonReader in) throws IOException {\r\n    T result = delegate.read(in);\r\n    postDeserializer.postDeserialize(result);\r\n    return result;\r\n}","Signature":"public T read(JsonReader in) throws IOException"}, {"Body : ":"{\r\n    T result = delegate.read(in);\r\n    postDeserializer.postDeserialize(result);\r\n    return result;\r\n}","Comment":"","Method:":"@Override\r\npublic T read(JsonReader in) throws IOException {\r\n    T result = delegate.read(in);\r\n    postDeserializer.postDeserialize(result);\r\n    return result;\r\n}","Signature":"public T read(JsonReader in) throws IOException"},]}, {"longName":"com.google.gson.typeadapters.PostConstructAdapterFactory",
"methods":[{"Body : ":"{\r\n    delegate.write(out, value);\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, T value) throws IOException {\r\n    delegate.write(out, value);\r\n}","Signature":"public void write(JsonWriter out, T value) throws IOException"}, {"Body : ":"{\r\n    delegate.write(out, value);\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, T value) throws IOException {\r\n    delegate.write(out, value);\r\n}","Signature":"public void write(JsonWriter out, T value) throws IOException"}, {"Body : ":"{\r\n    delegate.write(out, value);\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, T value) throws IOException {\r\n    delegate.write(out, value);\r\n}","Signature":"public void write(JsonWriter out, T value) throws IOException"},]}, {"longName":"com.google.gson.typeadapters.RuntimeTypeAdapterFactory",
"methods":[{"Body : ":"{\r\n    Class<?> srcType = value.getClass();\r\n    String label = subtypeToLabel.get(srcType);\r\n    @SuppressWarnings(\"unchecked\")\r\n    TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);\r\n    if (delegate == null) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \"; did you forget to register a subtype?\");\r\n    }\r\n    JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\r\n    if (maintainType) {\r\n        jsonElementAdapter.write(out, jsonObject);\r\n        return;\r\n    }\r\n    JsonObject clone = new JsonObject();\r\n    if (jsonObject.has(typeFieldName)) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \" because it already defines a field named \" + typeFieldName);\r\n    }\r\n    clone.add(typeFieldName, new JsonPrimitive(label));\r\n    for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\r\n        clone.add(e.getKey(), e.getValue());\r\n    }\r\n    jsonElementAdapter.write(out, clone);\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, R value) throws IOException {\r\n    Class<?> srcType = value.getClass();\r\n    String label = subtypeToLabel.get(srcType);\r\n    @SuppressWarnings(\"unchecked\")\r\n    TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);\r\n    if (delegate == null) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \"; did you forget to register a subtype?\");\r\n    }\r\n    JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\r\n    if (maintainType) {\r\n        jsonElementAdapter.write(out, jsonObject);\r\n        return;\r\n    }\r\n    JsonObject clone = new JsonObject();\r\n    if (jsonObject.has(typeFieldName)) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \" because it already defines a field named \" + typeFieldName);\r\n    }\r\n    clone.add(typeFieldName, new JsonPrimitive(label));\r\n    for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\r\n        clone.add(e.getKey(), e.getValue());\r\n    }\r\n    jsonElementAdapter.write(out, clone);\r\n}","Signature":"public void write(JsonWriter out, R value) throws IOException"}, {"Body : ":"{\r\n    Class<?> srcType = value.getClass();\r\n    String label = subtypeToLabel.get(srcType);\r\n    @SuppressWarnings(\"unchecked\")\r\n    TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);\r\n    if (delegate == null) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \"; did you forget to register a subtype?\");\r\n    }\r\n    JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\r\n    if (maintainType) {\r\n        jsonElementAdapter.write(out, jsonObject);\r\n        return;\r\n    }\r\n    JsonObject clone = new JsonObject();\r\n    if (jsonObject.has(typeFieldName)) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \" because it already defines a field named \" + typeFieldName);\r\n    }\r\n    clone.add(typeFieldName, new JsonPrimitive(label));\r\n    for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\r\n        clone.add(e.getKey(), e.getValue());\r\n    }\r\n    jsonElementAdapter.write(out, clone);\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, R value) throws IOException {\r\n    Class<?> srcType = value.getClass();\r\n    String label = subtypeToLabel.get(srcType);\r\n    @SuppressWarnings(\"unchecked\")\r\n    TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);\r\n    if (delegate == null) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \"; did you forget to register a subtype?\");\r\n    }\r\n    JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\r\n    if (maintainType) {\r\n        jsonElementAdapter.write(out, jsonObject);\r\n        return;\r\n    }\r\n    JsonObject clone = new JsonObject();\r\n    if (jsonObject.has(typeFieldName)) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \" because it already defines a field named \" + typeFieldName);\r\n    }\r\n    clone.add(typeFieldName, new JsonPrimitive(label));\r\n    for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\r\n        clone.add(e.getKey(), e.getValue());\r\n    }\r\n    jsonElementAdapter.write(out, clone);\r\n}","Signature":"public void write(JsonWriter out, R value) throws IOException"}, {"Body : ":"{\r\n    Class<?> srcType = value.getClass();\r\n    String label = subtypeToLabel.get(srcType);\r\n    @SuppressWarnings(\"unchecked\")\r\n    TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);\r\n    if (delegate == null) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \"; did you forget to register a subtype?\");\r\n    }\r\n    JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\r\n    if (maintainType) {\r\n        jsonElementAdapter.write(out, jsonObject);\r\n        return;\r\n    }\r\n    JsonObject clone = new JsonObject();\r\n    if (jsonObject.has(typeFieldName)) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \" because it already defines a field named \" + typeFieldName);\r\n    }\r\n    clone.add(typeFieldName, new JsonPrimitive(label));\r\n    for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\r\n        clone.add(e.getKey(), e.getValue());\r\n    }\r\n    jsonElementAdapter.write(out, clone);\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, R value) throws IOException {\r\n    Class<?> srcType = value.getClass();\r\n    String label = subtypeToLabel.get(srcType);\r\n    @SuppressWarnings(\"unchecked\")\r\n    TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);\r\n    if (delegate == null) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \"; did you forget to register a subtype?\");\r\n    }\r\n    JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\r\n    if (maintainType) {\r\n        jsonElementAdapter.write(out, jsonObject);\r\n        return;\r\n    }\r\n    JsonObject clone = new JsonObject();\r\n    if (jsonObject.has(typeFieldName)) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \" because it already defines a field named \" + typeFieldName);\r\n    }\r\n    clone.add(typeFieldName, new JsonPrimitive(label));\r\n    for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\r\n        clone.add(e.getKey(), e.getValue());\r\n    }\r\n    jsonElementAdapter.write(out, clone);\r\n}","Signature":"public void write(JsonWriter out, R value) throws IOException"}, {"Body : ":"{\r\n    Class<?> srcType = value.getClass();\r\n    String label = subtypeToLabel.get(srcType);\r\n    @SuppressWarnings(\"unchecked\")\r\n    TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);\r\n    if (delegate == null) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \"; did you forget to register a subtype?\");\r\n    }\r\n    JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\r\n    if (maintainType) {\r\n        jsonElementAdapter.write(out, jsonObject);\r\n        return;\r\n    }\r\n    JsonObject clone = new JsonObject();\r\n    if (jsonObject.has(typeFieldName)) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \" because it already defines a field named \" + typeFieldName);\r\n    }\r\n    clone.add(typeFieldName, new JsonPrimitive(label));\r\n    for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\r\n        clone.add(e.getKey(), e.getValue());\r\n    }\r\n    jsonElementAdapter.write(out, clone);\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, R value) throws IOException {\r\n    Class<?> srcType = value.getClass();\r\n    String label = subtypeToLabel.get(srcType);\r\n    @SuppressWarnings(\"unchecked\")\r\n    TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);\r\n    if (delegate == null) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \"; did you forget to register a subtype?\");\r\n    }\r\n    JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\r\n    if (maintainType) {\r\n        jsonElementAdapter.write(out, jsonObject);\r\n        return;\r\n    }\r\n    JsonObject clone = new JsonObject();\r\n    if (jsonObject.has(typeFieldName)) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \" because it already defines a field named \" + typeFieldName);\r\n    }\r\n    clone.add(typeFieldName, new JsonPrimitive(label));\r\n    for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\r\n        clone.add(e.getKey(), e.getValue());\r\n    }\r\n    jsonElementAdapter.write(out, clone);\r\n}","Signature":"public void write(JsonWriter out, R value) throws IOException"}, {"Body : ":"{\r\n    Class<?> srcType = value.getClass();\r\n    String label = subtypeToLabel.get(srcType);\r\n    @SuppressWarnings(\"unchecked\")\r\n    TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);\r\n    if (delegate == null) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \"; did you forget to register a subtype?\");\r\n    }\r\n    JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\r\n    if (maintainType) {\r\n        jsonElementAdapter.write(out, jsonObject);\r\n        return;\r\n    }\r\n    JsonObject clone = new JsonObject();\r\n    if (jsonObject.has(typeFieldName)) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \" because it already defines a field named \" + typeFieldName);\r\n    }\r\n    clone.add(typeFieldName, new JsonPrimitive(label));\r\n    for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\r\n        clone.add(e.getKey(), e.getValue());\r\n    }\r\n    jsonElementAdapter.write(out, clone);\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, R value) throws IOException {\r\n    Class<?> srcType = value.getClass();\r\n    String label = subtypeToLabel.get(srcType);\r\n    @SuppressWarnings(\"unchecked\")\r\n    TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);\r\n    if (delegate == null) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \"; did you forget to register a subtype?\");\r\n    }\r\n    JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\r\n    if (maintainType) {\r\n        jsonElementAdapter.write(out, jsonObject);\r\n        return;\r\n    }\r\n    JsonObject clone = new JsonObject();\r\n    if (jsonObject.has(typeFieldName)) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \" because it already defines a field named \" + typeFieldName);\r\n    }\r\n    clone.add(typeFieldName, new JsonPrimitive(label));\r\n    for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\r\n        clone.add(e.getKey(), e.getValue());\r\n    }\r\n    jsonElementAdapter.write(out, clone);\r\n}","Signature":"public void write(JsonWriter out, R value) throws IOException"}, {"Body : ":"{\r\n    Class<?> srcType = value.getClass();\r\n    String label = subtypeToLabel.get(srcType);\r\n    @SuppressWarnings(\"unchecked\")\r\n    TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);\r\n    if (delegate == null) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \"; did you forget to register a subtype?\");\r\n    }\r\n    JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\r\n    if (maintainType) {\r\n        jsonElementAdapter.write(out, jsonObject);\r\n        return;\r\n    }\r\n    JsonObject clone = new JsonObject();\r\n    if (jsonObject.has(typeFieldName)) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \" because it already defines a field named \" + typeFieldName);\r\n    }\r\n    clone.add(typeFieldName, new JsonPrimitive(label));\r\n    for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\r\n        clone.add(e.getKey(), e.getValue());\r\n    }\r\n    jsonElementAdapter.write(out, clone);\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, R value) throws IOException {\r\n    Class<?> srcType = value.getClass();\r\n    String label = subtypeToLabel.get(srcType);\r\n    @SuppressWarnings(\"unchecked\")\r\n    TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);\r\n    if (delegate == null) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \"; did you forget to register a subtype?\");\r\n    }\r\n    JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\r\n    if (maintainType) {\r\n        jsonElementAdapter.write(out, jsonObject);\r\n        return;\r\n    }\r\n    JsonObject clone = new JsonObject();\r\n    if (jsonObject.has(typeFieldName)) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \" because it already defines a field named \" + typeFieldName);\r\n    }\r\n    clone.add(typeFieldName, new JsonPrimitive(label));\r\n    for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\r\n        clone.add(e.getKey(), e.getValue());\r\n    }\r\n    jsonElementAdapter.write(out, clone);\r\n}","Signature":"public void write(JsonWriter out, R value) throws IOException"}, {"Body : ":"{\r\n    Class<?> srcType = value.getClass();\r\n    String label = subtypeToLabel.get(srcType);\r\n    @SuppressWarnings(\"unchecked\")\r\n    TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);\r\n    if (delegate == null) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \"; did you forget to register a subtype?\");\r\n    }\r\n    JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\r\n    if (maintainType) {\r\n        jsonElementAdapter.write(out, jsonObject);\r\n        return;\r\n    }\r\n    JsonObject clone = new JsonObject();\r\n    if (jsonObject.has(typeFieldName)) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \" because it already defines a field named \" + typeFieldName);\r\n    }\r\n    clone.add(typeFieldName, new JsonPrimitive(label));\r\n    for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\r\n        clone.add(e.getKey(), e.getValue());\r\n    }\r\n    jsonElementAdapter.write(out, clone);\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, R value) throws IOException {\r\n    Class<?> srcType = value.getClass();\r\n    String label = subtypeToLabel.get(srcType);\r\n    @SuppressWarnings(\"unchecked\")\r\n    TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);\r\n    if (delegate == null) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \"; did you forget to register a subtype?\");\r\n    }\r\n    JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\r\n    if (maintainType) {\r\n        jsonElementAdapter.write(out, jsonObject);\r\n        return;\r\n    }\r\n    JsonObject clone = new JsonObject();\r\n    if (jsonObject.has(typeFieldName)) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \" because it already defines a field named \" + typeFieldName);\r\n    }\r\n    clone.add(typeFieldName, new JsonPrimitive(label));\r\n    for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\r\n        clone.add(e.getKey(), e.getValue());\r\n    }\r\n    jsonElementAdapter.write(out, clone);\r\n}","Signature":"public void write(JsonWriter out, R value) throws IOException"}, {"Body : ":"{\r\n    Class<?> srcType = value.getClass();\r\n    String label = subtypeToLabel.get(srcType);\r\n    @SuppressWarnings(\"unchecked\")\r\n    TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);\r\n    if (delegate == null) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \"; did you forget to register a subtype?\");\r\n    }\r\n    JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\r\n    if (maintainType) {\r\n        jsonElementAdapter.write(out, jsonObject);\r\n        return;\r\n    }\r\n    JsonObject clone = new JsonObject();\r\n    if (jsonObject.has(typeFieldName)) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \" because it already defines a field named \" + typeFieldName);\r\n    }\r\n    clone.add(typeFieldName, new JsonPrimitive(label));\r\n    for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\r\n        clone.add(e.getKey(), e.getValue());\r\n    }\r\n    jsonElementAdapter.write(out, clone);\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, R value) throws IOException {\r\n    Class<?> srcType = value.getClass();\r\n    String label = subtypeToLabel.get(srcType);\r\n    @SuppressWarnings(\"unchecked\")\r\n    TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);\r\n    if (delegate == null) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \"; did you forget to register a subtype?\");\r\n    }\r\n    JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\r\n    if (maintainType) {\r\n        jsonElementAdapter.write(out, jsonObject);\r\n        return;\r\n    }\r\n    JsonObject clone = new JsonObject();\r\n    if (jsonObject.has(typeFieldName)) {\r\n        throw new JsonParseException(\"cannot serialize \" + srcType.getName() + \" because it already defines a field named \" + typeFieldName);\r\n    }\r\n    clone.add(typeFieldName, new JsonPrimitive(label));\r\n    for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\r\n        clone.add(e.getKey(), e.getValue());\r\n    }\r\n    jsonElementAdapter.write(out, clone);\r\n}","Signature":"public void write(JsonWriter out, R value) throws IOException"},]}, {"longName":"com.google.gson.typeadapters.UtcDateTypeAdapter",
"methods":[{"Body : ":"{\r\n    if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {\r\n        throw new NumberFormatException(value);\r\n    }\r\n    int i = beginIndex;\r\n    int result = 0;\r\n    int digit;\r\n    if (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result = -digit;\r\n    }\r\n    while (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result *= 10;\r\n        result -= digit;\r\n    }\r\n    return -result;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Parse an integer located between 2 given offsets in a string'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the string to parse'}]}', name=Optional[value]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the start index for the integer in the string'}]}', name=Optional[beginIndex]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the end index for the integer in the string'}]}', name=Optional[endIndex]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='the int'}]}', name=Optional.empty}, JavadocBlockTag{type=THROWS, content='JavadocDescription{elements=[JavadocSnippet{text='if the value is not a number'}]}', name=Optional[NumberFormatException]}]}","Method:":"private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {\r\n    if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {\r\n        throw new NumberFormatException(value);\r\n    }\r\n    int i = beginIndex;\r\n    int result = 0;\r\n    int digit;\r\n    if (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result = -digit;\r\n    }\r\n    while (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result *= 10;\r\n        result -= digit;\r\n    }\r\n    return -result;\r\n}","Signature":"private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException"}, {"Body : ":"{\r\n    if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {\r\n        throw new NumberFormatException(value);\r\n    }\r\n    int i = beginIndex;\r\n    int result = 0;\r\n    int digit;\r\n    if (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result = -digit;\r\n    }\r\n    while (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result *= 10;\r\n        result -= digit;\r\n    }\r\n    return -result;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Parse an integer located between 2 given offsets in a string'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the string to parse'}]}', name=Optional[value]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the start index for the integer in the string'}]}', name=Optional[beginIndex]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the end index for the integer in the string'}]}', name=Optional[endIndex]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='the int'}]}', name=Optional.empty}, JavadocBlockTag{type=THROWS, content='JavadocDescription{elements=[JavadocSnippet{text='if the value is not a number'}]}', name=Optional[NumberFormatException]}]}","Method:":"private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {\r\n    if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {\r\n        throw new NumberFormatException(value);\r\n    }\r\n    int i = beginIndex;\r\n    int result = 0;\r\n    int digit;\r\n    if (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result = -digit;\r\n    }\r\n    while (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result *= 10;\r\n        result -= digit;\r\n    }\r\n    return -result;\r\n}","Signature":"private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException"}, {"Body : ":"{\r\n    if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {\r\n        throw new NumberFormatException(value);\r\n    }\r\n    int i = beginIndex;\r\n    int result = 0;\r\n    int digit;\r\n    if (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result = -digit;\r\n    }\r\n    while (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result *= 10;\r\n        result -= digit;\r\n    }\r\n    return -result;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Parse an integer located between 2 given offsets in a string'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the string to parse'}]}', name=Optional[value]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the start index for the integer in the string'}]}', name=Optional[beginIndex]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the end index for the integer in the string'}]}', name=Optional[endIndex]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='the int'}]}', name=Optional.empty}, JavadocBlockTag{type=THROWS, content='JavadocDescription{elements=[JavadocSnippet{text='if the value is not a number'}]}', name=Optional[NumberFormatException]}]}","Method:":"private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {\r\n    if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {\r\n        throw new NumberFormatException(value);\r\n    }\r\n    int i = beginIndex;\r\n    int result = 0;\r\n    int digit;\r\n    if (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result = -digit;\r\n    }\r\n    while (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result *= 10;\r\n        result -= digit;\r\n    }\r\n    return -result;\r\n}","Signature":"private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException"}, {"Body : ":"{\r\n    if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {\r\n        throw new NumberFormatException(value);\r\n    }\r\n    int i = beginIndex;\r\n    int result = 0;\r\n    int digit;\r\n    if (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result = -digit;\r\n    }\r\n    while (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result *= 10;\r\n        result -= digit;\r\n    }\r\n    return -result;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Parse an integer located between 2 given offsets in a string'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the string to parse'}]}', name=Optional[value]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the start index for the integer in the string'}]}', name=Optional[beginIndex]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the end index for the integer in the string'}]}', name=Optional[endIndex]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='the int'}]}', name=Optional.empty}, JavadocBlockTag{type=THROWS, content='JavadocDescription{elements=[JavadocSnippet{text='if the value is not a number'}]}', name=Optional[NumberFormatException]}]}","Method:":"private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {\r\n    if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {\r\n        throw new NumberFormatException(value);\r\n    }\r\n    int i = beginIndex;\r\n    int result = 0;\r\n    int digit;\r\n    if (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result = -digit;\r\n    }\r\n    while (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result *= 10;\r\n        result -= digit;\r\n    }\r\n    return -result;\r\n}","Signature":"private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException"}, {"Body : ":"{\r\n    if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {\r\n        throw new NumberFormatException(value);\r\n    }\r\n    int i = beginIndex;\r\n    int result = 0;\r\n    int digit;\r\n    if (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result = -digit;\r\n    }\r\n    while (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result *= 10;\r\n        result -= digit;\r\n    }\r\n    return -result;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Parse an integer located between 2 given offsets in a string'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the string to parse'}]}', name=Optional[value]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the start index for the integer in the string'}]}', name=Optional[beginIndex]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the end index for the integer in the string'}]}', name=Optional[endIndex]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='the int'}]}', name=Optional.empty}, JavadocBlockTag{type=THROWS, content='JavadocDescription{elements=[JavadocSnippet{text='if the value is not a number'}]}', name=Optional[NumberFormatException]}]}","Method:":"private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {\r\n    if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {\r\n        throw new NumberFormatException(value);\r\n    }\r\n    int i = beginIndex;\r\n    int result = 0;\r\n    int digit;\r\n    if (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result = -digit;\r\n    }\r\n    while (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result *= 10;\r\n        result -= digit;\r\n    }\r\n    return -result;\r\n}","Signature":"private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException"}, {"Body : ":"{\r\n    if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {\r\n        throw new NumberFormatException(value);\r\n    }\r\n    int i = beginIndex;\r\n    int result = 0;\r\n    int digit;\r\n    if (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result = -digit;\r\n    }\r\n    while (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result *= 10;\r\n        result -= digit;\r\n    }\r\n    return -result;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Parse an integer located between 2 given offsets in a string'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the string to parse'}]}', name=Optional[value]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the start index for the integer in the string'}]}', name=Optional[beginIndex]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the end index for the integer in the string'}]}', name=Optional[endIndex]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='the int'}]}', name=Optional.empty}, JavadocBlockTag{type=THROWS, content='JavadocDescription{elements=[JavadocSnippet{text='if the value is not a number'}]}', name=Optional[NumberFormatException]}]}","Method:":"private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {\r\n    if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {\r\n        throw new NumberFormatException(value);\r\n    }\r\n    int i = beginIndex;\r\n    int result = 0;\r\n    int digit;\r\n    if (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result = -digit;\r\n    }\r\n    while (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result *= 10;\r\n        result -= digit;\r\n    }\r\n    return -result;\r\n}","Signature":"private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException"}, {"Body : ":"{\r\n    if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {\r\n        throw new NumberFormatException(value);\r\n    }\r\n    int i = beginIndex;\r\n    int result = 0;\r\n    int digit;\r\n    if (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result = -digit;\r\n    }\r\n    while (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result *= 10;\r\n        result -= digit;\r\n    }\r\n    return -result;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Parse an integer located between 2 given offsets in a string'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the string to parse'}]}', name=Optional[value]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the start index for the integer in the string'}]}', name=Optional[beginIndex]}, JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the end index for the integer in the string'}]}', name=Optional[endIndex]}, JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='the int'}]}', name=Optional.empty}, JavadocBlockTag{type=THROWS, content='JavadocDescription{elements=[JavadocSnippet{text='if the value is not a number'}]}', name=Optional[NumberFormatException]}]}","Method:":"private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {\r\n    if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {\r\n        throw new NumberFormatException(value);\r\n    }\r\n    int i = beginIndex;\r\n    int result = 0;\r\n    int digit;\r\n    if (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result = -digit;\r\n    }\r\n    while (i < endIndex) {\r\n        digit = Character.digit(value.charAt(i++), 10);\r\n        if (digit < 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value);\r\n        }\r\n        result *= 10;\r\n        result -= digit;\r\n    }\r\n    return -result;\r\n}","Signature":"private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException"},]}, {"longName":"com.google.gson.graph.GraphAdapterBuilderTest",
"methods":[{"Body : ":"{\r\n    GsonBuilder gsonBuilder = new GsonBuilder();\r\n    new GraphAdapterBuilder().addType(Company.class).addType(Employee.class).registerOn(gsonBuilder);\r\n    Gson gson = gsonBuilder.create();\r\n    String json = \"{'0x1':{'name':'Google','employees':['0x2','0x3']},\" + \"'0x2':{'name':'Jesse','company':'0x1'},\" + \"'0x3':{'name':'Joel','company':'0x1'}}\";\r\n    Company company = gson.fromJson(json, Company.class);\r\n    assertEquals(\"Google\", company.name);\r\n    Employee jesse = company.employees.get(0);\r\n    assertEquals(\"Jesse\", jesse.name);\r\n    assertEquals(company, jesse.company);\r\n    Employee joel = company.employees.get(1);\r\n    assertEquals(\"Joel\", joel.name);\r\n    assertEquals(company, joel.company);\r\n}","Comment":"","Method:":"@Test\r\npublic void testDeserializationWithMultipleTypes() {\r\n    GsonBuilder gsonBuilder = new GsonBuilder();\r\n    new GraphAdapterBuilder().addType(Company.class).addType(Employee.class).registerOn(gsonBuilder);\r\n    Gson gson = gsonBuilder.create();\r\n    String json = \"{'0x1':{'name':'Google','employees':['0x2','0x3']},\" + \"'0x2':{'name':'Jesse','company':'0x1'},\" + \"'0x3':{'name':'Joel','company':'0x1'}}\";\r\n    Company company = gson.fromJson(json, Company.class);\r\n    assertEquals(\"Google\", company.name);\r\n    Employee jesse = company.employees.get(0);\r\n    assertEquals(\"Jesse\", jesse.name);\r\n    assertEquals(company, jesse.company);\r\n    Employee joel = company.employees.get(1);\r\n    assertEquals(\"Joel\", joel.name);\r\n    assertEquals(company, joel.company);\r\n}","Signature":"public void testDeserializationWithMultipleTypes()"}, {"Body : ":"{\r\n    GsonBuilder gsonBuilder = new GsonBuilder();\r\n    new GraphAdapterBuilder().addType(Company.class).addType(Employee.class).registerOn(gsonBuilder);\r\n    Gson gson = gsonBuilder.create();\r\n    String json = \"{'0x1':{'name':'Google','employees':['0x2','0x3']},\" + \"'0x2':{'name':'Jesse','company':'0x1'},\" + \"'0x3':{'name':'Joel','company':'0x1'}}\";\r\n    Company company = gson.fromJson(json, Company.class);\r\n    assertEquals(\"Google\", company.name);\r\n    Employee jesse = company.employees.get(0);\r\n    assertEquals(\"Jesse\", jesse.name);\r\n    assertEquals(company, jesse.company);\r\n    Employee joel = company.employees.get(1);\r\n    assertEquals(\"Joel\", joel.name);\r\n    assertEquals(company, joel.company);\r\n}","Comment":"","Method:":"@Test\r\npublic void testDeserializationWithMultipleTypes() {\r\n    GsonBuilder gsonBuilder = new GsonBuilder();\r\n    new GraphAdapterBuilder().addType(Company.class).addType(Employee.class).registerOn(gsonBuilder);\r\n    Gson gson = gsonBuilder.create();\r\n    String json = \"{'0x1':{'name':'Google','employees':['0x2','0x3']},\" + \"'0x2':{'name':'Jesse','company':'0x1'},\" + \"'0x3':{'name':'Joel','company':'0x1'}}\";\r\n    Company company = gson.fromJson(json, Company.class);\r\n    assertEquals(\"Google\", company.name);\r\n    Employee jesse = company.employees.get(0);\r\n    assertEquals(\"Jesse\", jesse.name);\r\n    assertEquals(company, jesse.company);\r\n    Employee joel = company.employees.get(1);\r\n    assertEquals(\"Joel\", joel.name);\r\n    assertEquals(company, joel.company);\r\n}","Signature":"public void testDeserializationWithMultipleTypes()"}, {"Body : ":"{\r\n    GsonBuilder gsonBuilder = new GsonBuilder();\r\n    new GraphAdapterBuilder().addType(Company.class).addType(Employee.class).registerOn(gsonBuilder);\r\n    Gson gson = gsonBuilder.create();\r\n    String json = \"{'0x1':{'name':'Google','employees':['0x2','0x3']},\" + \"'0x2':{'name':'Jesse','company':'0x1'},\" + \"'0x3':{'name':'Joel','company':'0x1'}}\";\r\n    Company company = gson.fromJson(json, Company.class);\r\n    assertEquals(\"Google\", company.name);\r\n    Employee jesse = company.employees.get(0);\r\n    assertEquals(\"Jesse\", jesse.name);\r\n    assertEquals(company, jesse.company);\r\n    Employee joel = company.employees.get(1);\r\n    assertEquals(\"Joel\", joel.name);\r\n    assertEquals(company, joel.company);\r\n}","Comment":"","Method:":"@Test\r\npublic void testDeserializationWithMultipleTypes() {\r\n    GsonBuilder gsonBuilder = new GsonBuilder();\r\n    new GraphAdapterBuilder().addType(Company.class).addType(Employee.class).registerOn(gsonBuilder);\r\n    Gson gson = gsonBuilder.create();\r\n    String json = \"{'0x1':{'name':'Google','employees':['0x2','0x3']},\" + \"'0x2':{'name':'Jesse','company':'0x1'},\" + \"'0x3':{'name':'Joel','company':'0x1'}}\";\r\n    Company company = gson.fromJson(json, Company.class);\r\n    assertEquals(\"Google\", company.name);\r\n    Employee jesse = company.employees.get(0);\r\n    assertEquals(\"Jesse\", jesse.name);\r\n    assertEquals(company, jesse.company);\r\n    Employee joel = company.employees.get(1);\r\n    assertEquals(\"Joel\", joel.name);\r\n    assertEquals(company, joel.company);\r\n}","Signature":"public void testDeserializationWithMultipleTypes()"}, {"Body : ":"{\r\n    GsonBuilder gsonBuilder = new GsonBuilder();\r\n    new GraphAdapterBuilder().addType(Company.class).addType(Employee.class).registerOn(gsonBuilder);\r\n    Gson gson = gsonBuilder.create();\r\n    String json = \"{'0x1':{'name':'Google','employees':['0x2','0x3']},\" + \"'0x2':{'name':'Jesse','company':'0x1'},\" + \"'0x3':{'name':'Joel','company':'0x1'}}\";\r\n    Company company = gson.fromJson(json, Company.class);\r\n    assertEquals(\"Google\", company.name);\r\n    Employee jesse = company.employees.get(0);\r\n    assertEquals(\"Jesse\", jesse.name);\r\n    assertEquals(company, jesse.company);\r\n    Employee joel = company.employees.get(1);\r\n    assertEquals(\"Joel\", joel.name);\r\n    assertEquals(company, joel.company);\r\n}","Comment":"","Method:":"@Test\r\npublic void testDeserializationWithMultipleTypes() {\r\n    GsonBuilder gsonBuilder = new GsonBuilder();\r\n    new GraphAdapterBuilder().addType(Company.class).addType(Employee.class).registerOn(gsonBuilder);\r\n    Gson gson = gsonBuilder.create();\r\n    String json = \"{'0x1':{'name':'Google','employees':['0x2','0x3']},\" + \"'0x2':{'name':'Jesse','company':'0x1'},\" + \"'0x3':{'name':'Joel','company':'0x1'}}\";\r\n    Company company = gson.fromJson(json, Company.class);\r\n    assertEquals(\"Google\", company.name);\r\n    Employee jesse = company.employees.get(0);\r\n    assertEquals(\"Jesse\", jesse.name);\r\n    assertEquals(company, jesse.company);\r\n    Employee joel = company.employees.get(1);\r\n    assertEquals(\"Joel\", joel.name);\r\n    assertEquals(company, joel.company);\r\n}","Signature":"public void testDeserializationWithMultipleTypes()"}, {"Body : ":"{\r\n    GsonBuilder gsonBuilder = new GsonBuilder();\r\n    new GraphAdapterBuilder().addType(Company.class).addType(Employee.class).registerOn(gsonBuilder);\r\n    Gson gson = gsonBuilder.create();\r\n    String json = \"{'0x1':{'name':'Google','employees':['0x2','0x3']},\" + \"'0x2':{'name':'Jesse','company':'0x1'},\" + \"'0x3':{'name':'Joel','company':'0x1'}}\";\r\n    Company company = gson.fromJson(json, Company.class);\r\n    assertEquals(\"Google\", company.name);\r\n    Employee jesse = company.employees.get(0);\r\n    assertEquals(\"Jesse\", jesse.name);\r\n    assertEquals(company, jesse.company);\r\n    Employee joel = company.employees.get(1);\r\n    assertEquals(\"Joel\", joel.name);\r\n    assertEquals(company, joel.company);\r\n}","Comment":"","Method:":"@Test\r\npublic void testDeserializationWithMultipleTypes() {\r\n    GsonBuilder gsonBuilder = new GsonBuilder();\r\n    new GraphAdapterBuilder().addType(Company.class).addType(Employee.class).registerOn(gsonBuilder);\r\n    Gson gson = gsonBuilder.create();\r\n    String json = \"{'0x1':{'name':'Google','employees':['0x2','0x3']},\" + \"'0x2':{'name':'Jesse','company':'0x1'},\" + \"'0x3':{'name':'Joel','company':'0x1'}}\";\r\n    Company company = gson.fromJson(json, Company.class);\r\n    assertEquals(\"Google\", company.name);\r\n    Employee jesse = company.employees.get(0);\r\n    assertEquals(\"Jesse\", jesse.name);\r\n    assertEquals(company, jesse.company);\r\n    Employee joel = company.employees.get(1);\r\n    assertEquals(\"Joel\", joel.name);\r\n    assertEquals(company, joel.company);\r\n}","Signature":"public void testDeserializationWithMultipleTypes()"}, {"Body : ":"{\r\n    GsonBuilder gsonBuilder = new GsonBuilder();\r\n    new GraphAdapterBuilder().addType(Company.class).addType(Employee.class).registerOn(gsonBuilder);\r\n    Gson gson = gsonBuilder.create();\r\n    String json = \"{'0x1':{'name':'Google','employees':['0x2','0x3']},\" + \"'0x2':{'name':'Jesse','company':'0x1'},\" + \"'0x3':{'name':'Joel','company':'0x1'}}\";\r\n    Company company = gson.fromJson(json, Company.class);\r\n    assertEquals(\"Google\", company.name);\r\n    Employee jesse = company.employees.get(0);\r\n    assertEquals(\"Jesse\", jesse.name);\r\n    assertEquals(company, jesse.company);\r\n    Employee joel = company.employees.get(1);\r\n    assertEquals(\"Joel\", joel.name);\r\n    assertEquals(company, joel.company);\r\n}","Comment":"","Method:":"@Test\r\npublic void testDeserializationWithMultipleTypes() {\r\n    GsonBuilder gsonBuilder = new GsonBuilder();\r\n    new GraphAdapterBuilder().addType(Company.class).addType(Employee.class).registerOn(gsonBuilder);\r\n    Gson gson = gsonBuilder.create();\r\n    String json = \"{'0x1':{'name':'Google','employees':['0x2','0x3']},\" + \"'0x2':{'name':'Jesse','company':'0x1'},\" + \"'0x3':{'name':'Joel','company':'0x1'}}\";\r\n    Company company = gson.fromJson(json, Company.class);\r\n    assertEquals(\"Google\", company.name);\r\n    Employee jesse = company.employees.get(0);\r\n    assertEquals(\"Jesse\", jesse.name);\r\n    assertEquals(company, jesse.company);\r\n    Employee joel = company.employees.get(1);\r\n    assertEquals(\"Joel\", joel.name);\r\n    assertEquals(company, joel.company);\r\n}","Signature":"public void testDeserializationWithMultipleTypes()"}, {"Body : ":"{\r\n    GsonBuilder gsonBuilder = new GsonBuilder();\r\n    new GraphAdapterBuilder().addType(Company.class).addType(Employee.class).registerOn(gsonBuilder);\r\n    Gson gson = gsonBuilder.create();\r\n    String json = \"{'0x1':{'name':'Google','employees':['0x2','0x3']},\" + \"'0x2':{'name':'Jesse','company':'0x1'},\" + \"'0x3':{'name':'Joel','company':'0x1'}}\";\r\n    Company company = gson.fromJson(json, Company.class);\r\n    assertEquals(\"Google\", company.name);\r\n    Employee jesse = company.employees.get(0);\r\n    assertEquals(\"Jesse\", jesse.name);\r\n    assertEquals(company, jesse.company);\r\n    Employee joel = company.employees.get(1);\r\n    assertEquals(\"Joel\", joel.name);\r\n    assertEquals(company, joel.company);\r\n}","Comment":"","Method:":"@Test\r\npublic void testDeserializationWithMultipleTypes() {\r\n    GsonBuilder gsonBuilder = new GsonBuilder();\r\n    new GraphAdapterBuilder().addType(Company.class).addType(Employee.class).registerOn(gsonBuilder);\r\n    Gson gson = gsonBuilder.create();\r\n    String json = \"{'0x1':{'name':'Google','employees':['0x2','0x3']},\" + \"'0x2':{'name':'Jesse','company':'0x1'},\" + \"'0x3':{'name':'Joel','company':'0x1'}}\";\r\n    Company company = gson.fromJson(json, Company.class);\r\n    assertEquals(\"Google\", company.name);\r\n    Employee jesse = company.employees.get(0);\r\n    assertEquals(\"Jesse\", jesse.name);\r\n    assertEquals(company, jesse.company);\r\n    Employee joel = company.employees.get(1);\r\n    assertEquals(\"Joel\", joel.name);\r\n    assertEquals(company, joel.company);\r\n}","Signature":"public void testDeserializationWithMultipleTypes()"},]}, {"longName":"com.google.gson.interceptors.InterceptorTest",
"methods":[{"Body : ":"{\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Comment":"","Method:":"public void postDeserialize(Address address) {\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Signature":"public void postDeserialize(Address address)"}, {"Body : ":"{\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Comment":"","Method:":"public void postDeserialize(Address address) {\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Signature":"public void postDeserialize(Address address)"}, {"Body : ":"{\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Comment":"","Method:":"public void postDeserialize(Address address) {\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Signature":"public void postDeserialize(Address address)"}, {"Body : ":"{\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Comment":"","Method:":"public void postDeserialize(Address address) {\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Signature":"public void postDeserialize(Address address)"}, {"Body : ":"{\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Comment":"","Method:":"public void postDeserialize(Address address) {\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Signature":"public void postDeserialize(Address address)"}, {"Body : ":"{\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Comment":"","Method:":"public void postDeserialize(Address address) {\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Signature":"public void postDeserialize(Address address)"}, {"Body : ":"{\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Comment":"","Method:":"public void postDeserialize(Address address) {\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Signature":"public void postDeserialize(Address address)"}, {"Body : ":"{\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Comment":"","Method:":"public void postDeserialize(Address address) {\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Signature":"public void postDeserialize(Address address)"}, {"Body : ":"{\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Comment":"","Method:":"public void postDeserialize(Address address) {\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Signature":"public void postDeserialize(Address address)"}, {"Body : ":"{\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Comment":"","Method:":"public void postDeserialize(Address address) {\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Signature":"public void postDeserialize(Address address)"}, {"Body : ":"{\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Comment":"","Method:":"public void postDeserialize(Address address) {\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Signature":"public void postDeserialize(Address address)"}, {"Body : ":"{\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Comment":"","Method:":"public void postDeserialize(Address address) {\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Signature":"public void postDeserialize(Address address)"}, {"Body : ":"{\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Comment":"","Method:":"public void postDeserialize(Address address) {\r\n    if (address.city == null || address.state == null || address.zip == null) {\r\n        throw new JsonSyntaxException(\"Address city, state and zip are required fields.\");\r\n    }\r\n    if (address.firstLine == null)\r\n        address.firstLine = Address.DEFAULT_FIRST_LINE;\r\n}","Signature":"public void postDeserialize(Address address)"},]}, {"longName":"com.google.gson.typeadapters.PostConstructAdapterFactoryTest",
"methods":[{"Body : ":"{\r\n    if (o == this) {\r\n        return true;\r\n    }\r\n    if (!(o instanceof MultipleSandwiches)) {\r\n        return false;\r\n    }\r\n    final MultipleSandwiches other = (MultipleSandwiches) o;\r\n    if (this.sandwiches == null ? other.sandwiches != null : !this.sandwiches.equals(other.sandwiches)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"public boolean equals(Object o) {\r\n    if (o == this) {\r\n        return true;\r\n    }\r\n    if (!(o instanceof MultipleSandwiches)) {\r\n        return false;\r\n    }\r\n    final MultipleSandwiches other = (MultipleSandwiches) o;\r\n    if (this.sandwiches == null ? other.sandwiches != null : !this.sandwiches.equals(other.sandwiches)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}","Signature":"public boolean equals(Object o)"}, {"Body : ":"{\r\n    if (o == this) {\r\n        return true;\r\n    }\r\n    if (!(o instanceof MultipleSandwiches)) {\r\n        return false;\r\n    }\r\n    final MultipleSandwiches other = (MultipleSandwiches) o;\r\n    if (this.sandwiches == null ? other.sandwiches != null : !this.sandwiches.equals(other.sandwiches)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"public boolean equals(Object o) {\r\n    if (o == this) {\r\n        return true;\r\n    }\r\n    if (!(o instanceof MultipleSandwiches)) {\r\n        return false;\r\n    }\r\n    final MultipleSandwiches other = (MultipleSandwiches) o;\r\n    if (this.sandwiches == null ? other.sandwiches != null : !this.sandwiches.equals(other.sandwiches)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}","Signature":"public boolean equals(Object o)"}, {"Body : ":"{\r\n    if (o == this) {\r\n        return true;\r\n    }\r\n    if (!(o instanceof MultipleSandwiches)) {\r\n        return false;\r\n    }\r\n    final MultipleSandwiches other = (MultipleSandwiches) o;\r\n    if (this.sandwiches == null ? other.sandwiches != null : !this.sandwiches.equals(other.sandwiches)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"public boolean equals(Object o) {\r\n    if (o == this) {\r\n        return true;\r\n    }\r\n    if (!(o instanceof MultipleSandwiches)) {\r\n        return false;\r\n    }\r\n    final MultipleSandwiches other = (MultipleSandwiches) o;\r\n    if (this.sandwiches == null ? other.sandwiches != null : !this.sandwiches.equals(other.sandwiches)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}","Signature":"public boolean equals(Object o)"}, {"Body : ":"{\r\n    if (o == this) {\r\n        return true;\r\n    }\r\n    if (!(o instanceof MultipleSandwiches)) {\r\n        return false;\r\n    }\r\n    final MultipleSandwiches other = (MultipleSandwiches) o;\r\n    if (this.sandwiches == null ? other.sandwiches != null : !this.sandwiches.equals(other.sandwiches)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"public boolean equals(Object o) {\r\n    if (o == this) {\r\n        return true;\r\n    }\r\n    if (!(o instanceof MultipleSandwiches)) {\r\n        return false;\r\n    }\r\n    final MultipleSandwiches other = (MultipleSandwiches) o;\r\n    if (this.sandwiches == null ? other.sandwiches != null : !this.sandwiches.equals(other.sandwiches)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}","Signature":"public boolean equals(Object o)"}, {"Body : ":"{\r\n    if (o == this) {\r\n        return true;\r\n    }\r\n    if (!(o instanceof MultipleSandwiches)) {\r\n        return false;\r\n    }\r\n    final MultipleSandwiches other = (MultipleSandwiches) o;\r\n    if (this.sandwiches == null ? other.sandwiches != null : !this.sandwiches.equals(other.sandwiches)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"public boolean equals(Object o) {\r\n    if (o == this) {\r\n        return true;\r\n    }\r\n    if (!(o instanceof MultipleSandwiches)) {\r\n        return false;\r\n    }\r\n    final MultipleSandwiches other = (MultipleSandwiches) o;\r\n    if (this.sandwiches == null ? other.sandwiches != null : !this.sandwiches.equals(other.sandwiches)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}","Signature":"public boolean equals(Object o)"},]}, {"longName":"com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest",
"methods":[{"Body : ":"{\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Comment":"","Method:":"public void testSerializeWrappedNullValue() {\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Signature":"public void testSerializeWrappedNullValue()"}, {"Body : ":"{\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Comment":"","Method:":"public void testSerializeWrappedNullValue() {\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Signature":"public void testSerializeWrappedNullValue()"}, {"Body : ":"{\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Comment":"","Method:":"public void testSerializeWrappedNullValue() {\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Signature":"public void testSerializeWrappedNullValue()"}, {"Body : ":"{\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Comment":"","Method:":"public void testSerializeWrappedNullValue() {\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Signature":"public void testSerializeWrappedNullValue()"}, {"Body : ":"{\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Comment":"","Method:":"public void testSerializeWrappedNullValue() {\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Signature":"public void testSerializeWrappedNullValue()"}, {"Body : ":"{\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Comment":"","Method:":"public void testSerializeWrappedNullValue() {\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Signature":"public void testSerializeWrappedNullValue()"}, {"Body : ":"{\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Comment":"","Method:":"public void testSerializeWrappedNullValue() {\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Signature":"public void testSerializeWrappedNullValue()"}, {"Body : ":"{\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Comment":"","Method:":"public void testSerializeWrappedNullValue() {\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Signature":"public void testSerializeWrappedNullValue()"}, {"Body : ":"{\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Comment":"","Method:":"public void testSerializeWrappedNullValue() {\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Signature":"public void testSerializeWrappedNullValue()"}, {"Body : ":"{\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Comment":"","Method:":"public void testSerializeWrappedNullValue() {\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Signature":"public void testSerializeWrappedNullValue()"}, {"Body : ":"{\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Comment":"","Method:":"public void testSerializeWrappedNullValue() {\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Signature":"public void testSerializeWrappedNullValue()"}, {"Body : ":"{\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Comment":"","Method:":"public void testSerializeWrappedNullValue() {\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Signature":"public void testSerializeWrappedNullValue()"}, {"Body : ":"{\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Comment":"","Method:":"public void testSerializeWrappedNullValue() {\r\n    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class).registerSubtype(CreditCard.class).registerSubtype(BankTransfer.class);\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(billingAdapter).create();\r\n    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\r\n    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\r\n    assertNull(deserialized.instrument);\r\n}","Signature":"public void testSerializeWrappedNullValue()"},]}, {"longName":"com.google.gson.typeadapters.UtcDateTypeAdapterTest",
"methods":[{"Body : ":"{\r\n    try {\r\n        gson.fromJson(\"2017-06-20T14:32:30\", Date.class);\r\n        fail(\"No exception\");\r\n    } catch (JsonParseException exe) {\r\n        assertEquals(exe.getMessage(), \"java.text.ParseException: Failed to parse date ['2017-06-20T14']: 2017-06-20T14\");\r\n    }\r\n}","Comment":"","Method:":"public void testWellFormedParseException() {\r\n    try {\r\n        gson.fromJson(\"2017-06-20T14:32:30\", Date.class);\r\n        fail(\"No exception\");\r\n    } catch (JsonParseException exe) {\r\n        assertEquals(exe.getMessage(), \"java.text.ParseException: Failed to parse date ['2017-06-20T14']: 2017-06-20T14\");\r\n    }\r\n}","Signature":"public void testWellFormedParseException()"}, {"Body : ":"{\r\n    try {\r\n        gson.fromJson(\"2017-06-20T14:32:30\", Date.class);\r\n        fail(\"No exception\");\r\n    } catch (JsonParseException exe) {\r\n        assertEquals(exe.getMessage(), \"java.text.ParseException: Failed to parse date ['2017-06-20T14']: 2017-06-20T14\");\r\n    }\r\n}","Comment":"","Method:":"public void testWellFormedParseException() {\r\n    try {\r\n        gson.fromJson(\"2017-06-20T14:32:30\", Date.class);\r\n        fail(\"No exception\");\r\n    } catch (JsonParseException exe) {\r\n        assertEquals(exe.getMessage(), \"java.text.ParseException: Failed to parse date ['2017-06-20T14']: 2017-06-20T14\");\r\n    }\r\n}","Signature":"public void testWellFormedParseException()"}, {"Body : ":"{\r\n    try {\r\n        gson.fromJson(\"2017-06-20T14:32:30\", Date.class);\r\n        fail(\"No exception\");\r\n    } catch (JsonParseException exe) {\r\n        assertEquals(exe.getMessage(), \"java.text.ParseException: Failed to parse date ['2017-06-20T14']: 2017-06-20T14\");\r\n    }\r\n}","Comment":"","Method:":"public void testWellFormedParseException() {\r\n    try {\r\n        gson.fromJson(\"2017-06-20T14:32:30\", Date.class);\r\n        fail(\"No exception\");\r\n    } catch (JsonParseException exe) {\r\n        assertEquals(exe.getMessage(), \"java.text.ParseException: Failed to parse date ['2017-06-20T14']: 2017-06-20T14\");\r\n    }\r\n}","Signature":"public void testWellFormedParseException()"}, {"Body : ":"{\r\n    try {\r\n        gson.fromJson(\"2017-06-20T14:32:30\", Date.class);\r\n        fail(\"No exception\");\r\n    } catch (JsonParseException exe) {\r\n        assertEquals(exe.getMessage(), \"java.text.ParseException: Failed to parse date ['2017-06-20T14']: 2017-06-20T14\");\r\n    }\r\n}","Comment":"","Method:":"public void testWellFormedParseException() {\r\n    try {\r\n        gson.fromJson(\"2017-06-20T14:32:30\", Date.class);\r\n        fail(\"No exception\");\r\n    } catch (JsonParseException exe) {\r\n        assertEquals(exe.getMessage(), \"java.text.ParseException: Failed to parse date ['2017-06-20T14']: 2017-06-20T14\");\r\n    }\r\n}","Signature":"public void testWellFormedParseException()"}, {"Body : ":"{\r\n    try {\r\n        gson.fromJson(\"2017-06-20T14:32:30\", Date.class);\r\n        fail(\"No exception\");\r\n    } catch (JsonParseException exe) {\r\n        assertEquals(exe.getMessage(), \"java.text.ParseException: Failed to parse date ['2017-06-20T14']: 2017-06-20T14\");\r\n    }\r\n}","Comment":"","Method:":"public void testWellFormedParseException() {\r\n    try {\r\n        gson.fromJson(\"2017-06-20T14:32:30\", Date.class);\r\n        fail(\"No exception\");\r\n    } catch (JsonParseException exe) {\r\n        assertEquals(exe.getMessage(), \"java.text.ParseException: Failed to parse date ['2017-06-20T14']: 2017-06-20T14\");\r\n    }\r\n}","Signature":"public void testWellFormedParseException()"}, {"Body : ":"{\r\n    try {\r\n        gson.fromJson(\"2017-06-20T14:32:30\", Date.class);\r\n        fail(\"No exception\");\r\n    } catch (JsonParseException exe) {\r\n        assertEquals(exe.getMessage(), \"java.text.ParseException: Failed to parse date ['2017-06-20T14']: 2017-06-20T14\");\r\n    }\r\n}","Comment":"","Method:":"public void testWellFormedParseException() {\r\n    try {\r\n        gson.fromJson(\"2017-06-20T14:32:30\", Date.class);\r\n        fail(\"No exception\");\r\n    } catch (JsonParseException exe) {\r\n        assertEquals(exe.getMessage(), \"java.text.ParseException: Failed to parse date ['2017-06-20T14']: 2017-06-20T14\");\r\n    }\r\n}","Signature":"public void testWellFormedParseException()"},]}, {"longName":"com.google.gson.FieldAttributes",
"methods":[{"Body : ":"{\r\n    return field.isSynthetic();\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This is exposed internally only for the removing synthetic fields from the JSON output.'}]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='true if the field is synthetic; otherwise false'}]}', name=Optional.empty}]}","Method:":"boolean isSynthetic() {\r\n    return field.isSynthetic();\r\n}","Signature":" boolean isSynthetic()"}, {"Body : ":"{\r\n    return field.isSynthetic();\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This is exposed internally only for the removing synthetic fields from the JSON output.'}]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='true if the field is synthetic; otherwise false'}]}', name=Optional.empty}]}","Method:":"boolean isSynthetic() {\r\n    return field.isSynthetic();\r\n}","Signature":" boolean isSynthetic()"}, {"Body : ":"{\r\n    return field.isSynthetic();\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This is exposed internally only for the removing synthetic fields from the JSON output.'}]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='true if the field is synthetic; otherwise false'}]}', name=Optional.empty}]}","Method:":"boolean isSynthetic() {\r\n    return field.isSynthetic();\r\n}","Signature":" boolean isSynthetic()"}, {"Body : ":"{\r\n    return field.isSynthetic();\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This is exposed internally only for the removing synthetic fields from the JSON output.'}]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='true if the field is synthetic; otherwise false'}]}', name=Optional.empty}]}","Method:":"boolean isSynthetic() {\r\n    return field.isSynthetic();\r\n}","Signature":" boolean isSynthetic()"}, {"Body : ":"{\r\n    return field.isSynthetic();\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This is exposed internally only for the removing synthetic fields from the JSON output.'}]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='true if the field is synthetic; otherwise false'}]}', name=Optional.empty}]}","Method:":"boolean isSynthetic() {\r\n    return field.isSynthetic();\r\n}","Signature":" boolean isSynthetic()"}, {"Body : ":"{\r\n    return field.isSynthetic();\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This is exposed internally only for the removing synthetic fields from the JSON output.'}]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='true if the field is synthetic; otherwise false'}]}', name=Optional.empty}]}","Method:":"boolean isSynthetic() {\r\n    return field.isSynthetic();\r\n}","Signature":" boolean isSynthetic()"}, {"Body : ":"{\r\n    return field.isSynthetic();\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This is exposed internally only for the removing synthetic fields from the JSON output.'}]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='true if the field is synthetic; otherwise false'}]}', name=Optional.empty}]}","Method:":"boolean isSynthetic() {\r\n    return field.isSynthetic();\r\n}","Signature":" boolean isSynthetic()"}, {"Body : ":"{\r\n    return field.isSynthetic();\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This is exposed internally only for the removing synthetic fields from the JSON output.'}]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='true if the field is synthetic; otherwise false'}]}', name=Optional.empty}]}","Method:":"boolean isSynthetic() {\r\n    return field.isSynthetic();\r\n}","Signature":" boolean isSynthetic()"}, {"Body : ":"{\r\n    return field.isSynthetic();\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This is exposed internally only for the removing synthetic fields from the JSON output.'}]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocSnippet{text='true if the field is synthetic; otherwise false'}]}', name=Optional.empty}]}","Method:":"boolean isSynthetic() {\r\n    return field.isSynthetic();\r\n}","Signature":" boolean isSynthetic()"},]}, {"longName":"com.google.gson.Gson",
"methods":[{"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return new StringBuilder(\"{serializeNulls:\").append(serializeNulls).append(\",factories:\").append(factories).append(\",instanceCreators:\").append(constructorConstructor).append(\"}\").toString();\r\n}","Signature":"public String toString()"},]}, {"longName":"com.google.gson.GsonBuilder",
"methods":[{"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"}, {"Body : ":"{\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Comment":"","Method:":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories) {\r\n    TypeAdapterFactory dateAdapterFactory;\r\n    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;\r\n    TypeAdapterFactory sqlTimestampAdapterFactory = null;\r\n    TypeAdapterFactory sqlDateAdapterFactory = null;\r\n    if (datePattern != null && !datePattern.trim().isEmpty()) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);\r\n        }\r\n    } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\r\n        dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);\r\n        if (sqlTypesSupported) {\r\n            sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n            sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);\r\n        }\r\n    } else {\r\n        return;\r\n    }\r\n    factories.add(dateAdapterFactory);\r\n    if (sqlTypesSupported) {\r\n        factories.add(sqlTimestampAdapterFactory);\r\n        factories.add(sqlDateAdapterFactory);\r\n    }\r\n}","Signature":"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, List<TypeAdapterFactory> factories)"},]}, {"longName":"com.google.gson.internal.$Gson$Preconditions",
"methods":[{"Body : ":"{\r\n    if (!condition) {\r\n        throw new IllegalArgumentException();\r\n    }\r\n}","Comment":"","Method:":"public static void checkArgument(boolean condition) {\r\n    if (!condition) {\r\n        throw new IllegalArgumentException();\r\n    }\r\n}","Signature":"public static void checkArgument(boolean condition)"}, {"Body : ":"{\r\n    if (!condition) {\r\n        throw new IllegalArgumentException();\r\n    }\r\n}","Comment":"","Method:":"public static void checkArgument(boolean condition) {\r\n    if (!condition) {\r\n        throw new IllegalArgumentException();\r\n    }\r\n}","Signature":"public static void checkArgument(boolean condition)"},]}, {"longName":"com.google.gson.internal.$Gson$Types",
"methods":[{"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    if (lowerBound != null) {\r\n        return \"? super \" + typeToString(lowerBound);\r\n    } else if (upperBound == Object.class) {\r\n        return \"?\";\r\n    } else {\r\n        return \"? extends \" + typeToString(upperBound);\r\n    }\r\n}","Signature":"public String toString()"},]}, {"longName":"com.google.gson.internal.bind.ArrayTypeAdapter",
"methods":[{"Body : ":"{\r\n    if (array == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginArray();\r\n    for (int i = 0, length = Array.getLength(array); i < length; i++) {\r\n        E value = (E) Array.get(array, i);\r\n        componentTypeAdapter.write(out, value);\r\n    }\r\n    out.endArray();\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic void write(JsonWriter out, Object array) throws IOException {\r\n    if (array == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginArray();\r\n    for (int i = 0, length = Array.getLength(array); i < length; i++) {\r\n        E value = (E) Array.get(array, i);\r\n        componentTypeAdapter.write(out, value);\r\n    }\r\n    out.endArray();\r\n}","Signature":"public void write(JsonWriter out, Object array) throws IOException"}, {"Body : ":"{\r\n    if (array == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginArray();\r\n    for (int i = 0, length = Array.getLength(array); i < length; i++) {\r\n        E value = (E) Array.get(array, i);\r\n        componentTypeAdapter.write(out, value);\r\n    }\r\n    out.endArray();\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic void write(JsonWriter out, Object array) throws IOException {\r\n    if (array == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginArray();\r\n    for (int i = 0, length = Array.getLength(array); i < length; i++) {\r\n        E value = (E) Array.get(array, i);\r\n        componentTypeAdapter.write(out, value);\r\n    }\r\n    out.endArray();\r\n}","Signature":"public void write(JsonWriter out, Object array) throws IOException"}, {"Body : ":"{\r\n    if (array == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginArray();\r\n    for (int i = 0, length = Array.getLength(array); i < length; i++) {\r\n        E value = (E) Array.get(array, i);\r\n        componentTypeAdapter.write(out, value);\r\n    }\r\n    out.endArray();\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic void write(JsonWriter out, Object array) throws IOException {\r\n    if (array == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginArray();\r\n    for (int i = 0, length = Array.getLength(array); i < length; i++) {\r\n        E value = (E) Array.get(array, i);\r\n        componentTypeAdapter.write(out, value);\r\n    }\r\n    out.endArray();\r\n}","Signature":"public void write(JsonWriter out, Object array) throws IOException"},]}, {"longName":"com.google.gson.internal.bind.CollectionTypeAdapterFactory",
"methods":[{"Body : ":"{\r\n    if (collection == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginArray();\r\n    for (E element : collection) {\r\n        elementTypeAdapter.write(out, element);\r\n    }\r\n    out.endArray();\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, Collection<E> collection) throws IOException {\r\n    if (collection == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginArray();\r\n    for (E element : collection) {\r\n        elementTypeAdapter.write(out, element);\r\n    }\r\n    out.endArray();\r\n}","Signature":"public void write(JsonWriter out, Collection<E> collection) throws IOException"}, {"Body : ":"{\r\n    if (collection == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginArray();\r\n    for (E element : collection) {\r\n        elementTypeAdapter.write(out, element);\r\n    }\r\n    out.endArray();\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, Collection<E> collection) throws IOException {\r\n    if (collection == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginArray();\r\n    for (E element : collection) {\r\n        elementTypeAdapter.write(out, element);\r\n    }\r\n    out.endArray();\r\n}","Signature":"public void write(JsonWriter out, Collection<E> collection) throws IOException"}, {"Body : ":"{\r\n    if (collection == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginArray();\r\n    for (E element : collection) {\r\n        elementTypeAdapter.write(out, element);\r\n    }\r\n    out.endArray();\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, Collection<E> collection) throws IOException {\r\n    if (collection == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginArray();\r\n    for (E element : collection) {\r\n        elementTypeAdapter.write(out, element);\r\n    }\r\n    out.endArray();\r\n}","Signature":"public void write(JsonWriter out, Collection<E> collection) throws IOException"},]}, {"longName":"com.google.gson.internal.bind.DateTypeAdapter",
"methods":[{"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    String dateFormatAsString = dateFormats.get(0).format(value);\r\n    out.value(dateFormatAsString);\r\n}","Comment":"","Method:":"@Override\r\npublic synchronized void write(JsonWriter out, Date value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    String dateFormatAsString = dateFormats.get(0).format(value);\r\n    out.value(dateFormatAsString);\r\n}","Signature":"public synchronized void write(JsonWriter out, Date value) throws IOException"}, {"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    String dateFormatAsString = dateFormats.get(0).format(value);\r\n    out.value(dateFormatAsString);\r\n}","Comment":"","Method:":"@Override\r\npublic synchronized void write(JsonWriter out, Date value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    String dateFormatAsString = dateFormats.get(0).format(value);\r\n    out.value(dateFormatAsString);\r\n}","Signature":"public synchronized void write(JsonWriter out, Date value) throws IOException"}, {"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    String dateFormatAsString = dateFormats.get(0).format(value);\r\n    out.value(dateFormatAsString);\r\n}","Comment":"","Method:":"@Override\r\npublic synchronized void write(JsonWriter out, Date value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    String dateFormatAsString = dateFormats.get(0).format(value);\r\n    out.value(dateFormatAsString);\r\n}","Signature":"public synchronized void write(JsonWriter out, Date value) throws IOException"}, {"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    String dateFormatAsString = dateFormats.get(0).format(value);\r\n    out.value(dateFormatAsString);\r\n}","Comment":"","Method:":"@Override\r\npublic synchronized void write(JsonWriter out, Date value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    String dateFormatAsString = dateFormats.get(0).format(value);\r\n    out.value(dateFormatAsString);\r\n}","Signature":"public synchronized void write(JsonWriter out, Date value) throws IOException"},]}, {"longName":"com.google.gson.internal.bind.DefaultDateTypeAdapter",
"methods":[{"Body : ":"{\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    DateFormat defaultFormat = dateFormats.get(0);\r\n    if (defaultFormat instanceof SimpleDateFormat) {\r\n        return SIMPLE_NAME + '(' + ((SimpleDateFormat) defaultFormat).toPattern() + ')';\r\n    } else {\r\n        return SIMPLE_NAME + '(' + defaultFormat.getClass().getSimpleName() + ')';\r\n    }\r\n}","Signature":"public String toString()"},]}, {"longName":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory",
"methods":[{"Body : ":"{\r\n    Object instance = constructorConstructor.get(TypeToken.get(annotation.value())).construct();\r\n    TypeAdapter<?> typeAdapter;\r\n    if (instance instanceof TypeAdapter) {\r\n        typeAdapter = (TypeAdapter<?>) instance;\r\n    } else if (instance instanceof TypeAdapterFactory) {\r\n        typeAdapter = ((TypeAdapterFactory) instance).create(gson, type);\r\n    } else if (instance instanceof JsonSerializer || instance instanceof JsonDeserializer) {\r\n        JsonSerializer<?> serializer = instance instanceof JsonSerializer ? (JsonSerializer) instance : null;\r\n        JsonDeserializer<?> deserializer = instance instanceof JsonDeserializer ? (JsonDeserializer) instance : null;\r\n        typeAdapter = new TreeTypeAdapter(serializer, deserializer, gson, type, null);\r\n    } else {\r\n        throw new IllegalArgumentException(\"Invalid attempt to bind an instance of \" + instance.getClass().getName() + \" as a @JsonAdapter for \" + type.toString() + \". @JsonAdapter value must be a TypeAdapter, TypeAdapterFactory,\" + \" JsonSerializer or JsonDeserializer.\");\r\n    }\r\n    if (typeAdapter != null && annotation.nullSafe()) {\r\n        typeAdapter = typeAdapter.nullSafe();\r\n    }\r\n    return typeAdapter;\r\n}","Comment":"","Method:":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\nTypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson, TypeToken<?> type, JsonAdapter annotation) {\r\n    Object instance = constructorConstructor.get(TypeToken.get(annotation.value())).construct();\r\n    TypeAdapter<?> typeAdapter;\r\n    if (instance instanceof TypeAdapter) {\r\n        typeAdapter = (TypeAdapter<?>) instance;\r\n    } else if (instance instanceof TypeAdapterFactory) {\r\n        typeAdapter = ((TypeAdapterFactory) instance).create(gson, type);\r\n    } else if (instance instanceof JsonSerializer || instance instanceof JsonDeserializer) {\r\n        JsonSerializer<?> serializer = instance instanceof JsonSerializer ? (JsonSerializer) instance : null;\r\n        JsonDeserializer<?> deserializer = instance instanceof JsonDeserializer ? (JsonDeserializer) instance : null;\r\n        typeAdapter = new TreeTypeAdapter(serializer, deserializer, gson, type, null);\r\n    } else {\r\n        throw new IllegalArgumentException(\"Invalid attempt to bind an instance of \" + instance.getClass().getName() + \" as a @JsonAdapter for \" + type.toString() + \". @JsonAdapter value must be a TypeAdapter, TypeAdapterFactory,\" + \" JsonSerializer or JsonDeserializer.\");\r\n    }\r\n    if (typeAdapter != null && annotation.nullSafe()) {\r\n        typeAdapter = typeAdapter.nullSafe();\r\n    }\r\n    return typeAdapter;\r\n}","Signature":" TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson, TypeToken<?> type, JsonAdapter annotation)"}, {"Body : ":"{\r\n    Object instance = constructorConstructor.get(TypeToken.get(annotation.value())).construct();\r\n    TypeAdapter<?> typeAdapter;\r\n    if (instance instanceof TypeAdapter) {\r\n        typeAdapter = (TypeAdapter<?>) instance;\r\n    } else if (instance instanceof TypeAdapterFactory) {\r\n        typeAdapter = ((TypeAdapterFactory) instance).create(gson, type);\r\n    } else if (instance instanceof JsonSerializer || instance instanceof JsonDeserializer) {\r\n        JsonSerializer<?> serializer = instance instanceof JsonSerializer ? (JsonSerializer) instance : null;\r\n        JsonDeserializer<?> deserializer = instance instanceof JsonDeserializer ? (JsonDeserializer) instance : null;\r\n        typeAdapter = new TreeTypeAdapter(serializer, deserializer, gson, type, null);\r\n    } else {\r\n        throw new IllegalArgumentException(\"Invalid attempt to bind an instance of \" + instance.getClass().getName() + \" as a @JsonAdapter for \" + type.toString() + \". @JsonAdapter value must be a TypeAdapter, TypeAdapterFactory,\" + \" JsonSerializer or JsonDeserializer.\");\r\n    }\r\n    if (typeAdapter != null && annotation.nullSafe()) {\r\n        typeAdapter = typeAdapter.nullSafe();\r\n    }\r\n    return typeAdapter;\r\n}","Comment":"","Method:":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\nTypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson, TypeToken<?> type, JsonAdapter annotation) {\r\n    Object instance = constructorConstructor.get(TypeToken.get(annotation.value())).construct();\r\n    TypeAdapter<?> typeAdapter;\r\n    if (instance instanceof TypeAdapter) {\r\n        typeAdapter = (TypeAdapter<?>) instance;\r\n    } else if (instance instanceof TypeAdapterFactory) {\r\n        typeAdapter = ((TypeAdapterFactory) instance).create(gson, type);\r\n    } else if (instance instanceof JsonSerializer || instance instanceof JsonDeserializer) {\r\n        JsonSerializer<?> serializer = instance instanceof JsonSerializer ? (JsonSerializer) instance : null;\r\n        JsonDeserializer<?> deserializer = instance instanceof JsonDeserializer ? (JsonDeserializer) instance : null;\r\n        typeAdapter = new TreeTypeAdapter(serializer, deserializer, gson, type, null);\r\n    } else {\r\n        throw new IllegalArgumentException(\"Invalid attempt to bind an instance of \" + instance.getClass().getName() + \" as a @JsonAdapter for \" + type.toString() + \". @JsonAdapter value must be a TypeAdapter, TypeAdapterFactory,\" + \" JsonSerializer or JsonDeserializer.\");\r\n    }\r\n    if (typeAdapter != null && annotation.nullSafe()) {\r\n        typeAdapter = typeAdapter.nullSafe();\r\n    }\r\n    return typeAdapter;\r\n}","Signature":" TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson, TypeToken<?> type, JsonAdapter annotation)"},]}, {"longName":"com.google.gson.internal.bind.JsonTreeReader",
"methods":[{"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"}, {"Body : ":"{\r\n    return \" at path \" + getPath();\r\n}","Comment":"","Method:":"private String locationString() {\r\n    return \" at path \" + getPath();\r\n}","Signature":"private String locationString()"},]}, {"longName":"com.google.gson.internal.bind.JsonTreeWriter",
"methods":[{"Body : ":"{\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Comment":"","Method:":"@Override\r\npublic void close() throws IOException {\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Signature":"public void close() throws IOException"}, {"Body : ":"{\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Comment":"","Method:":"@Override\r\npublic void close() throws IOException {\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Signature":"public void close() throws IOException"}, {"Body : ":"{\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Comment":"","Method:":"@Override\r\npublic void close() throws IOException {\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Signature":"public void close() throws IOException"}, {"Body : ":"{\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Comment":"","Method:":"@Override\r\npublic void close() throws IOException {\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Signature":"public void close() throws IOException"}, {"Body : ":"{\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Comment":"","Method:":"@Override\r\npublic void close() throws IOException {\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Signature":"public void close() throws IOException"}, {"Body : ":"{\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Comment":"","Method:":"@Override\r\npublic void close() throws IOException {\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Signature":"public void close() throws IOException"}, {"Body : ":"{\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Comment":"","Method:":"@Override\r\npublic void close() throws IOException {\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Signature":"public void close() throws IOException"}, {"Body : ":"{\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Comment":"","Method:":"@Override\r\npublic void close() throws IOException {\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Signature":"public void close() throws IOException"}, {"Body : ":"{\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Comment":"","Method:":"@Override\r\npublic void close() throws IOException {\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Signature":"public void close() throws IOException"}, {"Body : ":"{\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Comment":"","Method:":"@Override\r\npublic void close() throws IOException {\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Signature":"public void close() throws IOException"}, {"Body : ":"{\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Comment":"","Method:":"@Override\r\npublic void close() throws IOException {\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Signature":"public void close() throws IOException"}, {"Body : ":"{\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Comment":"","Method:":"@Override\r\npublic void close() throws IOException {\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Signature":"public void close() throws IOException"}, {"Body : ":"{\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Comment":"","Method:":"@Override\r\npublic void close() throws IOException {\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Signature":"public void close() throws IOException"}, {"Body : ":"{\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Comment":"","Method:":"@Override\r\npublic void close() throws IOException {\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Signature":"public void close() throws IOException"}, {"Body : ":"{\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Comment":"","Method:":"@Override\r\npublic void close() throws IOException {\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Signature":"public void close() throws IOException"}, {"Body : ":"{\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Comment":"","Method:":"@Override\r\npublic void close() throws IOException {\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Signature":"public void close() throws IOException"}, {"Body : ":"{\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Comment":"","Method:":"@Override\r\npublic void close() throws IOException {\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Signature":"public void close() throws IOException"}, {"Body : ":"{\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Comment":"","Method:":"@Override\r\npublic void close() throws IOException {\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Signature":"public void close() throws IOException"}, {"Body : ":"{\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Comment":"","Method:":"@Override\r\npublic void close() throws IOException {\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Signature":"public void close() throws IOException"}, {"Body : ":"{\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Comment":"","Method:":"@Override\r\npublic void close() throws IOException {\r\n    if (!stack.isEmpty()) {\r\n        throw new IOException(\"Incomplete document\");\r\n    }\r\n    stack.add(SENTINEL_CLOSED);\r\n}","Signature":"public void close() throws IOException"},]}, {"longName":"com.google.gson.internal.bind.MapTypeAdapterFactory",
"methods":[{"Body : ":"{\r\n    if (keyElement.isJsonPrimitive()) {\r\n        JsonPrimitive primitive = keyElement.getAsJsonPrimitive();\r\n        if (primitive.isNumber()) {\r\n            return String.valueOf(primitive.getAsNumber());\r\n        } else if (primitive.isBoolean()) {\r\n            return Boolean.toString(primitive.getAsBoolean());\r\n        } else if (primitive.isString()) {\r\n            return primitive.getAsString();\r\n        } else {\r\n            throw new AssertionError();\r\n        }\r\n    } else if (keyElement.isJsonNull()) {\r\n        return \"null\";\r\n    } else {\r\n        throw new AssertionError();\r\n    }\r\n}","Comment":"","Method:":"private String keyToString(JsonElement keyElement) {\r\n    if (keyElement.isJsonPrimitive()) {\r\n        JsonPrimitive primitive = keyElement.getAsJsonPrimitive();\r\n        if (primitive.isNumber()) {\r\n            return String.valueOf(primitive.getAsNumber());\r\n        } else if (primitive.isBoolean()) {\r\n            return Boolean.toString(primitive.getAsBoolean());\r\n        } else if (primitive.isString()) {\r\n            return primitive.getAsString();\r\n        } else {\r\n            throw new AssertionError();\r\n        }\r\n    } else if (keyElement.isJsonNull()) {\r\n        return \"null\";\r\n    } else {\r\n        throw new AssertionError();\r\n    }\r\n}","Signature":"private String keyToString(JsonElement keyElement)"}, {"Body : ":"{\r\n    if (keyElement.isJsonPrimitive()) {\r\n        JsonPrimitive primitive = keyElement.getAsJsonPrimitive();\r\n        if (primitive.isNumber()) {\r\n            return String.valueOf(primitive.getAsNumber());\r\n        } else if (primitive.isBoolean()) {\r\n            return Boolean.toString(primitive.getAsBoolean());\r\n        } else if (primitive.isString()) {\r\n            return primitive.getAsString();\r\n        } else {\r\n            throw new AssertionError();\r\n        }\r\n    } else if (keyElement.isJsonNull()) {\r\n        return \"null\";\r\n    } else {\r\n        throw new AssertionError();\r\n    }\r\n}","Comment":"","Method:":"private String keyToString(JsonElement keyElement) {\r\n    if (keyElement.isJsonPrimitive()) {\r\n        JsonPrimitive primitive = keyElement.getAsJsonPrimitive();\r\n        if (primitive.isNumber()) {\r\n            return String.valueOf(primitive.getAsNumber());\r\n        } else if (primitive.isBoolean()) {\r\n            return Boolean.toString(primitive.getAsBoolean());\r\n        } else if (primitive.isString()) {\r\n            return primitive.getAsString();\r\n        } else {\r\n            throw new AssertionError();\r\n        }\r\n    } else if (keyElement.isJsonNull()) {\r\n        return \"null\";\r\n    } else {\r\n        throw new AssertionError();\r\n    }\r\n}","Signature":"private String keyToString(JsonElement keyElement)"}, {"Body : ":"{\r\n    if (keyElement.isJsonPrimitive()) {\r\n        JsonPrimitive primitive = keyElement.getAsJsonPrimitive();\r\n        if (primitive.isNumber()) {\r\n            return String.valueOf(primitive.getAsNumber());\r\n        } else if (primitive.isBoolean()) {\r\n            return Boolean.toString(primitive.getAsBoolean());\r\n        } else if (primitive.isString()) {\r\n            return primitive.getAsString();\r\n        } else {\r\n            throw new AssertionError();\r\n        }\r\n    } else if (keyElement.isJsonNull()) {\r\n        return \"null\";\r\n    } else {\r\n        throw new AssertionError();\r\n    }\r\n}","Comment":"","Method:":"private String keyToString(JsonElement keyElement) {\r\n    if (keyElement.isJsonPrimitive()) {\r\n        JsonPrimitive primitive = keyElement.getAsJsonPrimitive();\r\n        if (primitive.isNumber()) {\r\n            return String.valueOf(primitive.getAsNumber());\r\n        } else if (primitive.isBoolean()) {\r\n            return Boolean.toString(primitive.getAsBoolean());\r\n        } else if (primitive.isString()) {\r\n            return primitive.getAsString();\r\n        } else {\r\n            throw new AssertionError();\r\n        }\r\n    } else if (keyElement.isJsonNull()) {\r\n        return \"null\";\r\n    } else {\r\n        throw new AssertionError();\r\n    }\r\n}","Signature":"private String keyToString(JsonElement keyElement)"}, {"Body : ":"{\r\n    if (keyElement.isJsonPrimitive()) {\r\n        JsonPrimitive primitive = keyElement.getAsJsonPrimitive();\r\n        if (primitive.isNumber()) {\r\n            return String.valueOf(primitive.getAsNumber());\r\n        } else if (primitive.isBoolean()) {\r\n            return Boolean.toString(primitive.getAsBoolean());\r\n        } else if (primitive.isString()) {\r\n            return primitive.getAsString();\r\n        } else {\r\n            throw new AssertionError();\r\n        }\r\n    } else if (keyElement.isJsonNull()) {\r\n        return \"null\";\r\n    } else {\r\n        throw new AssertionError();\r\n    }\r\n}","Comment":"","Method:":"private String keyToString(JsonElement keyElement) {\r\n    if (keyElement.isJsonPrimitive()) {\r\n        JsonPrimitive primitive = keyElement.getAsJsonPrimitive();\r\n        if (primitive.isNumber()) {\r\n            return String.valueOf(primitive.getAsNumber());\r\n        } else if (primitive.isBoolean()) {\r\n            return Boolean.toString(primitive.getAsBoolean());\r\n        } else if (primitive.isString()) {\r\n            return primitive.getAsString();\r\n        } else {\r\n            throw new AssertionError();\r\n        }\r\n    } else if (keyElement.isJsonNull()) {\r\n        return \"null\";\r\n    } else {\r\n        throw new AssertionError();\r\n    }\r\n}","Signature":"private String keyToString(JsonElement keyElement)"}, {"Body : ":"{\r\n    if (keyElement.isJsonPrimitive()) {\r\n        JsonPrimitive primitive = keyElement.getAsJsonPrimitive();\r\n        if (primitive.isNumber()) {\r\n            return String.valueOf(primitive.getAsNumber());\r\n        } else if (primitive.isBoolean()) {\r\n            return Boolean.toString(primitive.getAsBoolean());\r\n        } else if (primitive.isString()) {\r\n            return primitive.getAsString();\r\n        } else {\r\n            throw new AssertionError();\r\n        }\r\n    } else if (keyElement.isJsonNull()) {\r\n        return \"null\";\r\n    } else {\r\n        throw new AssertionError();\r\n    }\r\n}","Comment":"","Method:":"private String keyToString(JsonElement keyElement) {\r\n    if (keyElement.isJsonPrimitive()) {\r\n        JsonPrimitive primitive = keyElement.getAsJsonPrimitive();\r\n        if (primitive.isNumber()) {\r\n            return String.valueOf(primitive.getAsNumber());\r\n        } else if (primitive.isBoolean()) {\r\n            return Boolean.toString(primitive.getAsBoolean());\r\n        } else if (primitive.isString()) {\r\n            return primitive.getAsString();\r\n        } else {\r\n            throw new AssertionError();\r\n        }\r\n    } else if (keyElement.isJsonNull()) {\r\n        return \"null\";\r\n    } else {\r\n        throw new AssertionError();\r\n    }\r\n}","Signature":"private String keyToString(JsonElement keyElement)"},]}, {"longName":"com.google.gson.internal.bind.NumberTypeAdapter",
"methods":[{"Body : ":"{\r\n    out.value(value);\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, Number value) throws IOException {\r\n    out.value(value);\r\n}","Signature":"public void write(JsonWriter out, Number value) throws IOException"}, {"Body : ":"{\r\n    out.value(value);\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, Number value) throws IOException {\r\n    out.value(value);\r\n}","Signature":"public void write(JsonWriter out, Number value) throws IOException"}, {"Body : ":"{\r\n    out.value(value);\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, Number value) throws IOException {\r\n    out.value(value);\r\n}","Signature":"public void write(JsonWriter out, Number value) throws IOException"}, {"Body : ":"{\r\n    out.value(value);\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, Number value) throws IOException {\r\n    out.value(value);\r\n}","Signature":"public void write(JsonWriter out, Number value) throws IOException"}, {"Body : ":"{\r\n    out.value(value);\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, Number value) throws IOException {\r\n    out.value(value);\r\n}","Signature":"public void write(JsonWriter out, Number value) throws IOException"},]}, {"longName":"com.google.gson.internal.bind.ObjectTypeAdapter",
"methods":[{"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    TypeAdapter<Object> typeAdapter = (TypeAdapter<Object>) gson.getAdapter(value.getClass());\r\n    if (typeAdapter instanceof ObjectTypeAdapter) {\r\n        out.beginObject();\r\n        out.endObject();\r\n        return;\r\n    }\r\n    typeAdapter.write(out, value);\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic void write(JsonWriter out, Object value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    TypeAdapter<Object> typeAdapter = (TypeAdapter<Object>) gson.getAdapter(value.getClass());\r\n    if (typeAdapter instanceof ObjectTypeAdapter) {\r\n        out.beginObject();\r\n        out.endObject();\r\n        return;\r\n    }\r\n    typeAdapter.write(out, value);\r\n}","Signature":"public void write(JsonWriter out, Object value) throws IOException"}, {"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    TypeAdapter<Object> typeAdapter = (TypeAdapter<Object>) gson.getAdapter(value.getClass());\r\n    if (typeAdapter instanceof ObjectTypeAdapter) {\r\n        out.beginObject();\r\n        out.endObject();\r\n        return;\r\n    }\r\n    typeAdapter.write(out, value);\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic void write(JsonWriter out, Object value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    TypeAdapter<Object> typeAdapter = (TypeAdapter<Object>) gson.getAdapter(value.getClass());\r\n    if (typeAdapter instanceof ObjectTypeAdapter) {\r\n        out.beginObject();\r\n        out.endObject();\r\n        return;\r\n    }\r\n    typeAdapter.write(out, value);\r\n}","Signature":"public void write(JsonWriter out, Object value) throws IOException"}, {"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    TypeAdapter<Object> typeAdapter = (TypeAdapter<Object>) gson.getAdapter(value.getClass());\r\n    if (typeAdapter instanceof ObjectTypeAdapter) {\r\n        out.beginObject();\r\n        out.endObject();\r\n        return;\r\n    }\r\n    typeAdapter.write(out, value);\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic void write(JsonWriter out, Object value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    TypeAdapter<Object> typeAdapter = (TypeAdapter<Object>) gson.getAdapter(value.getClass());\r\n    if (typeAdapter instanceof ObjectTypeAdapter) {\r\n        out.beginObject();\r\n        out.endObject();\r\n        return;\r\n    }\r\n    typeAdapter.write(out, value);\r\n}","Signature":"public void write(JsonWriter out, Object value) throws IOException"}, {"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    TypeAdapter<Object> typeAdapter = (TypeAdapter<Object>) gson.getAdapter(value.getClass());\r\n    if (typeAdapter instanceof ObjectTypeAdapter) {\r\n        out.beginObject();\r\n        out.endObject();\r\n        return;\r\n    }\r\n    typeAdapter.write(out, value);\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic void write(JsonWriter out, Object value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    TypeAdapter<Object> typeAdapter = (TypeAdapter<Object>) gson.getAdapter(value.getClass());\r\n    if (typeAdapter instanceof ObjectTypeAdapter) {\r\n        out.beginObject();\r\n        out.endObject();\r\n        return;\r\n    }\r\n    typeAdapter.write(out, value);\r\n}","Signature":"public void write(JsonWriter out, Object value) throws IOException"}, {"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    TypeAdapter<Object> typeAdapter = (TypeAdapter<Object>) gson.getAdapter(value.getClass());\r\n    if (typeAdapter instanceof ObjectTypeAdapter) {\r\n        out.beginObject();\r\n        out.endObject();\r\n        return;\r\n    }\r\n    typeAdapter.write(out, value);\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic void write(JsonWriter out, Object value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    TypeAdapter<Object> typeAdapter = (TypeAdapter<Object>) gson.getAdapter(value.getClass());\r\n    if (typeAdapter instanceof ObjectTypeAdapter) {\r\n        out.beginObject();\r\n        out.endObject();\r\n        return;\r\n    }\r\n    typeAdapter.write(out, value);\r\n}","Signature":"public void write(JsonWriter out, Object value) throws IOException"},]}, {"longName":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory",
"methods":[{"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, T value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Signature":"public void write(JsonWriter out, T value) throws IOException"}, {"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, T value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Signature":"public void write(JsonWriter out, T value) throws IOException"}, {"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, T value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Signature":"public void write(JsonWriter out, T value) throws IOException"}, {"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, T value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Signature":"public void write(JsonWriter out, T value) throws IOException"}, {"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, T value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Signature":"public void write(JsonWriter out, T value) throws IOException"}, {"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, T value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Signature":"public void write(JsonWriter out, T value) throws IOException"}, {"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, T value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Signature":"public void write(JsonWriter out, T value) throws IOException"}, {"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, T value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Signature":"public void write(JsonWriter out, T value) throws IOException"}, {"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, T value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Signature":"public void write(JsonWriter out, T value) throws IOException"}, {"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, T value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Signature":"public void write(JsonWriter out, T value) throws IOException"}, {"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, T value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Signature":"public void write(JsonWriter out, T value) throws IOException"}, {"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, T value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Signature":"public void write(JsonWriter out, T value) throws IOException"}, {"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, T value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Signature":"public void write(JsonWriter out, T value) throws IOException"}, {"Body : ":"{\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, T value) throws IOException {\r\n    if (value == null) {\r\n        out.nullValue();\r\n        return;\r\n    }\r\n    out.beginObject();\r\n    try {\r\n        for (BoundField boundField : boundFields.values()) {\r\n            if (boundField.writeField(value)) {\r\n                out.name(boundField.name);\r\n                boundField.write(out, value);\r\n            }\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n    out.endObject();\r\n}","Signature":"public void write(JsonWriter out, T value) throws IOException"},]}, {"longName":"com.google.gson.internal.bind.TreeTypeAdapter",
"methods":[{"Body : ":"{\r\n    return (R) gson.fromJson(json, typeOfT);\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic <R> R deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\r\n    return (R) gson.fromJson(json, typeOfT);\r\n}","Signature":"public R deserialize(JsonElement json, Type typeOfT) throws JsonParseException"}, {"Body : ":"{\r\n    return (R) gson.fromJson(json, typeOfT);\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic <R> R deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\r\n    return (R) gson.fromJson(json, typeOfT);\r\n}","Signature":"public R deserialize(JsonElement json, Type typeOfT) throws JsonParseException"}, {"Body : ":"{\r\n    return (R) gson.fromJson(json, typeOfT);\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic <R> R deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\r\n    return (R) gson.fromJson(json, typeOfT);\r\n}","Signature":"public R deserialize(JsonElement json, Type typeOfT) throws JsonParseException"}, {"Body : ":"{\r\n    return (R) gson.fromJson(json, typeOfT);\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic <R> R deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\r\n    return (R) gson.fromJson(json, typeOfT);\r\n}","Signature":"public R deserialize(JsonElement json, Type typeOfT) throws JsonParseException"}, {"Body : ":"{\r\n    return (R) gson.fromJson(json, typeOfT);\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic <R> R deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\r\n    return (R) gson.fromJson(json, typeOfT);\r\n}","Signature":"public R deserialize(JsonElement json, Type typeOfT) throws JsonParseException"}, {"Body : ":"{\r\n    return (R) gson.fromJson(json, typeOfT);\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic <R> R deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\r\n    return (R) gson.fromJson(json, typeOfT);\r\n}","Signature":"public R deserialize(JsonElement json, Type typeOfT) throws JsonParseException"}, {"Body : ":"{\r\n    return (R) gson.fromJson(json, typeOfT);\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic <R> R deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\r\n    return (R) gson.fromJson(json, typeOfT);\r\n}","Signature":"public R deserialize(JsonElement json, Type typeOfT) throws JsonParseException"}, {"Body : ":"{\r\n    return (R) gson.fromJson(json, typeOfT);\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic <R> R deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\r\n    return (R) gson.fromJson(json, typeOfT);\r\n}","Signature":"public R deserialize(JsonElement json, Type typeOfT) throws JsonParseException"}, {"Body : ":"{\r\n    return (R) gson.fromJson(json, typeOfT);\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic <R> R deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\r\n    return (R) gson.fromJson(json, typeOfT);\r\n}","Signature":"public R deserialize(JsonElement json, Type typeOfT) throws JsonParseException"}, {"Body : ":"{\r\n    return (R) gson.fromJson(json, typeOfT);\r\n}","Comment":"","Method:":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic <R> R deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\r\n    return (R) gson.fromJson(json, typeOfT);\r\n}","Signature":"public R deserialize(JsonElement json, Type typeOfT) throws JsonParseException"},]}, {"longName":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper",
"methods":[{"Body : ":"{\r\n    if (value != null && (type == Object.class || type instanceof TypeVariable<?> || type instanceof Class<?>)) {\r\n        type = value.getClass();\r\n    }\r\n    return type;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Finds a compatible runtime type if it is more specific'}]}, blockTags=[]}","Method:":"private Type getRuntimeTypeIfMoreSpecific(Type type, Object value) {\r\n    if (value != null && (type == Object.class || type instanceof TypeVariable<?> || type instanceof Class<?>)) {\r\n        type = value.getClass();\r\n    }\r\n    return type;\r\n}","Signature":"private Type getRuntimeTypeIfMoreSpecific(Type type, Object value)"}, {"Body : ":"{\r\n    if (value != null && (type == Object.class || type instanceof TypeVariable<?> || type instanceof Class<?>)) {\r\n        type = value.getClass();\r\n    }\r\n    return type;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Finds a compatible runtime type if it is more specific'}]}, blockTags=[]}","Method:":"private Type getRuntimeTypeIfMoreSpecific(Type type, Object value) {\r\n    if (value != null && (type == Object.class || type instanceof TypeVariable<?> || type instanceof Class<?>)) {\r\n        type = value.getClass();\r\n    }\r\n    return type;\r\n}","Signature":"private Type getRuntimeTypeIfMoreSpecific(Type type, Object value)"}, {"Body : ":"{\r\n    if (value != null && (type == Object.class || type instanceof TypeVariable<?> || type instanceof Class<?>)) {\r\n        type = value.getClass();\r\n    }\r\n    return type;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Finds a compatible runtime type if it is more specific'}]}, blockTags=[]}","Method:":"private Type getRuntimeTypeIfMoreSpecific(Type type, Object value) {\r\n    if (value != null && (type == Object.class || type instanceof TypeVariable<?> || type instanceof Class<?>)) {\r\n        type = value.getClass();\r\n    }\r\n    return type;\r\n}","Signature":"private Type getRuntimeTypeIfMoreSpecific(Type type, Object value)"},]}, {"longName":"com.google.gson.internal.bind.TypeAdapters",
"methods":[{"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\r\n}","Signature":"public String toString()"},]}, {"longName":"com.google.gson.internal.bind.util.ISO8601Utils",
"methods":[{"Body : ":"{\r\n    for (int i = offset; i < string.length(); i++) {\r\n        char c = string.charAt(i);\r\n        if (c < '0' || c > '9')\r\n            return i;\r\n    }\r\n    return string.length();\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns the index of the first character in the string that is not a digit, starting at offset.'}]}, blockTags=[]}","Method:":"private static int indexOfNonDigit(String string, int offset) {\r\n    for (int i = offset; i < string.length(); i++) {\r\n        char c = string.charAt(i);\r\n        if (c < '0' || c > '9')\r\n            return i;\r\n    }\r\n    return string.length();\r\n}","Signature":"private static int indexOfNonDigit(String string, int offset)"}, {"Body : ":"{\r\n    for (int i = offset; i < string.length(); i++) {\r\n        char c = string.charAt(i);\r\n        if (c < '0' || c > '9')\r\n            return i;\r\n    }\r\n    return string.length();\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns the index of the first character in the string that is not a digit, starting at offset.'}]}, blockTags=[]}","Method:":"private static int indexOfNonDigit(String string, int offset) {\r\n    for (int i = offset; i < string.length(); i++) {\r\n        char c = string.charAt(i);\r\n        if (c < '0' || c > '9')\r\n            return i;\r\n    }\r\n    return string.length();\r\n}","Signature":"private static int indexOfNonDigit(String string, int offset)"}, {"Body : ":"{\r\n    for (int i = offset; i < string.length(); i++) {\r\n        char c = string.charAt(i);\r\n        if (c < '0' || c > '9')\r\n            return i;\r\n    }\r\n    return string.length();\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns the index of the first character in the string that is not a digit, starting at offset.'}]}, blockTags=[]}","Method:":"private static int indexOfNonDigit(String string, int offset) {\r\n    for (int i = offset; i < string.length(); i++) {\r\n        char c = string.charAt(i);\r\n        if (c < '0' || c > '9')\r\n            return i;\r\n    }\r\n    return string.length();\r\n}","Signature":"private static int indexOfNonDigit(String string, int offset)"}, {"Body : ":"{\r\n    for (int i = offset; i < string.length(); i++) {\r\n        char c = string.charAt(i);\r\n        if (c < '0' || c > '9')\r\n            return i;\r\n    }\r\n    return string.length();\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns the index of the first character in the string that is not a digit, starting at offset.'}]}, blockTags=[]}","Method:":"private static int indexOfNonDigit(String string, int offset) {\r\n    for (int i = offset; i < string.length(); i++) {\r\n        char c = string.charAt(i);\r\n        if (c < '0' || c > '9')\r\n            return i;\r\n    }\r\n    return string.length();\r\n}","Signature":"private static int indexOfNonDigit(String string, int offset)"}, {"Body : ":"{\r\n    for (int i = offset; i < string.length(); i++) {\r\n        char c = string.charAt(i);\r\n        if (c < '0' || c > '9')\r\n            return i;\r\n    }\r\n    return string.length();\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns the index of the first character in the string that is not a digit, starting at offset.'}]}, blockTags=[]}","Method:":"private static int indexOfNonDigit(String string, int offset) {\r\n    for (int i = offset; i < string.length(); i++) {\r\n        char c = string.charAt(i);\r\n        if (c < '0' || c > '9')\r\n            return i;\r\n    }\r\n    return string.length();\r\n}","Signature":"private static int indexOfNonDigit(String string, int offset)"}, {"Body : ":"{\r\n    for (int i = offset; i < string.length(); i++) {\r\n        char c = string.charAt(i);\r\n        if (c < '0' || c > '9')\r\n            return i;\r\n    }\r\n    return string.length();\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns the index of the first character in the string that is not a digit, starting at offset.'}]}, blockTags=[]}","Method:":"private static int indexOfNonDigit(String string, int offset) {\r\n    for (int i = offset; i < string.length(); i++) {\r\n        char c = string.charAt(i);\r\n        if (c < '0' || c > '9')\r\n            return i;\r\n    }\r\n    return string.length();\r\n}","Signature":"private static int indexOfNonDigit(String string, int offset)"}, {"Body : ":"{\r\n    for (int i = offset; i < string.length(); i++) {\r\n        char c = string.charAt(i);\r\n        if (c < '0' || c > '9')\r\n            return i;\r\n    }\r\n    return string.length();\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns the index of the first character in the string that is not a digit, starting at offset.'}]}, blockTags=[]}","Method:":"private static int indexOfNonDigit(String string, int offset) {\r\n    for (int i = offset; i < string.length(); i++) {\r\n        char c = string.charAt(i);\r\n        if (c < '0' || c > '9')\r\n            return i;\r\n    }\r\n    return string.length();\r\n}","Signature":"private static int indexOfNonDigit(String string, int offset)"}, {"Body : ":"{\r\n    for (int i = offset; i < string.length(); i++) {\r\n        char c = string.charAt(i);\r\n        if (c < '0' || c > '9')\r\n            return i;\r\n    }\r\n    return string.length();\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns the index of the first character in the string that is not a digit, starting at offset.'}]}, blockTags=[]}","Method:":"private static int indexOfNonDigit(String string, int offset) {\r\n    for (int i = offset; i < string.length(); i++) {\r\n        char c = string.charAt(i);\r\n        if (c < '0' || c > '9')\r\n            return i;\r\n    }\r\n    return string.length();\r\n}","Signature":"private static int indexOfNonDigit(String string, int offset)"},]}, {"longName":"com.google.gson.internal.ConstructorConstructor",
"methods":[{"Body : ":"{\r\n    return instanceCreators.toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return instanceCreators.toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return instanceCreators.toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return instanceCreators.toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return instanceCreators.toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return instanceCreators.toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return instanceCreators.toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return instanceCreators.toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return instanceCreators.toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return instanceCreators.toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return instanceCreators.toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return instanceCreators.toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return instanceCreators.toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return instanceCreators.toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return instanceCreators.toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return instanceCreators.toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return instanceCreators.toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return instanceCreators.toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return instanceCreators.toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return instanceCreators.toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return instanceCreators.toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return instanceCreators.toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return instanceCreators.toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return instanceCreators.toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return instanceCreators.toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return instanceCreators.toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return instanceCreators.toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return instanceCreators.toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return instanceCreators.toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return instanceCreators.toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return instanceCreators.toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return instanceCreators.toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return instanceCreators.toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return instanceCreators.toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return instanceCreators.toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return instanceCreators.toString();\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return instanceCreators.toString();\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return instanceCreators.toString();\r\n}","Signature":"public String toString()"},]}, {"longName":"com.google.gson.internal.Excluder",
"methods":[{"Body : ":"{\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"private boolean isValidUntil(Until annotation) {\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Signature":"private boolean isValidUntil(Until annotation)"}, {"Body : ":"{\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"private boolean isValidUntil(Until annotation) {\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Signature":"private boolean isValidUntil(Until annotation)"}, {"Body : ":"{\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"private boolean isValidUntil(Until annotation) {\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Signature":"private boolean isValidUntil(Until annotation)"}, {"Body : ":"{\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"private boolean isValidUntil(Until annotation) {\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Signature":"private boolean isValidUntil(Until annotation)"}, {"Body : ":"{\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"private boolean isValidUntil(Until annotation) {\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Signature":"private boolean isValidUntil(Until annotation)"}, {"Body : ":"{\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"private boolean isValidUntil(Until annotation) {\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Signature":"private boolean isValidUntil(Until annotation)"}, {"Body : ":"{\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"private boolean isValidUntil(Until annotation) {\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Signature":"private boolean isValidUntil(Until annotation)"}, {"Body : ":"{\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"private boolean isValidUntil(Until annotation) {\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Signature":"private boolean isValidUntil(Until annotation)"}, {"Body : ":"{\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"private boolean isValidUntil(Until annotation) {\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Signature":"private boolean isValidUntil(Until annotation)"}, {"Body : ":"{\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"private boolean isValidUntil(Until annotation) {\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Signature":"private boolean isValidUntil(Until annotation)"}, {"Body : ":"{\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"private boolean isValidUntil(Until annotation) {\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Signature":"private boolean isValidUntil(Until annotation)"}, {"Body : ":"{\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"private boolean isValidUntil(Until annotation) {\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Signature":"private boolean isValidUntil(Until annotation)"}, {"Body : ":"{\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"private boolean isValidUntil(Until annotation) {\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Signature":"private boolean isValidUntil(Until annotation)"}, {"Body : ":"{\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"private boolean isValidUntil(Until annotation) {\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Signature":"private boolean isValidUntil(Until annotation)"}, {"Body : ":"{\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"private boolean isValidUntil(Until annotation) {\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Signature":"private boolean isValidUntil(Until annotation)"}, {"Body : ":"{\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"private boolean isValidUntil(Until annotation) {\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Signature":"private boolean isValidUntil(Until annotation)"}, {"Body : ":"{\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"private boolean isValidUntil(Until annotation) {\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Signature":"private boolean isValidUntil(Until annotation)"}, {"Body : ":"{\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"private boolean isValidUntil(Until annotation) {\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Signature":"private boolean isValidUntil(Until annotation)"}, {"Body : ":"{\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"private boolean isValidUntil(Until annotation) {\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Signature":"private boolean isValidUntil(Until annotation)"}, {"Body : ":"{\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Comment":"","Method:":"private boolean isValidUntil(Until annotation) {\r\n    if (annotation != null) {\r\n        double annotationVersion = annotation.value();\r\n        if (annotationVersion <= version) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","Signature":"private boolean isValidUntil(Until annotation)"},]}, {"longName":"com.google.gson.internal.JavaVersion",
"methods":[{"Body : ":"{\r\n    return majorJavaVersion >= 9;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocInlineTag{tagName='code', type=CODE, content=' true'}, JavadocSnippet{text=' if the application is running on Java 9 or later; and '}, JavadocInlineTag{tagName='code', type=CODE, content=' false'}, JavadocSnippet{text=' otherwise.'}]}', name=Optional.empty}]}","Method:":"public static boolean isJava9OrLater() {\r\n    return majorJavaVersion >= 9;\r\n}","Signature":"public static boolean isJava9OrLater()"}, {"Body : ":"{\r\n    return majorJavaVersion >= 9;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocInlineTag{tagName='code', type=CODE, content=' true'}, JavadocSnippet{text=' if the application is running on Java 9 or later; and '}, JavadocInlineTag{tagName='code', type=CODE, content=' false'}, JavadocSnippet{text=' otherwise.'}]}', name=Optional.empty}]}","Method:":"public static boolean isJava9OrLater() {\r\n    return majorJavaVersion >= 9;\r\n}","Signature":"public static boolean isJava9OrLater()"}, {"Body : ":"{\r\n    return majorJavaVersion >= 9;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocInlineTag{tagName='code', type=CODE, content=' true'}, JavadocSnippet{text=' if the application is running on Java 9 or later; and '}, JavadocInlineTag{tagName='code', type=CODE, content=' false'}, JavadocSnippet{text=' otherwise.'}]}', name=Optional.empty}]}","Method:":"public static boolean isJava9OrLater() {\r\n    return majorJavaVersion >= 9;\r\n}","Signature":"public static boolean isJava9OrLater()"}, {"Body : ":"{\r\n    return majorJavaVersion >= 9;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocInlineTag{tagName='code', type=CODE, content=' true'}, JavadocSnippet{text=' if the application is running on Java 9 or later; and '}, JavadocInlineTag{tagName='code', type=CODE, content=' false'}, JavadocSnippet{text=' otherwise.'}]}', name=Optional.empty}]}","Method:":"public static boolean isJava9OrLater() {\r\n    return majorJavaVersion >= 9;\r\n}","Signature":"public static boolean isJava9OrLater()"}, {"Body : ":"{\r\n    return majorJavaVersion >= 9;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocInlineTag{tagName='code', type=CODE, content=' true'}, JavadocSnippet{text=' if the application is running on Java 9 or later; and '}, JavadocInlineTag{tagName='code', type=CODE, content=' false'}, JavadocSnippet{text=' otherwise.'}]}', name=Optional.empty}]}","Method:":"public static boolean isJava9OrLater() {\r\n    return majorJavaVersion >= 9;\r\n}","Signature":"public static boolean isJava9OrLater()"}, {"Body : ":"{\r\n    return majorJavaVersion >= 9;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[]}, blockTags=[JavadocBlockTag{type=RETURN, content='JavadocDescription{elements=[JavadocInlineTag{tagName='code', type=CODE, content=' true'}, JavadocSnippet{text=' if the application is running on Java 9 or later; and '}, JavadocInlineTag{tagName='code', type=CODE, content=' false'}, JavadocSnippet{text=' otherwise.'}]}', name=Optional.empty}]}","Method:":"public static boolean isJava9OrLater() {\r\n    return majorJavaVersion >= 9;\r\n}","Signature":"public static boolean isJava9OrLater()"},]}, {"longName":"com.google.gson.internal.JsonReaderInternalAccess",
"methods":[{"Body : ":"","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Changes the type of the current property name token to a string value.'}]}, blockTags=[]}","Method:":"public abstract void promoteNameToValue(JsonReader reader) throws IOException;","Signature":"public abstract void promoteNameToValue(JsonReader reader) throws IOException"},]}, {"longName":"com.google.gson.internal.LazilyParsedNumber",
"methods":[{"Body : ":"{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj instanceof LazilyParsedNumber) {\r\n        LazilyParsedNumber other = (LazilyParsedNumber) obj;\r\n        return value == other.value || value.equals(other.value);\r\n    }\r\n    return false;\r\n}","Comment":"","Method:":"@Override\r\npublic boolean equals(Object obj) {\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj instanceof LazilyParsedNumber) {\r\n        LazilyParsedNumber other = (LazilyParsedNumber) obj;\r\n        return value == other.value || value.equals(other.value);\r\n    }\r\n    return false;\r\n}","Signature":"public boolean equals(Object obj)"}, {"Body : ":"{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj instanceof LazilyParsedNumber) {\r\n        LazilyParsedNumber other = (LazilyParsedNumber) obj;\r\n        return value == other.value || value.equals(other.value);\r\n    }\r\n    return false;\r\n}","Comment":"","Method:":"@Override\r\npublic boolean equals(Object obj) {\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj instanceof LazilyParsedNumber) {\r\n        LazilyParsedNumber other = (LazilyParsedNumber) obj;\r\n        return value == other.value || value.equals(other.value);\r\n    }\r\n    return false;\r\n}","Signature":"public boolean equals(Object obj)"}, {"Body : ":"{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj instanceof LazilyParsedNumber) {\r\n        LazilyParsedNumber other = (LazilyParsedNumber) obj;\r\n        return value == other.value || value.equals(other.value);\r\n    }\r\n    return false;\r\n}","Comment":"","Method:":"@Override\r\npublic boolean equals(Object obj) {\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj instanceof LazilyParsedNumber) {\r\n        LazilyParsedNumber other = (LazilyParsedNumber) obj;\r\n        return value == other.value || value.equals(other.value);\r\n    }\r\n    return false;\r\n}","Signature":"public boolean equals(Object obj)"}, {"Body : ":"{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj instanceof LazilyParsedNumber) {\r\n        LazilyParsedNumber other = (LazilyParsedNumber) obj;\r\n        return value == other.value || value.equals(other.value);\r\n    }\r\n    return false;\r\n}","Comment":"","Method:":"@Override\r\npublic boolean equals(Object obj) {\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj instanceof LazilyParsedNumber) {\r\n        LazilyParsedNumber other = (LazilyParsedNumber) obj;\r\n        return value == other.value || value.equals(other.value);\r\n    }\r\n    return false;\r\n}","Signature":"public boolean equals(Object obj)"}, {"Body : ":"{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj instanceof LazilyParsedNumber) {\r\n        LazilyParsedNumber other = (LazilyParsedNumber) obj;\r\n        return value == other.value || value.equals(other.value);\r\n    }\r\n    return false;\r\n}","Comment":"","Method:":"@Override\r\npublic boolean equals(Object obj) {\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj instanceof LazilyParsedNumber) {\r\n        LazilyParsedNumber other = (LazilyParsedNumber) obj;\r\n        return value == other.value || value.equals(other.value);\r\n    }\r\n    return false;\r\n}","Signature":"public boolean equals(Object obj)"}, {"Body : ":"{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj instanceof LazilyParsedNumber) {\r\n        LazilyParsedNumber other = (LazilyParsedNumber) obj;\r\n        return value == other.value || value.equals(other.value);\r\n    }\r\n    return false;\r\n}","Comment":"","Method:":"@Override\r\npublic boolean equals(Object obj) {\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj instanceof LazilyParsedNumber) {\r\n        LazilyParsedNumber other = (LazilyParsedNumber) obj;\r\n        return value == other.value || value.equals(other.value);\r\n    }\r\n    return false;\r\n}","Signature":"public boolean equals(Object obj)"}, {"Body : ":"{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj instanceof LazilyParsedNumber) {\r\n        LazilyParsedNumber other = (LazilyParsedNumber) obj;\r\n        return value == other.value || value.equals(other.value);\r\n    }\r\n    return false;\r\n}","Comment":"","Method:":"@Override\r\npublic boolean equals(Object obj) {\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj instanceof LazilyParsedNumber) {\r\n        LazilyParsedNumber other = (LazilyParsedNumber) obj;\r\n        return value == other.value || value.equals(other.value);\r\n    }\r\n    return false;\r\n}","Signature":"public boolean equals(Object obj)"}, {"Body : ":"{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj instanceof LazilyParsedNumber) {\r\n        LazilyParsedNumber other = (LazilyParsedNumber) obj;\r\n        return value == other.value || value.equals(other.value);\r\n    }\r\n    return false;\r\n}","Comment":"","Method:":"@Override\r\npublic boolean equals(Object obj) {\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj instanceof LazilyParsedNumber) {\r\n        LazilyParsedNumber other = (LazilyParsedNumber) obj;\r\n        return value == other.value || value.equals(other.value);\r\n    }\r\n    return false;\r\n}","Signature":"public boolean equals(Object obj)"}, {"Body : ":"{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj instanceof LazilyParsedNumber) {\r\n        LazilyParsedNumber other = (LazilyParsedNumber) obj;\r\n        return value == other.value || value.equals(other.value);\r\n    }\r\n    return false;\r\n}","Comment":"","Method:":"@Override\r\npublic boolean equals(Object obj) {\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj instanceof LazilyParsedNumber) {\r\n        LazilyParsedNumber other = (LazilyParsedNumber) obj;\r\n        return value == other.value || value.equals(other.value);\r\n    }\r\n    return false;\r\n}","Signature":"public boolean equals(Object obj)"},]}, {"longName":"com.google.gson.internal.LinkedHashTreeMap",
"methods":[{"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"},]}, {"longName":"com.google.gson.internal.LinkedTreeMap",
"methods":[{"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"}, {"Body : ":"{\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Comment":"","Method:":"private void readObject(ObjectInputStream in) throws IOException {\r\n    throw new InvalidObjectException(\"Deserialization is unsupported\");\r\n}","Signature":"private void readObject(ObjectInputStream in) throws IOException"},]}, {"longName":"com.google.gson.internal.PreJava9DateFormatProvider",
"methods":[{"Body : ":"{\r\n    switch(timeStyle) {\r\n        case DateFormat.SHORT:\r\n            return \"h:mm a\";\r\n        case DateFormat.MEDIUM:\r\n            return \"h:mm:ss a\";\r\n        case DateFormat.FULL:\r\n        case DateFormat.LONG:\r\n            return \"h:mm:ss a z\";\r\n        default:\r\n            throw new IllegalArgumentException(\"Unknown DateFormat style: \" + timeStyle);\r\n    }\r\n}","Comment":"","Method:":"private static String getTimePartOfDateTimePattern(int timeStyle) {\r\n    switch(timeStyle) {\r\n        case DateFormat.SHORT:\r\n            return \"h:mm a\";\r\n        case DateFormat.MEDIUM:\r\n            return \"h:mm:ss a\";\r\n        case DateFormat.FULL:\r\n        case DateFormat.LONG:\r\n            return \"h:mm:ss a z\";\r\n        default:\r\n            throw new IllegalArgumentException(\"Unknown DateFormat style: \" + timeStyle);\r\n    }\r\n}","Signature":"private static String getTimePartOfDateTimePattern(int timeStyle)"}, {"Body : ":"{\r\n    switch(timeStyle) {\r\n        case DateFormat.SHORT:\r\n            return \"h:mm a\";\r\n        case DateFormat.MEDIUM:\r\n            return \"h:mm:ss a\";\r\n        case DateFormat.FULL:\r\n        case DateFormat.LONG:\r\n            return \"h:mm:ss a z\";\r\n        default:\r\n            throw new IllegalArgumentException(\"Unknown DateFormat style: \" + timeStyle);\r\n    }\r\n}","Comment":"","Method:":"private static String getTimePartOfDateTimePattern(int timeStyle) {\r\n    switch(timeStyle) {\r\n        case DateFormat.SHORT:\r\n            return \"h:mm a\";\r\n        case DateFormat.MEDIUM:\r\n            return \"h:mm:ss a\";\r\n        case DateFormat.FULL:\r\n        case DateFormat.LONG:\r\n            return \"h:mm:ss a z\";\r\n        default:\r\n            throw new IllegalArgumentException(\"Unknown DateFormat style: \" + timeStyle);\r\n    }\r\n}","Signature":"private static String getTimePartOfDateTimePattern(int timeStyle)"}, {"Body : ":"{\r\n    switch(timeStyle) {\r\n        case DateFormat.SHORT:\r\n            return \"h:mm a\";\r\n        case DateFormat.MEDIUM:\r\n            return \"h:mm:ss a\";\r\n        case DateFormat.FULL:\r\n        case DateFormat.LONG:\r\n            return \"h:mm:ss a z\";\r\n        default:\r\n            throw new IllegalArgumentException(\"Unknown DateFormat style: \" + timeStyle);\r\n    }\r\n}","Comment":"","Method:":"private static String getTimePartOfDateTimePattern(int timeStyle) {\r\n    switch(timeStyle) {\r\n        case DateFormat.SHORT:\r\n            return \"h:mm a\";\r\n        case DateFormat.MEDIUM:\r\n            return \"h:mm:ss a\";\r\n        case DateFormat.FULL:\r\n        case DateFormat.LONG:\r\n            return \"h:mm:ss a z\";\r\n        default:\r\n            throw new IllegalArgumentException(\"Unknown DateFormat style: \" + timeStyle);\r\n    }\r\n}","Signature":"private static String getTimePartOfDateTimePattern(int timeStyle)"}, {"Body : ":"{\r\n    switch(timeStyle) {\r\n        case DateFormat.SHORT:\r\n            return \"h:mm a\";\r\n        case DateFormat.MEDIUM:\r\n            return \"h:mm:ss a\";\r\n        case DateFormat.FULL:\r\n        case DateFormat.LONG:\r\n            return \"h:mm:ss a z\";\r\n        default:\r\n            throw new IllegalArgumentException(\"Unknown DateFormat style: \" + timeStyle);\r\n    }\r\n}","Comment":"","Method:":"private static String getTimePartOfDateTimePattern(int timeStyle) {\r\n    switch(timeStyle) {\r\n        case DateFormat.SHORT:\r\n            return \"h:mm a\";\r\n        case DateFormat.MEDIUM:\r\n            return \"h:mm:ss a\";\r\n        case DateFormat.FULL:\r\n        case DateFormat.LONG:\r\n            return \"h:mm:ss a z\";\r\n        default:\r\n            throw new IllegalArgumentException(\"Unknown DateFormat style: \" + timeStyle);\r\n    }\r\n}","Signature":"private static String getTimePartOfDateTimePattern(int timeStyle)"}, {"Body : ":"{\r\n    switch(timeStyle) {\r\n        case DateFormat.SHORT:\r\n            return \"h:mm a\";\r\n        case DateFormat.MEDIUM:\r\n            return \"h:mm:ss a\";\r\n        case DateFormat.FULL:\r\n        case DateFormat.LONG:\r\n            return \"h:mm:ss a z\";\r\n        default:\r\n            throw new IllegalArgumentException(\"Unknown DateFormat style: \" + timeStyle);\r\n    }\r\n}","Comment":"","Method:":"private static String getTimePartOfDateTimePattern(int timeStyle) {\r\n    switch(timeStyle) {\r\n        case DateFormat.SHORT:\r\n            return \"h:mm a\";\r\n        case DateFormat.MEDIUM:\r\n            return \"h:mm:ss a\";\r\n        case DateFormat.FULL:\r\n        case DateFormat.LONG:\r\n            return \"h:mm:ss a z\";\r\n        default:\r\n            throw new IllegalArgumentException(\"Unknown DateFormat style: \" + timeStyle);\r\n    }\r\n}","Signature":"private static String getTimePartOfDateTimePattern(int timeStyle)"},]}, {"longName":"com.google.gson.internal.Primitives",
"methods":[{"Body : ":"{\r\n    if (type == Integer.class)\r\n        return (Class<T>) int.class;\r\n    if (type == Float.class)\r\n        return (Class<T>) float.class;\r\n    if (type == Byte.class)\r\n        return (Class<T>) byte.class;\r\n    if (type == Double.class)\r\n        return (Class<T>) double.class;\r\n    if (type == Long.class)\r\n        return (Class<T>) long.class;\r\n    if (type == Character.class)\r\n        return (Class<T>) char.class;\r\n    if (type == Boolean.class)\r\n        return (Class<T>) boolean.class;\r\n    if (type == Short.class)\r\n        return (Class<T>) short.class;\r\n    if (type == Void.class)\r\n        return (Class<T>) void.class;\r\n    return type;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns the corresponding primitive type of '}, JavadocInlineTag{tagName='code', type=CODE, content=' type'}, JavadocSnippet{text=' if it is a\r\nwrapper type; otherwise returns '}, JavadocInlineTag{tagName='code', type=CODE, content=' type'}, JavadocSnippet{text=' itself. Idempotent.\r\n<pre>\r\n    unwrap(Integer.class) == int.class\r\n    unwrap(int.class) == int.class\r\n    unwrap(String.class) == String.class\r\n<\/pre>'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"unchecked\")\r\npublic static <T> Class<T> unwrap(Class<T> type) {\r\n    if (type == Integer.class)\r\n        return (Class<T>) int.class;\r\n    if (type == Float.class)\r\n        return (Class<T>) float.class;\r\n    if (type == Byte.class)\r\n        return (Class<T>) byte.class;\r\n    if (type == Double.class)\r\n        return (Class<T>) double.class;\r\n    if (type == Long.class)\r\n        return (Class<T>) long.class;\r\n    if (type == Character.class)\r\n        return (Class<T>) char.class;\r\n    if (type == Boolean.class)\r\n        return (Class<T>) boolean.class;\r\n    if (type == Short.class)\r\n        return (Class<T>) short.class;\r\n    if (type == Void.class)\r\n        return (Class<T>) void.class;\r\n    return type;\r\n}","Signature":"public static Class<T> unwrap(Class<T> type)"}, {"Body : ":"{\r\n    if (type == Integer.class)\r\n        return (Class<T>) int.class;\r\n    if (type == Float.class)\r\n        return (Class<T>) float.class;\r\n    if (type == Byte.class)\r\n        return (Class<T>) byte.class;\r\n    if (type == Double.class)\r\n        return (Class<T>) double.class;\r\n    if (type == Long.class)\r\n        return (Class<T>) long.class;\r\n    if (type == Character.class)\r\n        return (Class<T>) char.class;\r\n    if (type == Boolean.class)\r\n        return (Class<T>) boolean.class;\r\n    if (type == Short.class)\r\n        return (Class<T>) short.class;\r\n    if (type == Void.class)\r\n        return (Class<T>) void.class;\r\n    return type;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns the corresponding primitive type of '}, JavadocInlineTag{tagName='code', type=CODE, content=' type'}, JavadocSnippet{text=' if it is a\r\nwrapper type; otherwise returns '}, JavadocInlineTag{tagName='code', type=CODE, content=' type'}, JavadocSnippet{text=' itself. Idempotent.\r\n<pre>\r\n    unwrap(Integer.class) == int.class\r\n    unwrap(int.class) == int.class\r\n    unwrap(String.class) == String.class\r\n<\/pre>'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"unchecked\")\r\npublic static <T> Class<T> unwrap(Class<T> type) {\r\n    if (type == Integer.class)\r\n        return (Class<T>) int.class;\r\n    if (type == Float.class)\r\n        return (Class<T>) float.class;\r\n    if (type == Byte.class)\r\n        return (Class<T>) byte.class;\r\n    if (type == Double.class)\r\n        return (Class<T>) double.class;\r\n    if (type == Long.class)\r\n        return (Class<T>) long.class;\r\n    if (type == Character.class)\r\n        return (Class<T>) char.class;\r\n    if (type == Boolean.class)\r\n        return (Class<T>) boolean.class;\r\n    if (type == Short.class)\r\n        return (Class<T>) short.class;\r\n    if (type == Void.class)\r\n        return (Class<T>) void.class;\r\n    return type;\r\n}","Signature":"public static Class<T> unwrap(Class<T> type)"}, {"Body : ":"{\r\n    if (type == Integer.class)\r\n        return (Class<T>) int.class;\r\n    if (type == Float.class)\r\n        return (Class<T>) float.class;\r\n    if (type == Byte.class)\r\n        return (Class<T>) byte.class;\r\n    if (type == Double.class)\r\n        return (Class<T>) double.class;\r\n    if (type == Long.class)\r\n        return (Class<T>) long.class;\r\n    if (type == Character.class)\r\n        return (Class<T>) char.class;\r\n    if (type == Boolean.class)\r\n        return (Class<T>) boolean.class;\r\n    if (type == Short.class)\r\n        return (Class<T>) short.class;\r\n    if (type == Void.class)\r\n        return (Class<T>) void.class;\r\n    return type;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns the corresponding primitive type of '}, JavadocInlineTag{tagName='code', type=CODE, content=' type'}, JavadocSnippet{text=' if it is a\r\nwrapper type; otherwise returns '}, JavadocInlineTag{tagName='code', type=CODE, content=' type'}, JavadocSnippet{text=' itself. Idempotent.\r\n<pre>\r\n    unwrap(Integer.class) == int.class\r\n    unwrap(int.class) == int.class\r\n    unwrap(String.class) == String.class\r\n<\/pre>'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"unchecked\")\r\npublic static <T> Class<T> unwrap(Class<T> type) {\r\n    if (type == Integer.class)\r\n        return (Class<T>) int.class;\r\n    if (type == Float.class)\r\n        return (Class<T>) float.class;\r\n    if (type == Byte.class)\r\n        return (Class<T>) byte.class;\r\n    if (type == Double.class)\r\n        return (Class<T>) double.class;\r\n    if (type == Long.class)\r\n        return (Class<T>) long.class;\r\n    if (type == Character.class)\r\n        return (Class<T>) char.class;\r\n    if (type == Boolean.class)\r\n        return (Class<T>) boolean.class;\r\n    if (type == Short.class)\r\n        return (Class<T>) short.class;\r\n    if (type == Void.class)\r\n        return (Class<T>) void.class;\r\n    return type;\r\n}","Signature":"public static Class<T> unwrap(Class<T> type)"}, {"Body : ":"{\r\n    if (type == Integer.class)\r\n        return (Class<T>) int.class;\r\n    if (type == Float.class)\r\n        return (Class<T>) float.class;\r\n    if (type == Byte.class)\r\n        return (Class<T>) byte.class;\r\n    if (type == Double.class)\r\n        return (Class<T>) double.class;\r\n    if (type == Long.class)\r\n        return (Class<T>) long.class;\r\n    if (type == Character.class)\r\n        return (Class<T>) char.class;\r\n    if (type == Boolean.class)\r\n        return (Class<T>) boolean.class;\r\n    if (type == Short.class)\r\n        return (Class<T>) short.class;\r\n    if (type == Void.class)\r\n        return (Class<T>) void.class;\r\n    return type;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns the corresponding primitive type of '}, JavadocInlineTag{tagName='code', type=CODE, content=' type'}, JavadocSnippet{text=' if it is a\r\nwrapper type; otherwise returns '}, JavadocInlineTag{tagName='code', type=CODE, content=' type'}, JavadocSnippet{text=' itself. Idempotent.\r\n<pre>\r\n    unwrap(Integer.class) == int.class\r\n    unwrap(int.class) == int.class\r\n    unwrap(String.class) == String.class\r\n<\/pre>'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"unchecked\")\r\npublic static <T> Class<T> unwrap(Class<T> type) {\r\n    if (type == Integer.class)\r\n        return (Class<T>) int.class;\r\n    if (type == Float.class)\r\n        return (Class<T>) float.class;\r\n    if (type == Byte.class)\r\n        return (Class<T>) byte.class;\r\n    if (type == Double.class)\r\n        return (Class<T>) double.class;\r\n    if (type == Long.class)\r\n        return (Class<T>) long.class;\r\n    if (type == Character.class)\r\n        return (Class<T>) char.class;\r\n    if (type == Boolean.class)\r\n        return (Class<T>) boolean.class;\r\n    if (type == Short.class)\r\n        return (Class<T>) short.class;\r\n    if (type == Void.class)\r\n        return (Class<T>) void.class;\r\n    return type;\r\n}","Signature":"public static Class<T> unwrap(Class<T> type)"},]}, {"longName":"com.google.gson.internal.reflect.PreJava9ReflectionAccessor",
"methods":[{"Body : ":"{\r\n    ao.setAccessible(true);\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocInlineTag{tagName='inheritDoc', type=INHERIT_DOC, content=''}]}, blockTags=[]}","Method:":"@Override\r\npublic void makeAccessible(AccessibleObject ao) {\r\n    ao.setAccessible(true);\r\n}","Signature":"public void makeAccessible(AccessibleObject ao)"},]}, {"longName":"com.google.gson.internal.reflect.ReflectionAccessor",
"methods":[{"Body : ":"{\r\n    return instance;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Obtains a '}, JavadocInlineTag{tagName='link', type=LINK, content=' ReflectionAccessor'}, JavadocSnippet{text=' instance suitable for the current Java version.\r\n<p>\r\nYou may need one a reflective operation in your code throws '}, JavadocInlineTag{tagName='link', type=LINK, content=' java.lang.reflect.InaccessibleObjectException'}, JavadocSnippet{text='.\r\nIn such a case, use '}, JavadocInlineTag{tagName='link', type=LINK, content=' ReflectionAccessor#makeAccessible(AccessibleObject)'}, JavadocSnippet{text=' on a field, method or constructor\r\n(instead of basic '}, JavadocInlineTag{tagName='link', type=LINK, content=' AccessibleObject#setAccessible(boolean)'}, JavadocSnippet{text=').'}]}, blockTags=[]}","Method:":"public static ReflectionAccessor getInstance() {\r\n    return instance;\r\n}","Signature":"public static ReflectionAccessor getInstance()"}, {"Body : ":"{\r\n    return instance;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Obtains a '}, JavadocInlineTag{tagName='link', type=LINK, content=' ReflectionAccessor'}, JavadocSnippet{text=' instance suitable for the current Java version.\r\n<p>\r\nYou may need one a reflective operation in your code throws '}, JavadocInlineTag{tagName='link', type=LINK, content=' java.lang.reflect.InaccessibleObjectException'}, JavadocSnippet{text='.\r\nIn such a case, use '}, JavadocInlineTag{tagName='link', type=LINK, content=' ReflectionAccessor#makeAccessible(AccessibleObject)'}, JavadocSnippet{text=' on a field, method or constructor\r\n(instead of basic '}, JavadocInlineTag{tagName='link', type=LINK, content=' AccessibleObject#setAccessible(boolean)'}, JavadocSnippet{text=').'}]}, blockTags=[]}","Method:":"public static ReflectionAccessor getInstance() {\r\n    return instance;\r\n}","Signature":"public static ReflectionAccessor getInstance()"},]}, {"longName":"com.google.gson.internal.reflect.UnsafeReflectionAccessor",
"methods":[{"Body : ":"{\r\n    try {\r\n        return AccessibleObject.class.getDeclaredField(\"override\");\r\n    } catch (Exception e) {\r\n        return null;\r\n    }\r\n}","Comment":"","Method:":"private static Field getOverrideField() {\r\n    try {\r\n        return AccessibleObject.class.getDeclaredField(\"override\");\r\n    } catch (Exception e) {\r\n        return null;\r\n    }\r\n}","Signature":"private static Field getOverrideField()"}, {"Body : ":"{\r\n    try {\r\n        return AccessibleObject.class.getDeclaredField(\"override\");\r\n    } catch (Exception e) {\r\n        return null;\r\n    }\r\n}","Comment":"","Method:":"private static Field getOverrideField() {\r\n    try {\r\n        return AccessibleObject.class.getDeclaredField(\"override\");\r\n    } catch (Exception e) {\r\n        return null;\r\n    }\r\n}","Signature":"private static Field getOverrideField()"}, {"Body : ":"{\r\n    try {\r\n        return AccessibleObject.class.getDeclaredField(\"override\");\r\n    } catch (Exception e) {\r\n        return null;\r\n    }\r\n}","Comment":"","Method:":"private static Field getOverrideField() {\r\n    try {\r\n        return AccessibleObject.class.getDeclaredField(\"override\");\r\n    } catch (Exception e) {\r\n        return null;\r\n    }\r\n}","Signature":"private static Field getOverrideField()"}, {"Body : ":"{\r\n    try {\r\n        return AccessibleObject.class.getDeclaredField(\"override\");\r\n    } catch (Exception e) {\r\n        return null;\r\n    }\r\n}","Comment":"","Method:":"private static Field getOverrideField() {\r\n    try {\r\n        return AccessibleObject.class.getDeclaredField(\"override\");\r\n    } catch (Exception e) {\r\n        return null;\r\n    }\r\n}","Signature":"private static Field getOverrideField()"},]}, {"longName":"com.google.gson.internal.sql.SqlDateTypeAdapter",
"methods":[{"Body : ":"{\r\n    out.value(value == null ? null : format.format(value));\r\n}","Comment":"","Method:":"@Override\r\npublic synchronized void write(JsonWriter out, java.sql.Date value) throws IOException {\r\n    out.value(value == null ? null : format.format(value));\r\n}","Signature":"public synchronized void write(JsonWriter out, java.sql.Date value) throws IOException"}, {"Body : ":"{\r\n    out.value(value == null ? null : format.format(value));\r\n}","Comment":"","Method:":"@Override\r\npublic synchronized void write(JsonWriter out, java.sql.Date value) throws IOException {\r\n    out.value(value == null ? null : format.format(value));\r\n}","Signature":"public synchronized void write(JsonWriter out, java.sql.Date value) throws IOException"}, {"Body : ":"{\r\n    out.value(value == null ? null : format.format(value));\r\n}","Comment":"","Method:":"@Override\r\npublic synchronized void write(JsonWriter out, java.sql.Date value) throws IOException {\r\n    out.value(value == null ? null : format.format(value));\r\n}","Signature":"public synchronized void write(JsonWriter out, java.sql.Date value) throws IOException"},]}, {"longName":"com.google.gson.internal.sql.SqlTimestampTypeAdapter",
"methods":[{"Body : ":"{\r\n    dateTypeAdapter.write(out, value);\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, Timestamp value) throws IOException {\r\n    dateTypeAdapter.write(out, value);\r\n}","Signature":"public void write(JsonWriter out, Timestamp value) throws IOException"}, {"Body : ":"{\r\n    dateTypeAdapter.write(out, value);\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, Timestamp value) throws IOException {\r\n    dateTypeAdapter.write(out, value);\r\n}","Signature":"public void write(JsonWriter out, Timestamp value) throws IOException"}, {"Body : ":"{\r\n    dateTypeAdapter.write(out, value);\r\n}","Comment":"","Method:":"@Override\r\npublic void write(JsonWriter out, Timestamp value) throws IOException {\r\n    dateTypeAdapter.write(out, value);\r\n}","Signature":"public void write(JsonWriter out, Timestamp value) throws IOException"},]}, {"longName":"com.google.gson.internal.sql.SqlTimeTypeAdapter",
"methods":[{"Body : ":"{\r\n    out.value(value == null ? null : format.format(value));\r\n}","Comment":"","Method:":"@Override\r\npublic synchronized void write(JsonWriter out, Time value) throws IOException {\r\n    out.value(value == null ? null : format.format(value));\r\n}","Signature":"public synchronized void write(JsonWriter out, Time value) throws IOException"}, {"Body : ":"{\r\n    out.value(value == null ? null : format.format(value));\r\n}","Comment":"","Method:":"@Override\r\npublic synchronized void write(JsonWriter out, Time value) throws IOException {\r\n    out.value(value == null ? null : format.format(value));\r\n}","Signature":"public synchronized void write(JsonWriter out, Time value) throws IOException"}, {"Body : ":"{\r\n    out.value(value == null ? null : format.format(value));\r\n}","Comment":"","Method:":"@Override\r\npublic synchronized void write(JsonWriter out, Time value) throws IOException {\r\n    out.value(value == null ? null : format.format(value));\r\n}","Signature":"public synchronized void write(JsonWriter out, Time value) throws IOException"},]}, {"longName":"com.google.gson.internal.sql.SqlTypesSupport",
"methods":[{"Body : ":"{\r\n    return new Timestamp(date.getTime());\r\n}","Comment":"","Method:":"@Override\r\nprotected Timestamp deserialize(Date date) {\r\n    return new Timestamp(date.getTime());\r\n}","Signature":"protected Timestamp deserialize(Date date)"}, {"Body : ":"{\r\n    return new Timestamp(date.getTime());\r\n}","Comment":"","Method:":"@Override\r\nprotected Timestamp deserialize(Date date) {\r\n    return new Timestamp(date.getTime());\r\n}","Signature":"protected Timestamp deserialize(Date date)"},]}, {"longName":"com.google.gson.internal.Streams",
"methods":[{"Body : ":"{\r\n    return new String(chars, start, end - start);\r\n}","Comment":"","Method:":"public CharSequence subSequence(int start, int end) {\r\n    return new String(chars, start, end - start);\r\n}","Signature":"public CharSequence subSequence(int start, int end)"}, {"Body : ":"{\r\n    return new String(chars, start, end - start);\r\n}","Comment":"","Method:":"public CharSequence subSequence(int start, int end) {\r\n    return new String(chars, start, end - start);\r\n}","Signature":"public CharSequence subSequence(int start, int end)"}, {"Body : ":"{\r\n    return new String(chars, start, end - start);\r\n}","Comment":"","Method:":"public CharSequence subSequence(int start, int end) {\r\n    return new String(chars, start, end - start);\r\n}","Signature":"public CharSequence subSequence(int start, int end)"}, {"Body : ":"{\r\n    return new String(chars, start, end - start);\r\n}","Comment":"","Method:":"public CharSequence subSequence(int start, int end) {\r\n    return new String(chars, start, end - start);\r\n}","Signature":"public CharSequence subSequence(int start, int end)"}, {"Body : ":"{\r\n    return new String(chars, start, end - start);\r\n}","Comment":"","Method:":"public CharSequence subSequence(int start, int end) {\r\n    return new String(chars, start, end - start);\r\n}","Signature":"public CharSequence subSequence(int start, int end)"}, {"Body : ":"{\r\n    return new String(chars, start, end - start);\r\n}","Comment":"","Method:":"public CharSequence subSequence(int start, int end) {\r\n    return new String(chars, start, end - start);\r\n}","Signature":"public CharSequence subSequence(int start, int end)"}, {"Body : ":"{\r\n    return new String(chars, start, end - start);\r\n}","Comment":"","Method:":"public CharSequence subSequence(int start, int end) {\r\n    return new String(chars, start, end - start);\r\n}","Signature":"public CharSequence subSequence(int start, int end)"}, {"Body : ":"{\r\n    return new String(chars, start, end - start);\r\n}","Comment":"","Method:":"public CharSequence subSequence(int start, int end) {\r\n    return new String(chars, start, end - start);\r\n}","Signature":"public CharSequence subSequence(int start, int end)"}, {"Body : ":"{\r\n    return new String(chars, start, end - start);\r\n}","Comment":"","Method:":"public CharSequence subSequence(int start, int end) {\r\n    return new String(chars, start, end - start);\r\n}","Signature":"public CharSequence subSequence(int start, int end)"}, {"Body : ":"{\r\n    return new String(chars, start, end - start);\r\n}","Comment":"","Method:":"public CharSequence subSequence(int start, int end) {\r\n    return new String(chars, start, end - start);\r\n}","Signature":"public CharSequence subSequence(int start, int end)"},]}, {"longName":"com.google.gson.internal.UnsafeAllocator",
"methods":[{"Body : ":"{\r\n    int modifiers = c.getModifiers();\r\n    if (Modifier.isInterface(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + c.getName());\r\n    }\r\n    if (Modifier.isAbstract(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Abstract class can't be instantiated! Class name: \" + c.getName());\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Check if the class can be instantiated by unsafe allocator. If the instance has interface or abstract modifiers\r\nthrow an '}, JavadocInlineTag{tagName='link', type=LINK, content=' java.lang.UnsupportedOperationException'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='instance of the class to be checked'}]}', name=Optional[c]}]}","Method:":"static void assertInstantiable(Class<?> c) {\r\n    int modifiers = c.getModifiers();\r\n    if (Modifier.isInterface(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + c.getName());\r\n    }\r\n    if (Modifier.isAbstract(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Abstract class can't be instantiated! Class name: \" + c.getName());\r\n    }\r\n}","Signature":" static void assertInstantiable(Class<?> c)"}, {"Body : ":"{\r\n    int modifiers = c.getModifiers();\r\n    if (Modifier.isInterface(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + c.getName());\r\n    }\r\n    if (Modifier.isAbstract(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Abstract class can't be instantiated! Class name: \" + c.getName());\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Check if the class can be instantiated by unsafe allocator. If the instance has interface or abstract modifiers\r\nthrow an '}, JavadocInlineTag{tagName='link', type=LINK, content=' java.lang.UnsupportedOperationException'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='instance of the class to be checked'}]}', name=Optional[c]}]}","Method:":"static void assertInstantiable(Class<?> c) {\r\n    int modifiers = c.getModifiers();\r\n    if (Modifier.isInterface(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + c.getName());\r\n    }\r\n    if (Modifier.isAbstract(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Abstract class can't be instantiated! Class name: \" + c.getName());\r\n    }\r\n}","Signature":" static void assertInstantiable(Class<?> c)"}, {"Body : ":"{\r\n    int modifiers = c.getModifiers();\r\n    if (Modifier.isInterface(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + c.getName());\r\n    }\r\n    if (Modifier.isAbstract(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Abstract class can't be instantiated! Class name: \" + c.getName());\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Check if the class can be instantiated by unsafe allocator. If the instance has interface or abstract modifiers\r\nthrow an '}, JavadocInlineTag{tagName='link', type=LINK, content=' java.lang.UnsupportedOperationException'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='instance of the class to be checked'}]}', name=Optional[c]}]}","Method:":"static void assertInstantiable(Class<?> c) {\r\n    int modifiers = c.getModifiers();\r\n    if (Modifier.isInterface(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + c.getName());\r\n    }\r\n    if (Modifier.isAbstract(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Abstract class can't be instantiated! Class name: \" + c.getName());\r\n    }\r\n}","Signature":" static void assertInstantiable(Class<?> c)"}, {"Body : ":"{\r\n    int modifiers = c.getModifiers();\r\n    if (Modifier.isInterface(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + c.getName());\r\n    }\r\n    if (Modifier.isAbstract(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Abstract class can't be instantiated! Class name: \" + c.getName());\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Check if the class can be instantiated by unsafe allocator. If the instance has interface or abstract modifiers\r\nthrow an '}, JavadocInlineTag{tagName='link', type=LINK, content=' java.lang.UnsupportedOperationException'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='instance of the class to be checked'}]}', name=Optional[c]}]}","Method:":"static void assertInstantiable(Class<?> c) {\r\n    int modifiers = c.getModifiers();\r\n    if (Modifier.isInterface(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + c.getName());\r\n    }\r\n    if (Modifier.isAbstract(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Abstract class can't be instantiated! Class name: \" + c.getName());\r\n    }\r\n}","Signature":" static void assertInstantiable(Class<?> c)"}, {"Body : ":"{\r\n    int modifiers = c.getModifiers();\r\n    if (Modifier.isInterface(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + c.getName());\r\n    }\r\n    if (Modifier.isAbstract(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Abstract class can't be instantiated! Class name: \" + c.getName());\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Check if the class can be instantiated by unsafe allocator. If the instance has interface or abstract modifiers\r\nthrow an '}, JavadocInlineTag{tagName='link', type=LINK, content=' java.lang.UnsupportedOperationException'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='instance of the class to be checked'}]}', name=Optional[c]}]}","Method:":"static void assertInstantiable(Class<?> c) {\r\n    int modifiers = c.getModifiers();\r\n    if (Modifier.isInterface(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + c.getName());\r\n    }\r\n    if (Modifier.isAbstract(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Abstract class can't be instantiated! Class name: \" + c.getName());\r\n    }\r\n}","Signature":" static void assertInstantiable(Class<?> c)"}, {"Body : ":"{\r\n    int modifiers = c.getModifiers();\r\n    if (Modifier.isInterface(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + c.getName());\r\n    }\r\n    if (Modifier.isAbstract(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Abstract class can't be instantiated! Class name: \" + c.getName());\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Check if the class can be instantiated by unsafe allocator. If the instance has interface or abstract modifiers\r\nthrow an '}, JavadocInlineTag{tagName='link', type=LINK, content=' java.lang.UnsupportedOperationException'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='instance of the class to be checked'}]}', name=Optional[c]}]}","Method:":"static void assertInstantiable(Class<?> c) {\r\n    int modifiers = c.getModifiers();\r\n    if (Modifier.isInterface(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + c.getName());\r\n    }\r\n    if (Modifier.isAbstract(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Abstract class can't be instantiated! Class name: \" + c.getName());\r\n    }\r\n}","Signature":" static void assertInstantiable(Class<?> c)"}, {"Body : ":"{\r\n    int modifiers = c.getModifiers();\r\n    if (Modifier.isInterface(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + c.getName());\r\n    }\r\n    if (Modifier.isAbstract(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Abstract class can't be instantiated! Class name: \" + c.getName());\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Check if the class can be instantiated by unsafe allocator. If the instance has interface or abstract modifiers\r\nthrow an '}, JavadocInlineTag{tagName='link', type=LINK, content=' java.lang.UnsupportedOperationException'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='instance of the class to be checked'}]}', name=Optional[c]}]}","Method:":"static void assertInstantiable(Class<?> c) {\r\n    int modifiers = c.getModifiers();\r\n    if (Modifier.isInterface(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + c.getName());\r\n    }\r\n    if (Modifier.isAbstract(modifiers)) {\r\n        throw new UnsupportedOperationException(\"Abstract class can't be instantiated! Class name: \" + c.getName());\r\n    }\r\n}","Signature":" static void assertInstantiable(Class<?> c)"},]}, {"longName":"com.google.gson.JsonArray",
"methods":[{"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return elements.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return elements.hashCode();\r\n}","Signature":"public int hashCode()"},]}, {"longName":"com.google.gson.JsonElement",
"methods":[{"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns a String representation of this element.'}]}, blockTags=[]}","Method:":"@Override\r\npublic String toString() {\r\n    try {\r\n        StringWriter stringWriter = new StringWriter();\r\n        JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n        jsonWriter.setLenient(true);\r\n        Streams.write(this, jsonWriter);\r\n        return stringWriter.toString();\r\n    } catch (IOException e) {\r\n        throw new AssertionError(e);\r\n    }\r\n}","Signature":"public String toString()"},]}, {"longName":"com.google.gson.JsonIOException",
"methods":]}, {"longName":"com.google.gson.JsonNull",
"methods":[{"Body : ":"{\r\n    return this == other || other instanceof JsonNull;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='All instances of JsonNull are the same'}]}, blockTags=[]}","Method:":"@Override\r\npublic boolean equals(Object other) {\r\n    return this == other || other instanceof JsonNull;\r\n}","Signature":"public boolean equals(Object other)"}, {"Body : ":"{\r\n    return this == other || other instanceof JsonNull;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='All instances of JsonNull are the same'}]}, blockTags=[]}","Method:":"@Override\r\npublic boolean equals(Object other) {\r\n    return this == other || other instanceof JsonNull;\r\n}","Signature":"public boolean equals(Object other)"}, {"Body : ":"{\r\n    return this == other || other instanceof JsonNull;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='All instances of JsonNull are the same'}]}, blockTags=[]}","Method:":"@Override\r\npublic boolean equals(Object other) {\r\n    return this == other || other instanceof JsonNull;\r\n}","Signature":"public boolean equals(Object other)"},]}, {"longName":"com.google.gson.JsonObject",
"methods":[{"Body : ":"{\r\n    return members.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return members.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return members.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return members.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return members.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return members.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return members.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return members.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return members.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return members.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return members.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return members.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return members.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return members.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return members.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return members.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return members.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return members.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return members.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return members.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return members.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return members.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return members.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return members.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return members.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return members.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return members.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return members.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return members.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return members.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return members.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return members.hashCode();\r\n}","Signature":"public int hashCode()"}, {"Body : ":"{\r\n    return members.hashCode();\r\n}","Comment":"","Method:":"@Override\r\npublic int hashCode() {\r\n    return members.hashCode();\r\n}","Signature":"public int hashCode()"},]}, {"longName":"com.google.gson.JsonParseException",
"methods":]}, {"longName":"com.google.gson.JsonParser",
"methods":[{"Body : ":"{\r\n    return parseReader(json);\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[]}, blockTags=[JavadocBlockTag{type=DEPRECATED, content='JavadocDescription{elements=[JavadocSnippet{text='Use '}, JavadocInlineTag{tagName='link', type=LINK, content=' JsonParser#parseReader(JsonReader)'}]}', name=Optional.empty}]}","Method:":"@Deprecated\r\npublic JsonElement parse(JsonReader json) throws JsonIOException, JsonSyntaxException {\r\n    return parseReader(json);\r\n}","Signature":"public JsonElement parse(JsonReader json) throws JsonIOException, JsonSyntaxException"}, {"Body : ":"{\r\n    return parseReader(json);\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[]}, blockTags=[JavadocBlockTag{type=DEPRECATED, content='JavadocDescription{elements=[JavadocSnippet{text='Use '}, JavadocInlineTag{tagName='link', type=LINK, content=' JsonParser#parseReader(JsonReader)'}]}', name=Optional.empty}]}","Method:":"@Deprecated\r\npublic JsonElement parse(JsonReader json) throws JsonIOException, JsonSyntaxException {\r\n    return parseReader(json);\r\n}","Signature":"public JsonElement parse(JsonReader json) throws JsonIOException, JsonSyntaxException"}, {"Body : ":"{\r\n    return parseReader(json);\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[]}, blockTags=[JavadocBlockTag{type=DEPRECATED, content='JavadocDescription{elements=[JavadocSnippet{text='Use '}, JavadocInlineTag{tagName='link', type=LINK, content=' JsonParser#parseReader(JsonReader)'}]}', name=Optional.empty}]}","Method:":"@Deprecated\r\npublic JsonElement parse(JsonReader json) throws JsonIOException, JsonSyntaxException {\r\n    return parseReader(json);\r\n}","Signature":"public JsonElement parse(JsonReader json) throws JsonIOException, JsonSyntaxException"}, {"Body : ":"{\r\n    return parseReader(json);\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[]}, blockTags=[JavadocBlockTag{type=DEPRECATED, content='JavadocDescription{elements=[JavadocSnippet{text='Use '}, JavadocInlineTag{tagName='link', type=LINK, content=' JsonParser#parseReader(JsonReader)'}]}', name=Optional.empty}]}","Method:":"@Deprecated\r\npublic JsonElement parse(JsonReader json) throws JsonIOException, JsonSyntaxException {\r\n    return parseReader(json);\r\n}","Signature":"public JsonElement parse(JsonReader json) throws JsonIOException, JsonSyntaxException"}, {"Body : ":"{\r\n    return parseReader(json);\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[]}, blockTags=[JavadocBlockTag{type=DEPRECATED, content='JavadocDescription{elements=[JavadocSnippet{text='Use '}, JavadocInlineTag{tagName='link', type=LINK, content=' JsonParser#parseReader(JsonReader)'}]}', name=Optional.empty}]}","Method:":"@Deprecated\r\npublic JsonElement parse(JsonReader json) throws JsonIOException, JsonSyntaxException {\r\n    return parseReader(json);\r\n}","Signature":"public JsonElement parse(JsonReader json) throws JsonIOException, JsonSyntaxException"}, {"Body : ":"{\r\n    return parseReader(json);\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[]}, blockTags=[JavadocBlockTag{type=DEPRECATED, content='JavadocDescription{elements=[JavadocSnippet{text='Use '}, JavadocInlineTag{tagName='link', type=LINK, content=' JsonParser#parseReader(JsonReader)'}]}', name=Optional.empty}]}","Method:":"@Deprecated\r\npublic JsonElement parse(JsonReader json) throws JsonIOException, JsonSyntaxException {\r\n    return parseReader(json);\r\n}","Signature":"public JsonElement parse(JsonReader json) throws JsonIOException, JsonSyntaxException"},]}, {"longName":"com.google.gson.JsonPrimitive",
"methods":[{"Body : ":"{\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns true if the specified number is an integral type\r\n(Long, Integer, Short, Byte, BigInteger)'}]}, blockTags=[]}","Method:":"private static boolean isIntegral(JsonPrimitive primitive) {\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Signature":"private static boolean isIntegral(JsonPrimitive primitive)"}, {"Body : ":"{\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns true if the specified number is an integral type\r\n(Long, Integer, Short, Byte, BigInteger)'}]}, blockTags=[]}","Method:":"private static boolean isIntegral(JsonPrimitive primitive) {\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Signature":"private static boolean isIntegral(JsonPrimitive primitive)"}, {"Body : ":"{\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns true if the specified number is an integral type\r\n(Long, Integer, Short, Byte, BigInteger)'}]}, blockTags=[]}","Method:":"private static boolean isIntegral(JsonPrimitive primitive) {\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Signature":"private static boolean isIntegral(JsonPrimitive primitive)"}, {"Body : ":"{\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns true if the specified number is an integral type\r\n(Long, Integer, Short, Byte, BigInteger)'}]}, blockTags=[]}","Method:":"private static boolean isIntegral(JsonPrimitive primitive) {\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Signature":"private static boolean isIntegral(JsonPrimitive primitive)"}, {"Body : ":"{\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns true if the specified number is an integral type\r\n(Long, Integer, Short, Byte, BigInteger)'}]}, blockTags=[]}","Method:":"private static boolean isIntegral(JsonPrimitive primitive) {\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Signature":"private static boolean isIntegral(JsonPrimitive primitive)"}, {"Body : ":"{\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns true if the specified number is an integral type\r\n(Long, Integer, Short, Byte, BigInteger)'}]}, blockTags=[]}","Method:":"private static boolean isIntegral(JsonPrimitive primitive) {\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Signature":"private static boolean isIntegral(JsonPrimitive primitive)"}, {"Body : ":"{\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns true if the specified number is an integral type\r\n(Long, Integer, Short, Byte, BigInteger)'}]}, blockTags=[]}","Method:":"private static boolean isIntegral(JsonPrimitive primitive) {\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Signature":"private static boolean isIntegral(JsonPrimitive primitive)"}, {"Body : ":"{\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns true if the specified number is an integral type\r\n(Long, Integer, Short, Byte, BigInteger)'}]}, blockTags=[]}","Method:":"private static boolean isIntegral(JsonPrimitive primitive) {\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Signature":"private static boolean isIntegral(JsonPrimitive primitive)"}, {"Body : ":"{\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns true if the specified number is an integral type\r\n(Long, Integer, Short, Byte, BigInteger)'}]}, blockTags=[]}","Method:":"private static boolean isIntegral(JsonPrimitive primitive) {\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Signature":"private static boolean isIntegral(JsonPrimitive primitive)"}, {"Body : ":"{\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns true if the specified number is an integral type\r\n(Long, Integer, Short, Byte, BigInteger)'}]}, blockTags=[]}","Method:":"private static boolean isIntegral(JsonPrimitive primitive) {\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Signature":"private static boolean isIntegral(JsonPrimitive primitive)"}, {"Body : ":"{\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns true if the specified number is an integral type\r\n(Long, Integer, Short, Byte, BigInteger)'}]}, blockTags=[]}","Method:":"private static boolean isIntegral(JsonPrimitive primitive) {\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Signature":"private static boolean isIntegral(JsonPrimitive primitive)"}, {"Body : ":"{\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns true if the specified number is an integral type\r\n(Long, Integer, Short, Byte, BigInteger)'}]}, blockTags=[]}","Method:":"private static boolean isIntegral(JsonPrimitive primitive) {\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Signature":"private static boolean isIntegral(JsonPrimitive primitive)"}, {"Body : ":"{\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns true if the specified number is an integral type\r\n(Long, Integer, Short, Byte, BigInteger)'}]}, blockTags=[]}","Method:":"private static boolean isIntegral(JsonPrimitive primitive) {\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Signature":"private static boolean isIntegral(JsonPrimitive primitive)"}, {"Body : ":"{\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns true if the specified number is an integral type\r\n(Long, Integer, Short, Byte, BigInteger)'}]}, blockTags=[]}","Method:":"private static boolean isIntegral(JsonPrimitive primitive) {\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Signature":"private static boolean isIntegral(JsonPrimitive primitive)"}, {"Body : ":"{\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns true if the specified number is an integral type\r\n(Long, Integer, Short, Byte, BigInteger)'}]}, blockTags=[]}","Method:":"private static boolean isIntegral(JsonPrimitive primitive) {\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Signature":"private static boolean isIntegral(JsonPrimitive primitive)"}, {"Body : ":"{\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns true if the specified number is an integral type\r\n(Long, Integer, Short, Byte, BigInteger)'}]}, blockTags=[]}","Method:":"private static boolean isIntegral(JsonPrimitive primitive) {\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Signature":"private static boolean isIntegral(JsonPrimitive primitive)"}, {"Body : ":"{\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns true if the specified number is an integral type\r\n(Long, Integer, Short, Byte, BigInteger)'}]}, blockTags=[]}","Method:":"private static boolean isIntegral(JsonPrimitive primitive) {\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Signature":"private static boolean isIntegral(JsonPrimitive primitive)"}, {"Body : ":"{\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns true if the specified number is an integral type\r\n(Long, Integer, Short, Byte, BigInteger)'}]}, blockTags=[]}","Method:":"private static boolean isIntegral(JsonPrimitive primitive) {\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Signature":"private static boolean isIntegral(JsonPrimitive primitive)"}, {"Body : ":"{\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Returns true if the specified number is an integral type\r\n(Long, Integer, Short, Byte, BigInteger)'}]}, blockTags=[]}","Method:":"private static boolean isIntegral(JsonPrimitive primitive) {\r\n    if (primitive.value instanceof Number) {\r\n        Number number = (Number) primitive.value;\r\n        return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\r\n    }\r\n    return false;\r\n}","Signature":"private static boolean isIntegral(JsonPrimitive primitive)"},]}, {"longName":"com.google.gson.JsonStreamParser",
"methods":[{"Body : ":"{\r\n    throw new UnsupportedOperationException();\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This optional '}, JavadocInlineTag{tagName='link', type=LINK, content=' Iterator'}, JavadocSnippet{text=' method is not relevant for stream parsing and hence is not\r\nimplemented.'}]}, blockTags=[JavadocBlockTag{type=SINCE, content='JavadocDescription{elements=[JavadocSnippet{text='1.4'}]}', name=Optional.empty}]}","Method:":"public void remove() {\r\n    throw new UnsupportedOperationException();\r\n}","Signature":"public void remove()"}, {"Body : ":"{\r\n    throw new UnsupportedOperationException();\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This optional '}, JavadocInlineTag{tagName='link', type=LINK, content=' Iterator'}, JavadocSnippet{text=' method is not relevant for stream parsing and hence is not\r\nimplemented.'}]}, blockTags=[JavadocBlockTag{type=SINCE, content='JavadocDescription{elements=[JavadocSnippet{text='1.4'}]}', name=Optional.empty}]}","Method:":"public void remove() {\r\n    throw new UnsupportedOperationException();\r\n}","Signature":"public void remove()"}, {"Body : ":"{\r\n    throw new UnsupportedOperationException();\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This optional '}, JavadocInlineTag{tagName='link', type=LINK, content=' Iterator'}, JavadocSnippet{text=' method is not relevant for stream parsing and hence is not\r\nimplemented.'}]}, blockTags=[JavadocBlockTag{type=SINCE, content='JavadocDescription{elements=[JavadocSnippet{text='1.4'}]}', name=Optional.empty}]}","Method:":"public void remove() {\r\n    throw new UnsupportedOperationException();\r\n}","Signature":"public void remove()"},]}, {"longName":"com.google.gson.JsonSyntaxException",
"methods":]}, {"longName":"com.google.gson.reflect.TypeToken",
"methods":[{"Body : ":"{\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Gets type literal for the array type whose elements are all instances of '}, JavadocInlineTag{tagName='code', type=CODE, content=' componentType'}, JavadocSnippet{text='.'}]}, blockTags=[]}","Method:":"public static TypeToken<?> getArray(Type componentType) {\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Signature":"public static TypeToken<?> getArray(Type componentType)"}, {"Body : ":"{\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Gets type literal for the array type whose elements are all instances of '}, JavadocInlineTag{tagName='code', type=CODE, content=' componentType'}, JavadocSnippet{text='.'}]}, blockTags=[]}","Method:":"public static TypeToken<?> getArray(Type componentType) {\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Signature":"public static TypeToken<?> getArray(Type componentType)"}, {"Body : ":"{\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Gets type literal for the array type whose elements are all instances of '}, JavadocInlineTag{tagName='code', type=CODE, content=' componentType'}, JavadocSnippet{text='.'}]}, blockTags=[]}","Method:":"public static TypeToken<?> getArray(Type componentType) {\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Signature":"public static TypeToken<?> getArray(Type componentType)"}, {"Body : ":"{\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Gets type literal for the array type whose elements are all instances of '}, JavadocInlineTag{tagName='code', type=CODE, content=' componentType'}, JavadocSnippet{text='.'}]}, blockTags=[]}","Method:":"public static TypeToken<?> getArray(Type componentType) {\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Signature":"public static TypeToken<?> getArray(Type componentType)"}, {"Body : ":"{\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Gets type literal for the array type whose elements are all instances of '}, JavadocInlineTag{tagName='code', type=CODE, content=' componentType'}, JavadocSnippet{text='.'}]}, blockTags=[]}","Method:":"public static TypeToken<?> getArray(Type componentType) {\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Signature":"public static TypeToken<?> getArray(Type componentType)"}, {"Body : ":"{\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Gets type literal for the array type whose elements are all instances of '}, JavadocInlineTag{tagName='code', type=CODE, content=' componentType'}, JavadocSnippet{text='.'}]}, blockTags=[]}","Method:":"public static TypeToken<?> getArray(Type componentType) {\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Signature":"public static TypeToken<?> getArray(Type componentType)"}, {"Body : ":"{\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Gets type literal for the array type whose elements are all instances of '}, JavadocInlineTag{tagName='code', type=CODE, content=' componentType'}, JavadocSnippet{text='.'}]}, blockTags=[]}","Method:":"public static TypeToken<?> getArray(Type componentType) {\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Signature":"public static TypeToken<?> getArray(Type componentType)"}, {"Body : ":"{\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Gets type literal for the array type whose elements are all instances of '}, JavadocInlineTag{tagName='code', type=CODE, content=' componentType'}, JavadocSnippet{text='.'}]}, blockTags=[]}","Method:":"public static TypeToken<?> getArray(Type componentType) {\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Signature":"public static TypeToken<?> getArray(Type componentType)"}, {"Body : ":"{\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Gets type literal for the array type whose elements are all instances of '}, JavadocInlineTag{tagName='code', type=CODE, content=' componentType'}, JavadocSnippet{text='.'}]}, blockTags=[]}","Method:":"public static TypeToken<?> getArray(Type componentType) {\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Signature":"public static TypeToken<?> getArray(Type componentType)"}, {"Body : ":"{\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Gets type literal for the array type whose elements are all instances of '}, JavadocInlineTag{tagName='code', type=CODE, content=' componentType'}, JavadocSnippet{text='.'}]}, blockTags=[]}","Method:":"public static TypeToken<?> getArray(Type componentType) {\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Signature":"public static TypeToken<?> getArray(Type componentType)"}, {"Body : ":"{\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Gets type literal for the array type whose elements are all instances of '}, JavadocInlineTag{tagName='code', type=CODE, content=' componentType'}, JavadocSnippet{text='.'}]}, blockTags=[]}","Method:":"public static TypeToken<?> getArray(Type componentType) {\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Signature":"public static TypeToken<?> getArray(Type componentType)"}, {"Body : ":"{\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Gets type literal for the array type whose elements are all instances of '}, JavadocInlineTag{tagName='code', type=CODE, content=' componentType'}, JavadocSnippet{text='.'}]}, blockTags=[]}","Method:":"public static TypeToken<?> getArray(Type componentType) {\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Signature":"public static TypeToken<?> getArray(Type componentType)"}, {"Body : ":"{\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Gets type literal for the array type whose elements are all instances of '}, JavadocInlineTag{tagName='code', type=CODE, content=' componentType'}, JavadocSnippet{text='.'}]}, blockTags=[]}","Method:":"public static TypeToken<?> getArray(Type componentType) {\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Signature":"public static TypeToken<?> getArray(Type componentType)"}, {"Body : ":"{\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Gets type literal for the array type whose elements are all instances of '}, JavadocInlineTag{tagName='code', type=CODE, content=' componentType'}, JavadocSnippet{text='.'}]}, blockTags=[]}","Method:":"public static TypeToken<?> getArray(Type componentType) {\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Signature":"public static TypeToken<?> getArray(Type componentType)"}, {"Body : ":"{\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Gets type literal for the array type whose elements are all instances of '}, JavadocInlineTag{tagName='code', type=CODE, content=' componentType'}, JavadocSnippet{text='.'}]}, blockTags=[]}","Method:":"public static TypeToken<?> getArray(Type componentType) {\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Signature":"public static TypeToken<?> getArray(Type componentType)"}, {"Body : ":"{\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Gets type literal for the array type whose elements are all instances of '}, JavadocInlineTag{tagName='code', type=CODE, content=' componentType'}, JavadocSnippet{text='.'}]}, blockTags=[]}","Method:":"public static TypeToken<?> getArray(Type componentType) {\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Signature":"public static TypeToken<?> getArray(Type componentType)"}, {"Body : ":"{\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Gets type literal for the array type whose elements are all instances of '}, JavadocInlineTag{tagName='code', type=CODE, content=' componentType'}, JavadocSnippet{text='.'}]}, blockTags=[]}","Method:":"public static TypeToken<?> getArray(Type componentType) {\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Signature":"public static TypeToken<?> getArray(Type componentType)"}, {"Body : ":"{\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Gets type literal for the array type whose elements are all instances of '}, JavadocInlineTag{tagName='code', type=CODE, content=' componentType'}, JavadocSnippet{text='.'}]}, blockTags=[]}","Method:":"public static TypeToken<?> getArray(Type componentType) {\r\n    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\r\n}","Signature":"public static TypeToken<?> getArray(Type componentType)"},]}, {"longName":"com.google.gson.stream.JsonReader",
"methods":[{"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"}, {"Body : ":"{\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Comment":"","Method:":"@Override\r\npublic void promoteNameToValue(JsonReader reader) throws IOException {\r\n    if (reader instanceof JsonTreeReader) {\r\n        ((JsonTreeReader) reader).promoteNameToValue();\r\n        return;\r\n    }\r\n    int p = reader.peeked;\r\n    if (p == PEEKED_NONE) {\r\n        p = reader.doPeek();\r\n    }\r\n    if (p == PEEKED_DOUBLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_DOUBLE_QUOTED;\r\n    } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\r\n        reader.peeked = PEEKED_SINGLE_QUOTED;\r\n    } else if (p == PEEKED_UNQUOTED_NAME) {\r\n        reader.peeked = PEEKED_UNQUOTED;\r\n    } else {\r\n        throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + reader.locationString());\r\n    }\r\n}","Signature":"public void promoteNameToValue(JsonReader reader) throws IOException"},]}, {"longName":"com.google.gson.stream.JsonScope",
"methods":]}, {"longName":"com.google.gson.stream.JsonWriter",
"methods":[{"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"}, {"Body : ":"{\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Inserts any necessary separators and whitespace before a literal value,\r\ninline array, or inline object. Also adjusts the stack to expect either a\r\nclosing bracket or another element.'}]}, blockTags=[]}","Method:":"@SuppressWarnings(\"fallthrough\")\r\nprivate void beforeValue() throws IOException {\r\n    switch(peek()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            out.append(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            out.append(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}","Signature":"private void beforeValue() throws IOException"},]}, {"longName":"com.google.gson.stream.MalformedJsonException",
"methods":]}, {"longName":"com.google.gson.TypeAdapter",
"methods":[{"Body : ":"{\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Converts '}, JavadocInlineTag{tagName='code', type=CODE, content=' jsonTree'}, JavadocSnippet{text=' to a Java object.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the Java object to convert. May be '}, JavadocInlineTag{tagName='link', type=LINK, content=' JsonNull'}, JavadocSnippet{text='.'}]}', name=Optional[jsonTree]}, JavadocBlockTag{type=SINCE, content='JavadocDescription{elements=[JavadocSnippet{text='2.2'}]}', name=Optional.empty}]}","Method:":"public final T fromJsonTree(JsonElement jsonTree) {\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Signature":"public final T fromJsonTree(JsonElement jsonTree)"}, {"Body : ":"{\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Converts '}, JavadocInlineTag{tagName='code', type=CODE, content=' jsonTree'}, JavadocSnippet{text=' to a Java object.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the Java object to convert. May be '}, JavadocInlineTag{tagName='link', type=LINK, content=' JsonNull'}, JavadocSnippet{text='.'}]}', name=Optional[jsonTree]}, JavadocBlockTag{type=SINCE, content='JavadocDescription{elements=[JavadocSnippet{text='2.2'}]}', name=Optional.empty}]}","Method:":"public final T fromJsonTree(JsonElement jsonTree) {\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Signature":"public final T fromJsonTree(JsonElement jsonTree)"}, {"Body : ":"{\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Converts '}, JavadocInlineTag{tagName='code', type=CODE, content=' jsonTree'}, JavadocSnippet{text=' to a Java object.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the Java object to convert. May be '}, JavadocInlineTag{tagName='link', type=LINK, content=' JsonNull'}, JavadocSnippet{text='.'}]}', name=Optional[jsonTree]}, JavadocBlockTag{type=SINCE, content='JavadocDescription{elements=[JavadocSnippet{text='2.2'}]}', name=Optional.empty}]}","Method:":"public final T fromJsonTree(JsonElement jsonTree) {\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Signature":"public final T fromJsonTree(JsonElement jsonTree)"}, {"Body : ":"{\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Converts '}, JavadocInlineTag{tagName='code', type=CODE, content=' jsonTree'}, JavadocSnippet{text=' to a Java object.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the Java object to convert. May be '}, JavadocInlineTag{tagName='link', type=LINK, content=' JsonNull'}, JavadocSnippet{text='.'}]}', name=Optional[jsonTree]}, JavadocBlockTag{type=SINCE, content='JavadocDescription{elements=[JavadocSnippet{text='2.2'}]}', name=Optional.empty}]}","Method:":"public final T fromJsonTree(JsonElement jsonTree) {\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Signature":"public final T fromJsonTree(JsonElement jsonTree)"}, {"Body : ":"{\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Converts '}, JavadocInlineTag{tagName='code', type=CODE, content=' jsonTree'}, JavadocSnippet{text=' to a Java object.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the Java object to convert. May be '}, JavadocInlineTag{tagName='link', type=LINK, content=' JsonNull'}, JavadocSnippet{text='.'}]}', name=Optional[jsonTree]}, JavadocBlockTag{type=SINCE, content='JavadocDescription{elements=[JavadocSnippet{text='2.2'}]}', name=Optional.empty}]}","Method:":"public final T fromJsonTree(JsonElement jsonTree) {\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Signature":"public final T fromJsonTree(JsonElement jsonTree)"}, {"Body : ":"{\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Converts '}, JavadocInlineTag{tagName='code', type=CODE, content=' jsonTree'}, JavadocSnippet{text=' to a Java object.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the Java object to convert. May be '}, JavadocInlineTag{tagName='link', type=LINK, content=' JsonNull'}, JavadocSnippet{text='.'}]}', name=Optional[jsonTree]}, JavadocBlockTag{type=SINCE, content='JavadocDescription{elements=[JavadocSnippet{text='2.2'}]}', name=Optional.empty}]}","Method:":"public final T fromJsonTree(JsonElement jsonTree) {\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Signature":"public final T fromJsonTree(JsonElement jsonTree)"}, {"Body : ":"{\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Converts '}, JavadocInlineTag{tagName='code', type=CODE, content=' jsonTree'}, JavadocSnippet{text=' to a Java object.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the Java object to convert. May be '}, JavadocInlineTag{tagName='link', type=LINK, content=' JsonNull'}, JavadocSnippet{text='.'}]}', name=Optional[jsonTree]}, JavadocBlockTag{type=SINCE, content='JavadocDescription{elements=[JavadocSnippet{text='2.2'}]}', name=Optional.empty}]}","Method:":"public final T fromJsonTree(JsonElement jsonTree) {\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Signature":"public final T fromJsonTree(JsonElement jsonTree)"}, {"Body : ":"{\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Converts '}, JavadocInlineTag{tagName='code', type=CODE, content=' jsonTree'}, JavadocSnippet{text=' to a Java object.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the Java object to convert. May be '}, JavadocInlineTag{tagName='link', type=LINK, content=' JsonNull'}, JavadocSnippet{text='.'}]}', name=Optional[jsonTree]}, JavadocBlockTag{type=SINCE, content='JavadocDescription{elements=[JavadocSnippet{text='2.2'}]}', name=Optional.empty}]}","Method:":"public final T fromJsonTree(JsonElement jsonTree) {\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Signature":"public final T fromJsonTree(JsonElement jsonTree)"}, {"Body : ":"{\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Converts '}, JavadocInlineTag{tagName='code', type=CODE, content=' jsonTree'}, JavadocSnippet{text=' to a Java object.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the Java object to convert. May be '}, JavadocInlineTag{tagName='link', type=LINK, content=' JsonNull'}, JavadocSnippet{text='.'}]}', name=Optional[jsonTree]}, JavadocBlockTag{type=SINCE, content='JavadocDescription{elements=[JavadocSnippet{text='2.2'}]}', name=Optional.empty}]}","Method:":"public final T fromJsonTree(JsonElement jsonTree) {\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Signature":"public final T fromJsonTree(JsonElement jsonTree)"}, {"Body : ":"{\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Converts '}, JavadocInlineTag{tagName='code', type=CODE, content=' jsonTree'}, JavadocSnippet{text=' to a Java object.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the Java object to convert. May be '}, JavadocInlineTag{tagName='link', type=LINK, content=' JsonNull'}, JavadocSnippet{text='.'}]}', name=Optional[jsonTree]}, JavadocBlockTag{type=SINCE, content='JavadocDescription{elements=[JavadocSnippet{text='2.2'}]}', name=Optional.empty}]}","Method:":"public final T fromJsonTree(JsonElement jsonTree) {\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Signature":"public final T fromJsonTree(JsonElement jsonTree)"}, {"Body : ":"{\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Converts '}, JavadocInlineTag{tagName='code', type=CODE, content=' jsonTree'}, JavadocSnippet{text=' to a Java object.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='the Java object to convert. May be '}, JavadocInlineTag{tagName='link', type=LINK, content=' JsonNull'}, JavadocSnippet{text='.'}]}', name=Optional[jsonTree]}, JavadocBlockTag{type=SINCE, content='JavadocDescription{elements=[JavadocSnippet{text='2.2'}]}', name=Optional.empty}]}","Method:":"public final T fromJsonTree(JsonElement jsonTree) {\r\n    try {\r\n        JsonReader jsonReader = new JsonTreeReader(jsonTree);\r\n        return read(jsonReader);\r\n    } catch (IOException e) {\r\n        throw new JsonIOException(e);\r\n    }\r\n}","Signature":"public final T fromJsonTree(JsonElement jsonTree)"},]}, {"longName":"com.google.gson.internal.GsonBuildConfig",
"methods":]}, {"longName":"com.google.gson.metrics.BagOfPrimitives",
"methods":[{"Body : ":"{\r\n    return String.format(\"(longValue=%d,intValue=%d,booleanValue=%b,stringValue=%s)\", longValue, intValue, booleanValue, stringValue);\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return String.format(\"(longValue=%d,intValue=%d,booleanValue=%b,stringValue=%s)\", longValue, intValue, booleanValue, stringValue);\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return String.format(\"(longValue=%d,intValue=%d,booleanValue=%b,stringValue=%s)\", longValue, intValue, booleanValue, stringValue);\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return String.format(\"(longValue=%d,intValue=%d,booleanValue=%b,stringValue=%s)\", longValue, intValue, booleanValue, stringValue);\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return String.format(\"(longValue=%d,intValue=%d,booleanValue=%b,stringValue=%s)\", longValue, intValue, booleanValue, stringValue);\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return String.format(\"(longValue=%d,intValue=%d,booleanValue=%b,stringValue=%s)\", longValue, intValue, booleanValue, stringValue);\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return String.format(\"(longValue=%d,intValue=%d,booleanValue=%b,stringValue=%s)\", longValue, intValue, booleanValue, stringValue);\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return String.format(\"(longValue=%d,intValue=%d,booleanValue=%b,stringValue=%s)\", longValue, intValue, booleanValue, stringValue);\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return String.format(\"(longValue=%d,intValue=%d,booleanValue=%b,stringValue=%s)\", longValue, intValue, booleanValue, stringValue);\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return String.format(\"(longValue=%d,intValue=%d,booleanValue=%b,stringValue=%s)\", longValue, intValue, booleanValue, stringValue);\r\n}","Signature":"public String toString()"},]}, {"longName":"com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark",
"methods":[{"Body : ":"{\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginObject();\r\n        BagOfPrimitives bag = new BagOfPrimitives();\r\n        while (jr.hasNext()) {\r\n            String name = jr.nextName();\r\n            for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                if (field.getName().equals(name)) {\r\n                    Class<?> fieldType = field.getType();\r\n                    if (fieldType.equals(long.class)) {\r\n                        field.setLong(bag, jr.nextLong());\r\n                    } else if (fieldType.equals(int.class)) {\r\n                        field.setInt(bag, jr.nextInt());\r\n                    } else if (fieldType.equals(boolean.class)) {\r\n                        field.setBoolean(bag, jr.nextBoolean());\r\n                    } else if (fieldType.equals(String.class)) {\r\n                        field.set(bag, jr.nextString());\r\n                    } else {\r\n                        throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        jr.endObject();\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and\r\nsetting object values by reflection. We should strive to reduce the discrepancy between this\r\nand '}, JavadocInlineTag{tagName='link', type=LINK, content=' #timeBagOfPrimitivesDefault(int)'}, JavadocSnippet{text=' .'}]}, blockTags=[]}","Method:":"public void timeBagOfPrimitivesReflectionStreaming(int reps) throws Exception {\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginObject();\r\n        BagOfPrimitives bag = new BagOfPrimitives();\r\n        while (jr.hasNext()) {\r\n            String name = jr.nextName();\r\n            for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                if (field.getName().equals(name)) {\r\n                    Class<?> fieldType = field.getType();\r\n                    if (fieldType.equals(long.class)) {\r\n                        field.setLong(bag, jr.nextLong());\r\n                    } else if (fieldType.equals(int.class)) {\r\n                        field.setInt(bag, jr.nextInt());\r\n                    } else if (fieldType.equals(boolean.class)) {\r\n                        field.setBoolean(bag, jr.nextBoolean());\r\n                    } else if (fieldType.equals(String.class)) {\r\n                        field.set(bag, jr.nextString());\r\n                    } else {\r\n                        throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        jr.endObject();\r\n    }\r\n}","Signature":"public void timeBagOfPrimitivesReflectionStreaming(int reps) throws Exception"}, {"Body : ":"{\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginObject();\r\n        BagOfPrimitives bag = new BagOfPrimitives();\r\n        while (jr.hasNext()) {\r\n            String name = jr.nextName();\r\n            for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                if (field.getName().equals(name)) {\r\n                    Class<?> fieldType = field.getType();\r\n                    if (fieldType.equals(long.class)) {\r\n                        field.setLong(bag, jr.nextLong());\r\n                    } else if (fieldType.equals(int.class)) {\r\n                        field.setInt(bag, jr.nextInt());\r\n                    } else if (fieldType.equals(boolean.class)) {\r\n                        field.setBoolean(bag, jr.nextBoolean());\r\n                    } else if (fieldType.equals(String.class)) {\r\n                        field.set(bag, jr.nextString());\r\n                    } else {\r\n                        throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        jr.endObject();\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and\r\nsetting object values by reflection. We should strive to reduce the discrepancy between this\r\nand '}, JavadocInlineTag{tagName='link', type=LINK, content=' #timeBagOfPrimitivesDefault(int)'}, JavadocSnippet{text=' .'}]}, blockTags=[]}","Method:":"public void timeBagOfPrimitivesReflectionStreaming(int reps) throws Exception {\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginObject();\r\n        BagOfPrimitives bag = new BagOfPrimitives();\r\n        while (jr.hasNext()) {\r\n            String name = jr.nextName();\r\n            for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                if (field.getName().equals(name)) {\r\n                    Class<?> fieldType = field.getType();\r\n                    if (fieldType.equals(long.class)) {\r\n                        field.setLong(bag, jr.nextLong());\r\n                    } else if (fieldType.equals(int.class)) {\r\n                        field.setInt(bag, jr.nextInt());\r\n                    } else if (fieldType.equals(boolean.class)) {\r\n                        field.setBoolean(bag, jr.nextBoolean());\r\n                    } else if (fieldType.equals(String.class)) {\r\n                        field.set(bag, jr.nextString());\r\n                    } else {\r\n                        throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        jr.endObject();\r\n    }\r\n}","Signature":"public void timeBagOfPrimitivesReflectionStreaming(int reps) throws Exception"}, {"Body : ":"{\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginObject();\r\n        BagOfPrimitives bag = new BagOfPrimitives();\r\n        while (jr.hasNext()) {\r\n            String name = jr.nextName();\r\n            for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                if (field.getName().equals(name)) {\r\n                    Class<?> fieldType = field.getType();\r\n                    if (fieldType.equals(long.class)) {\r\n                        field.setLong(bag, jr.nextLong());\r\n                    } else if (fieldType.equals(int.class)) {\r\n                        field.setInt(bag, jr.nextInt());\r\n                    } else if (fieldType.equals(boolean.class)) {\r\n                        field.setBoolean(bag, jr.nextBoolean());\r\n                    } else if (fieldType.equals(String.class)) {\r\n                        field.set(bag, jr.nextString());\r\n                    } else {\r\n                        throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        jr.endObject();\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and\r\nsetting object values by reflection. We should strive to reduce the discrepancy between this\r\nand '}, JavadocInlineTag{tagName='link', type=LINK, content=' #timeBagOfPrimitivesDefault(int)'}, JavadocSnippet{text=' .'}]}, blockTags=[]}","Method:":"public void timeBagOfPrimitivesReflectionStreaming(int reps) throws Exception {\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginObject();\r\n        BagOfPrimitives bag = new BagOfPrimitives();\r\n        while (jr.hasNext()) {\r\n            String name = jr.nextName();\r\n            for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                if (field.getName().equals(name)) {\r\n                    Class<?> fieldType = field.getType();\r\n                    if (fieldType.equals(long.class)) {\r\n                        field.setLong(bag, jr.nextLong());\r\n                    } else if (fieldType.equals(int.class)) {\r\n                        field.setInt(bag, jr.nextInt());\r\n                    } else if (fieldType.equals(boolean.class)) {\r\n                        field.setBoolean(bag, jr.nextBoolean());\r\n                    } else if (fieldType.equals(String.class)) {\r\n                        field.set(bag, jr.nextString());\r\n                    } else {\r\n                        throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        jr.endObject();\r\n    }\r\n}","Signature":"public void timeBagOfPrimitivesReflectionStreaming(int reps) throws Exception"}, {"Body : ":"{\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginObject();\r\n        BagOfPrimitives bag = new BagOfPrimitives();\r\n        while (jr.hasNext()) {\r\n            String name = jr.nextName();\r\n            for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                if (field.getName().equals(name)) {\r\n                    Class<?> fieldType = field.getType();\r\n                    if (fieldType.equals(long.class)) {\r\n                        field.setLong(bag, jr.nextLong());\r\n                    } else if (fieldType.equals(int.class)) {\r\n                        field.setInt(bag, jr.nextInt());\r\n                    } else if (fieldType.equals(boolean.class)) {\r\n                        field.setBoolean(bag, jr.nextBoolean());\r\n                    } else if (fieldType.equals(String.class)) {\r\n                        field.set(bag, jr.nextString());\r\n                    } else {\r\n                        throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        jr.endObject();\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and\r\nsetting object values by reflection. We should strive to reduce the discrepancy between this\r\nand '}, JavadocInlineTag{tagName='link', type=LINK, content=' #timeBagOfPrimitivesDefault(int)'}, JavadocSnippet{text=' .'}]}, blockTags=[]}","Method:":"public void timeBagOfPrimitivesReflectionStreaming(int reps) throws Exception {\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginObject();\r\n        BagOfPrimitives bag = new BagOfPrimitives();\r\n        while (jr.hasNext()) {\r\n            String name = jr.nextName();\r\n            for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                if (field.getName().equals(name)) {\r\n                    Class<?> fieldType = field.getType();\r\n                    if (fieldType.equals(long.class)) {\r\n                        field.setLong(bag, jr.nextLong());\r\n                    } else if (fieldType.equals(int.class)) {\r\n                        field.setInt(bag, jr.nextInt());\r\n                    } else if (fieldType.equals(boolean.class)) {\r\n                        field.setBoolean(bag, jr.nextBoolean());\r\n                    } else if (fieldType.equals(String.class)) {\r\n                        field.set(bag, jr.nextString());\r\n                    } else {\r\n                        throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        jr.endObject();\r\n    }\r\n}","Signature":"public void timeBagOfPrimitivesReflectionStreaming(int reps) throws Exception"}, {"Body : ":"{\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginObject();\r\n        BagOfPrimitives bag = new BagOfPrimitives();\r\n        while (jr.hasNext()) {\r\n            String name = jr.nextName();\r\n            for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                if (field.getName().equals(name)) {\r\n                    Class<?> fieldType = field.getType();\r\n                    if (fieldType.equals(long.class)) {\r\n                        field.setLong(bag, jr.nextLong());\r\n                    } else if (fieldType.equals(int.class)) {\r\n                        field.setInt(bag, jr.nextInt());\r\n                    } else if (fieldType.equals(boolean.class)) {\r\n                        field.setBoolean(bag, jr.nextBoolean());\r\n                    } else if (fieldType.equals(String.class)) {\r\n                        field.set(bag, jr.nextString());\r\n                    } else {\r\n                        throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        jr.endObject();\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and\r\nsetting object values by reflection. We should strive to reduce the discrepancy between this\r\nand '}, JavadocInlineTag{tagName='link', type=LINK, content=' #timeBagOfPrimitivesDefault(int)'}, JavadocSnippet{text=' .'}]}, blockTags=[]}","Method:":"public void timeBagOfPrimitivesReflectionStreaming(int reps) throws Exception {\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginObject();\r\n        BagOfPrimitives bag = new BagOfPrimitives();\r\n        while (jr.hasNext()) {\r\n            String name = jr.nextName();\r\n            for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                if (field.getName().equals(name)) {\r\n                    Class<?> fieldType = field.getType();\r\n                    if (fieldType.equals(long.class)) {\r\n                        field.setLong(bag, jr.nextLong());\r\n                    } else if (fieldType.equals(int.class)) {\r\n                        field.setInt(bag, jr.nextInt());\r\n                    } else if (fieldType.equals(boolean.class)) {\r\n                        field.setBoolean(bag, jr.nextBoolean());\r\n                    } else if (fieldType.equals(String.class)) {\r\n                        field.set(bag, jr.nextString());\r\n                    } else {\r\n                        throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        jr.endObject();\r\n    }\r\n}","Signature":"public void timeBagOfPrimitivesReflectionStreaming(int reps) throws Exception"},]}, {"longName":"com.google.gson.metrics.CollectionsDeserializationBenchmark",
"methods":[{"Body : ":"{\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginArray();\r\n        List<BagOfPrimitives> bags = new ArrayList<BagOfPrimitives>();\r\n        while (jr.hasNext()) {\r\n            jr.beginObject();\r\n            BagOfPrimitives bag = new BagOfPrimitives();\r\n            while (jr.hasNext()) {\r\n                String name = jr.nextName();\r\n                for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                    if (field.getName().equals(name)) {\r\n                        Class<?> fieldType = field.getType();\r\n                        if (fieldType.equals(long.class)) {\r\n                            field.setLong(bag, jr.nextLong());\r\n                        } else if (fieldType.equals(int.class)) {\r\n                            field.setInt(bag, jr.nextInt());\r\n                        } else if (fieldType.equals(boolean.class)) {\r\n                            field.setBoolean(bag, jr.nextBoolean());\r\n                        } else if (fieldType.equals(String.class)) {\r\n                            field.set(bag, jr.nextString());\r\n                        } else {\r\n                            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            jr.endObject();\r\n            bags.add(bag);\r\n        }\r\n        jr.endArray();\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and\r\nsetting object values by reflection. We should strive to reduce the discrepancy between this\r\nand '}, JavadocInlineTag{tagName='link', type=LINK, content=' #timeCollectionsDefault(int)'}, JavadocSnippet{text=' .'}]}, blockTags=[]}","Method:":"public void timeCollectionsReflectionStreaming(int reps) throws Exception {\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginArray();\r\n        List<BagOfPrimitives> bags = new ArrayList<BagOfPrimitives>();\r\n        while (jr.hasNext()) {\r\n            jr.beginObject();\r\n            BagOfPrimitives bag = new BagOfPrimitives();\r\n            while (jr.hasNext()) {\r\n                String name = jr.nextName();\r\n                for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                    if (field.getName().equals(name)) {\r\n                        Class<?> fieldType = field.getType();\r\n                        if (fieldType.equals(long.class)) {\r\n                            field.setLong(bag, jr.nextLong());\r\n                        } else if (fieldType.equals(int.class)) {\r\n                            field.setInt(bag, jr.nextInt());\r\n                        } else if (fieldType.equals(boolean.class)) {\r\n                            field.setBoolean(bag, jr.nextBoolean());\r\n                        } else if (fieldType.equals(String.class)) {\r\n                            field.set(bag, jr.nextString());\r\n                        } else {\r\n                            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            jr.endObject();\r\n            bags.add(bag);\r\n        }\r\n        jr.endArray();\r\n    }\r\n}","Signature":"public void timeCollectionsReflectionStreaming(int reps) throws Exception"}, {"Body : ":"{\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginArray();\r\n        List<BagOfPrimitives> bags = new ArrayList<BagOfPrimitives>();\r\n        while (jr.hasNext()) {\r\n            jr.beginObject();\r\n            BagOfPrimitives bag = new BagOfPrimitives();\r\n            while (jr.hasNext()) {\r\n                String name = jr.nextName();\r\n                for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                    if (field.getName().equals(name)) {\r\n                        Class<?> fieldType = field.getType();\r\n                        if (fieldType.equals(long.class)) {\r\n                            field.setLong(bag, jr.nextLong());\r\n                        } else if (fieldType.equals(int.class)) {\r\n                            field.setInt(bag, jr.nextInt());\r\n                        } else if (fieldType.equals(boolean.class)) {\r\n                            field.setBoolean(bag, jr.nextBoolean());\r\n                        } else if (fieldType.equals(String.class)) {\r\n                            field.set(bag, jr.nextString());\r\n                        } else {\r\n                            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            jr.endObject();\r\n            bags.add(bag);\r\n        }\r\n        jr.endArray();\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and\r\nsetting object values by reflection. We should strive to reduce the discrepancy between this\r\nand '}, JavadocInlineTag{tagName='link', type=LINK, content=' #timeCollectionsDefault(int)'}, JavadocSnippet{text=' .'}]}, blockTags=[]}","Method:":"public void timeCollectionsReflectionStreaming(int reps) throws Exception {\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginArray();\r\n        List<BagOfPrimitives> bags = new ArrayList<BagOfPrimitives>();\r\n        while (jr.hasNext()) {\r\n            jr.beginObject();\r\n            BagOfPrimitives bag = new BagOfPrimitives();\r\n            while (jr.hasNext()) {\r\n                String name = jr.nextName();\r\n                for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                    if (field.getName().equals(name)) {\r\n                        Class<?> fieldType = field.getType();\r\n                        if (fieldType.equals(long.class)) {\r\n                            field.setLong(bag, jr.nextLong());\r\n                        } else if (fieldType.equals(int.class)) {\r\n                            field.setInt(bag, jr.nextInt());\r\n                        } else if (fieldType.equals(boolean.class)) {\r\n                            field.setBoolean(bag, jr.nextBoolean());\r\n                        } else if (fieldType.equals(String.class)) {\r\n                            field.set(bag, jr.nextString());\r\n                        } else {\r\n                            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            jr.endObject();\r\n            bags.add(bag);\r\n        }\r\n        jr.endArray();\r\n    }\r\n}","Signature":"public void timeCollectionsReflectionStreaming(int reps) throws Exception"}, {"Body : ":"{\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginArray();\r\n        List<BagOfPrimitives> bags = new ArrayList<BagOfPrimitives>();\r\n        while (jr.hasNext()) {\r\n            jr.beginObject();\r\n            BagOfPrimitives bag = new BagOfPrimitives();\r\n            while (jr.hasNext()) {\r\n                String name = jr.nextName();\r\n                for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                    if (field.getName().equals(name)) {\r\n                        Class<?> fieldType = field.getType();\r\n                        if (fieldType.equals(long.class)) {\r\n                            field.setLong(bag, jr.nextLong());\r\n                        } else if (fieldType.equals(int.class)) {\r\n                            field.setInt(bag, jr.nextInt());\r\n                        } else if (fieldType.equals(boolean.class)) {\r\n                            field.setBoolean(bag, jr.nextBoolean());\r\n                        } else if (fieldType.equals(String.class)) {\r\n                            field.set(bag, jr.nextString());\r\n                        } else {\r\n                            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            jr.endObject();\r\n            bags.add(bag);\r\n        }\r\n        jr.endArray();\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and\r\nsetting object values by reflection. We should strive to reduce the discrepancy between this\r\nand '}, JavadocInlineTag{tagName='link', type=LINK, content=' #timeCollectionsDefault(int)'}, JavadocSnippet{text=' .'}]}, blockTags=[]}","Method:":"public void timeCollectionsReflectionStreaming(int reps) throws Exception {\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginArray();\r\n        List<BagOfPrimitives> bags = new ArrayList<BagOfPrimitives>();\r\n        while (jr.hasNext()) {\r\n            jr.beginObject();\r\n            BagOfPrimitives bag = new BagOfPrimitives();\r\n            while (jr.hasNext()) {\r\n                String name = jr.nextName();\r\n                for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                    if (field.getName().equals(name)) {\r\n                        Class<?> fieldType = field.getType();\r\n                        if (fieldType.equals(long.class)) {\r\n                            field.setLong(bag, jr.nextLong());\r\n                        } else if (fieldType.equals(int.class)) {\r\n                            field.setInt(bag, jr.nextInt());\r\n                        } else if (fieldType.equals(boolean.class)) {\r\n                            field.setBoolean(bag, jr.nextBoolean());\r\n                        } else if (fieldType.equals(String.class)) {\r\n                            field.set(bag, jr.nextString());\r\n                        } else {\r\n                            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            jr.endObject();\r\n            bags.add(bag);\r\n        }\r\n        jr.endArray();\r\n    }\r\n}","Signature":"public void timeCollectionsReflectionStreaming(int reps) throws Exception"}, {"Body : ":"{\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginArray();\r\n        List<BagOfPrimitives> bags = new ArrayList<BagOfPrimitives>();\r\n        while (jr.hasNext()) {\r\n            jr.beginObject();\r\n            BagOfPrimitives bag = new BagOfPrimitives();\r\n            while (jr.hasNext()) {\r\n                String name = jr.nextName();\r\n                for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                    if (field.getName().equals(name)) {\r\n                        Class<?> fieldType = field.getType();\r\n                        if (fieldType.equals(long.class)) {\r\n                            field.setLong(bag, jr.nextLong());\r\n                        } else if (fieldType.equals(int.class)) {\r\n                            field.setInt(bag, jr.nextInt());\r\n                        } else if (fieldType.equals(boolean.class)) {\r\n                            field.setBoolean(bag, jr.nextBoolean());\r\n                        } else if (fieldType.equals(String.class)) {\r\n                            field.set(bag, jr.nextString());\r\n                        } else {\r\n                            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            jr.endObject();\r\n            bags.add(bag);\r\n        }\r\n        jr.endArray();\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and\r\nsetting object values by reflection. We should strive to reduce the discrepancy between this\r\nand '}, JavadocInlineTag{tagName='link', type=LINK, content=' #timeCollectionsDefault(int)'}, JavadocSnippet{text=' .'}]}, blockTags=[]}","Method:":"public void timeCollectionsReflectionStreaming(int reps) throws Exception {\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginArray();\r\n        List<BagOfPrimitives> bags = new ArrayList<BagOfPrimitives>();\r\n        while (jr.hasNext()) {\r\n            jr.beginObject();\r\n            BagOfPrimitives bag = new BagOfPrimitives();\r\n            while (jr.hasNext()) {\r\n                String name = jr.nextName();\r\n                for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                    if (field.getName().equals(name)) {\r\n                        Class<?> fieldType = field.getType();\r\n                        if (fieldType.equals(long.class)) {\r\n                            field.setLong(bag, jr.nextLong());\r\n                        } else if (fieldType.equals(int.class)) {\r\n                            field.setInt(bag, jr.nextInt());\r\n                        } else if (fieldType.equals(boolean.class)) {\r\n                            field.setBoolean(bag, jr.nextBoolean());\r\n                        } else if (fieldType.equals(String.class)) {\r\n                            field.set(bag, jr.nextString());\r\n                        } else {\r\n                            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            jr.endObject();\r\n            bags.add(bag);\r\n        }\r\n        jr.endArray();\r\n    }\r\n}","Signature":"public void timeCollectionsReflectionStreaming(int reps) throws Exception"}, {"Body : ":"{\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginArray();\r\n        List<BagOfPrimitives> bags = new ArrayList<BagOfPrimitives>();\r\n        while (jr.hasNext()) {\r\n            jr.beginObject();\r\n            BagOfPrimitives bag = new BagOfPrimitives();\r\n            while (jr.hasNext()) {\r\n                String name = jr.nextName();\r\n                for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                    if (field.getName().equals(name)) {\r\n                        Class<?> fieldType = field.getType();\r\n                        if (fieldType.equals(long.class)) {\r\n                            field.setLong(bag, jr.nextLong());\r\n                        } else if (fieldType.equals(int.class)) {\r\n                            field.setInt(bag, jr.nextInt());\r\n                        } else if (fieldType.equals(boolean.class)) {\r\n                            field.setBoolean(bag, jr.nextBoolean());\r\n                        } else if (fieldType.equals(String.class)) {\r\n                            field.set(bag, jr.nextString());\r\n                        } else {\r\n                            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            jr.endObject();\r\n            bags.add(bag);\r\n        }\r\n        jr.endArray();\r\n    }\r\n}","Comment":"Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and\r\nsetting object values by reflection. We should strive to reduce the discrepancy between this\r\nand '}, JavadocInlineTag{tagName='link', type=LINK, content=' #timeCollectionsDefault(int)'}, JavadocSnippet{text=' .'}]}, blockTags=[]}","Method:":"public void timeCollectionsReflectionStreaming(int reps) throws Exception {\r\n    for (int i = 0; i < reps; ++i) {\r\n        StringReader reader = new StringReader(json);\r\n        JsonReader jr = new JsonReader(reader);\r\n        jr.beginArray();\r\n        List<BagOfPrimitives> bags = new ArrayList<BagOfPrimitives>();\r\n        while (jr.hasNext()) {\r\n            jr.beginObject();\r\n            BagOfPrimitives bag = new BagOfPrimitives();\r\n            while (jr.hasNext()) {\r\n                String name = jr.nextName();\r\n                for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\r\n                    if (field.getName().equals(name)) {\r\n                        Class<?> fieldType = field.getType();\r\n                        if (fieldType.equals(long.class)) {\r\n                            field.setLong(bag, jr.nextLong());\r\n                        } else if (fieldType.equals(int.class)) {\r\n                            field.setInt(bag, jr.nextInt());\r\n                        } else if (fieldType.equals(boolean.class)) {\r\n                            field.setBoolean(bag, jr.nextBoolean());\r\n                        } else if (fieldType.equals(String.class)) {\r\n                            field.set(bag, jr.nextString());\r\n                        } else {\r\n                            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \" + name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            jr.endObject();\r\n            bags.add(bag);\r\n        }\r\n        jr.endArray();\r\n    }\r\n}","Signature":"public void timeCollectionsReflectionStreaming(int reps) throws Exception"},]}, {"longName":"com.google.gson.metrics.ParseBenchmark",
"methods":[{"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"}, {"Body : ":"{\r\n    return userId;\r\n}","Comment":"","Method:":"@Override\r\npublic String toString() {\r\n    return userId;\r\n}","Signature":"public String toString()"},]}, {"longName":"com.google.gson.metrics.SerializationBenchmark",
"methods":[{"Body : ":"{\r\n    for (int i = 0; i < reps; ++i) {\r\n        gson.toJson(bag);\r\n    }\r\n}","Comment":"","Method:":"public void timeObjectSerialization(int reps) {\r\n    for (int i = 0; i < reps; ++i) {\r\n        gson.toJson(bag);\r\n    }\r\n}","Signature":"public void timeObjectSerialization(int reps)"}, {"Body : ":"{\r\n    for (int i = 0; i < reps; ++i) {\r\n        gson.toJson(bag);\r\n    }\r\n}","Comment":"","Method:":"public void timeObjectSerialization(int reps) {\r\n    for (int i = 0; i < reps; ++i) {\r\n        gson.toJson(bag);\r\n    }\r\n}","Signature":"public void timeObjectSerialization(int reps)"}, {"Body : ":"{\r\n    for (int i = 0; i < reps; ++i) {\r\n        gson.toJson(bag);\r\n    }\r\n}","Comment":"","Method:":"public void timeObjectSerialization(int reps) {\r\n    for (int i = 0; i < reps; ++i) {\r\n        gson.toJson(bag);\r\n    }\r\n}","Signature":"public void timeObjectSerialization(int reps)"},]}, {"longName":"com.google.gson.protobuf.ProtoTypeAdapter",
"methods":[{"Body : ":"{\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Comment":"","Method:":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException {\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Signature":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException"}, {"Body : ":"{\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Comment":"","Method:":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException {\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Signature":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException"}, {"Body : ":"{\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Comment":"","Method:":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException {\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Signature":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException"}, {"Body : ":"{\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Comment":"","Method:":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException {\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Signature":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException"}, {"Body : ":"{\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Comment":"","Method:":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException {\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Signature":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException"}, {"Body : ":"{\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Comment":"","Method:":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException {\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Signature":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException"}, {"Body : ":"{\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Comment":"","Method:":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException {\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Signature":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException"}, {"Body : ":"{\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Comment":"","Method:":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException {\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Signature":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException"}, {"Body : ":"{\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Comment":"","Method:":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException {\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Signature":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException"}, {"Body : ":"{\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Comment":"","Method:":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException {\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Signature":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException"}, {"Body : ":"{\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Comment":"","Method:":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException {\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Signature":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException"}, {"Body : ":"{\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Comment":"","Method:":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException {\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Signature":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException"}, {"Body : ":"{\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Comment":"","Method:":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException {\r\n    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\r\n    if (mapOfMethods == null) {\r\n        mapOfMethods = new MapMaker().makeMap();\r\n        Map<Class<?>, Method> previous = mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\r\n        mapOfMethods = previous == null ? mapOfMethods : previous;\r\n    }\r\n    Method method = mapOfMethods.get(clazz);\r\n    if (method == null) {\r\n        method = clazz.getMethod(methodName, methodParamTypes);\r\n        mapOfMethods.putIfAbsent(clazz, method);\r\n    }\r\n    return method;\r\n}","Signature":"private static Method getCachedMethod(Class<?> clazz, String methodName, Class<?>... methodParamTypes) throws NoSuchMethodException"},]}, {"longName":"com.google.gson.protobuf.functional.ProtosWithAnnotationsTest",
"methods":[{"Body : ":"{\r\n    ProtoWithAnnotations proto = ProtoWithAnnotations.newBuilder().setId(\"09f3j20839h032y0329hf30932h0nffn\").setOuterMessage(OuterMessage.newBuilder().setMonth(14).setYear(6650).setLongTimestamp(468406876880768L)).setInnerMessage1(InnerMessage.newBuilder().setNIdCt(12).setContent(Type.IMAGE).addData(Data.newBuilder().setData(\"data$$\").setWidth(200)).addData(Data.newBuilder().setHeight(56))).build();\r\n    String json = gsonWithLowerHyphen.toJson(proto);\r\n    assertThat(json).isEqualTo(\"{\\\"id\\\":\\\"09f3j20839h032y0329hf30932h0nffn\\\",\" + \"\\\"expiration_date\\\":{\" + \"\\\"month\\\":14,\" + \"\\\"year\\\":6650,\" + \"\\\"timeStamp\\\":468406876880768\" + \"},\" + \"\\\"inner-message-1\\\":{\" + \"\\\"n--id-ct\\\":12,\" + \"\\\"content\\\":2,\" + \"\\\"$binary_data$\\\":[\" + \"{\" + \"\\\"data\\\":\\\"data$$\\\",\" + \"\\\"width\\\":200\" + \"},\" + \"{\" + \"\\\"height\\\":56\" + \"}]\" + \"}\" + \"}\");\r\n    ProtoWithAnnotations rebuilt = gsonWithLowerHyphen.fromJson(json, ProtoWithAnnotations.class);\r\n    assertThat(rebuilt).isEqualTo(proto);\r\n}","Comment":"","Method:":"public void testProtoWithAnnotations_serialize() {\r\n    ProtoWithAnnotations proto = ProtoWithAnnotations.newBuilder().setId(\"09f3j20839h032y0329hf30932h0nffn\").setOuterMessage(OuterMessage.newBuilder().setMonth(14).setYear(6650).setLongTimestamp(468406876880768L)).setInnerMessage1(InnerMessage.newBuilder().setNIdCt(12).setContent(Type.IMAGE).addData(Data.newBuilder().setData(\"data$$\").setWidth(200)).addData(Data.newBuilder().setHeight(56))).build();\r\n    String json = gsonWithLowerHyphen.toJson(proto);\r\n    assertThat(json).isEqualTo(\"{\\\"id\\\":\\\"09f3j20839h032y0329hf30932h0nffn\\\",\" + \"\\\"expiration_date\\\":{\" + \"\\\"month\\\":14,\" + \"\\\"year\\\":6650,\" + \"\\\"timeStamp\\\":468406876880768\" + \"},\" + \"\\\"inner-message-1\\\":{\" + \"\\\"n--id-ct\\\":12,\" + \"\\\"content\\\":2,\" + \"\\\"$binary_data$\\\":[\" + \"{\" + \"\\\"data\\\":\\\"data$$\\\",\" + \"\\\"width\\\":200\" + \"},\" + \"{\" + \"\\\"height\\\":56\" + \"}]\" + \"}\" + \"}\");\r\n    ProtoWithAnnotations rebuilt = gsonWithLowerHyphen.fromJson(json, ProtoWithAnnotations.class);\r\n    assertThat(rebuilt).isEqualTo(proto);\r\n}","Signature":"public void testProtoWithAnnotations_serialize()"}, {"Body : ":"{\r\n    ProtoWithAnnotations proto = ProtoWithAnnotations.newBuilder().setId(\"09f3j20839h032y0329hf30932h0nffn\").setOuterMessage(OuterMessage.newBuilder().setMonth(14).setYear(6650).setLongTimestamp(468406876880768L)).setInnerMessage1(InnerMessage.newBuilder().setNIdCt(12).setContent(Type.IMAGE).addData(Data.newBuilder().setData(\"data$$\").setWidth(200)).addData(Data.newBuilder().setHeight(56))).build();\r\n    String json = gsonWithLowerHyphen.toJson(proto);\r\n    assertThat(json).isEqualTo(\"{\\\"id\\\":\\\"09f3j20839h032y0329hf30932h0nffn\\\",\" + \"\\\"expiration_date\\\":{\" + \"\\\"month\\\":14,\" + \"\\\"year\\\":6650,\" + \"\\\"timeStamp\\\":468406876880768\" + \"},\" + \"\\\"inner-message-1\\\":{\" + \"\\\"n--id-ct\\\":12,\" + \"\\\"content\\\":2,\" + \"\\\"$binary_data$\\\":[\" + \"{\" + \"\\\"data\\\":\\\"data$$\\\",\" + \"\\\"width\\\":200\" + \"},\" + \"{\" + \"\\\"height\\\":56\" + \"}]\" + \"}\" + \"}\");\r\n    ProtoWithAnnotations rebuilt = gsonWithLowerHyphen.fromJson(json, ProtoWithAnnotations.class);\r\n    assertThat(rebuilt).isEqualTo(proto);\r\n}","Comment":"","Method:":"public void testProtoWithAnnotations_serialize() {\r\n    ProtoWithAnnotations proto = ProtoWithAnnotations.newBuilder().setId(\"09f3j20839h032y0329hf30932h0nffn\").setOuterMessage(OuterMessage.newBuilder().setMonth(14).setYear(6650).setLongTimestamp(468406876880768L)).setInnerMessage1(InnerMessage.newBuilder().setNIdCt(12).setContent(Type.IMAGE).addData(Data.newBuilder().setData(\"data$$\").setWidth(200)).addData(Data.newBuilder().setHeight(56))).build();\r\n    String json = gsonWithLowerHyphen.toJson(proto);\r\n    assertThat(json).isEqualTo(\"{\\\"id\\\":\\\"09f3j20839h032y0329hf30932h0nffn\\\",\" + \"\\\"expiration_date\\\":{\" + \"\\\"month\\\":14,\" + \"\\\"year\\\":6650,\" + \"\\\"timeStamp\\\":468406876880768\" + \"},\" + \"\\\"inner-message-1\\\":{\" + \"\\\"n--id-ct\\\":12,\" + \"\\\"content\\\":2,\" + \"\\\"$binary_data$\\\":[\" + \"{\" + \"\\\"data\\\":\\\"data$$\\\",\" + \"\\\"width\\\":200\" + \"},\" + \"{\" + \"\\\"height\\\":56\" + \"}]\" + \"}\" + \"}\");\r\n    ProtoWithAnnotations rebuilt = gsonWithLowerHyphen.fromJson(json, ProtoWithAnnotations.class);\r\n    assertThat(rebuilt).isEqualTo(proto);\r\n}","Signature":"public void testProtoWithAnnotations_serialize()"}, {"Body : ":"{\r\n    ProtoWithAnnotations proto = ProtoWithAnnotations.newBuilder().setId(\"09f3j20839h032y0329hf30932h0nffn\").setOuterMessage(OuterMessage.newBuilder().setMonth(14).setYear(6650).setLongTimestamp(468406876880768L)).setInnerMessage1(InnerMessage.newBuilder().setNIdCt(12).setContent(Type.IMAGE).addData(Data.newBuilder().setData(\"data$$\").setWidth(200)).addData(Data.newBuilder().setHeight(56))).build();\r\n    String json = gsonWithLowerHyphen.toJson(proto);\r\n    assertThat(json).isEqualTo(\"{\\\"id\\\":\\\"09f3j20839h032y0329hf30932h0nffn\\\",\" + \"\\\"expiration_date\\\":{\" + \"\\\"month\\\":14,\" + \"\\\"year\\\":6650,\" + \"\\\"timeStamp\\\":468406876880768\" + \"},\" + \"\\\"inner-message-1\\\":{\" + \"\\\"n--id-ct\\\":12,\" + \"\\\"content\\\":2,\" + \"\\\"$binary_data$\\\":[\" + \"{\" + \"\\\"data\\\":\\\"data$$\\\",\" + \"\\\"width\\\":200\" + \"},\" + \"{\" + \"\\\"height\\\":56\" + \"}]\" + \"}\" + \"}\");\r\n    ProtoWithAnnotations rebuilt = gsonWithLowerHyphen.fromJson(json, ProtoWithAnnotations.class);\r\n    assertThat(rebuilt).isEqualTo(proto);\r\n}","Comment":"","Method:":"public void testProtoWithAnnotations_serialize() {\r\n    ProtoWithAnnotations proto = ProtoWithAnnotations.newBuilder().setId(\"09f3j20839h032y0329hf30932h0nffn\").setOuterMessage(OuterMessage.newBuilder().setMonth(14).setYear(6650).setLongTimestamp(468406876880768L)).setInnerMessage1(InnerMessage.newBuilder().setNIdCt(12).setContent(Type.IMAGE).addData(Data.newBuilder().setData(\"data$$\").setWidth(200)).addData(Data.newBuilder().setHeight(56))).build();\r\n    String json = gsonWithLowerHyphen.toJson(proto);\r\n    assertThat(json).isEqualTo(\"{\\\"id\\\":\\\"09f3j20839h032y0329hf30932h0nffn\\\",\" + \"\\\"expiration_date\\\":{\" + \"\\\"month\\\":14,\" + \"\\\"year\\\":6650,\" + \"\\\"timeStamp\\\":468406876880768\" + \"},\" + \"\\\"inner-message-1\\\":{\" + \"\\\"n--id-ct\\\":12,\" + \"\\\"content\\\":2,\" + \"\\\"$binary_data$\\\":[\" + \"{\" + \"\\\"data\\\":\\\"data$$\\\",\" + \"\\\"width\\\":200\" + \"},\" + \"{\" + \"\\\"height\\\":56\" + \"}]\" + \"}\" + \"}\");\r\n    ProtoWithAnnotations rebuilt = gsonWithLowerHyphen.fromJson(json, ProtoWithAnnotations.class);\r\n    assertThat(rebuilt).isEqualTo(proto);\r\n}","Signature":"public void testProtoWithAnnotations_serialize()"}, {"Body : ":"{\r\n    ProtoWithAnnotations proto = ProtoWithAnnotations.newBuilder().setId(\"09f3j20839h032y0329hf30932h0nffn\").setOuterMessage(OuterMessage.newBuilder().setMonth(14).setYear(6650).setLongTimestamp(468406876880768L)).setInnerMessage1(InnerMessage.newBuilder().setNIdCt(12).setContent(Type.IMAGE).addData(Data.newBuilder().setData(\"data$$\").setWidth(200)).addData(Data.newBuilder().setHeight(56))).build();\r\n    String json = gsonWithLowerHyphen.toJson(proto);\r\n    assertThat(json).isEqualTo(\"{\\\"id\\\":\\\"09f3j20839h032y0329hf30932h0nffn\\\",\" + \"\\\"expiration_date\\\":{\" + \"\\\"month\\\":14,\" + \"\\\"year\\\":6650,\" + \"\\\"timeStamp\\\":468406876880768\" + \"},\" + \"\\\"inner-message-1\\\":{\" + \"\\\"n--id-ct\\\":12,\" + \"\\\"content\\\":2,\" + \"\\\"$binary_data$\\\":[\" + \"{\" + \"\\\"data\\\":\\\"data$$\\\",\" + \"\\\"width\\\":200\" + \"},\" + \"{\" + \"\\\"height\\\":56\" + \"}]\" + \"}\" + \"}\");\r\n    ProtoWithAnnotations rebuilt = gsonWithLowerHyphen.fromJson(json, ProtoWithAnnotations.class);\r\n    assertThat(rebuilt).isEqualTo(proto);\r\n}","Comment":"","Method:":"public void testProtoWithAnnotations_serialize() {\r\n    ProtoWithAnnotations proto = ProtoWithAnnotations.newBuilder().setId(\"09f3j20839h032y0329hf30932h0nffn\").setOuterMessage(OuterMessage.newBuilder().setMonth(14).setYear(6650).setLongTimestamp(468406876880768L)).setInnerMessage1(InnerMessage.newBuilder().setNIdCt(12).setContent(Type.IMAGE).addData(Data.newBuilder().setData(\"data$$\").setWidth(200)).addData(Data.newBuilder().setHeight(56))).build();\r\n    String json = gsonWithLowerHyphen.toJson(proto);\r\n    assertThat(json).isEqualTo(\"{\\\"id\\\":\\\"09f3j20839h032y0329hf30932h0nffn\\\",\" + \"\\\"expiration_date\\\":{\" + \"\\\"month\\\":14,\" + \"\\\"year\\\":6650,\" + \"\\\"timeStamp\\\":468406876880768\" + \"},\" + \"\\\"inner-message-1\\\":{\" + \"\\\"n--id-ct\\\":12,\" + \"\\\"content\\\":2,\" + \"\\\"$binary_data$\\\":[\" + \"{\" + \"\\\"data\\\":\\\"data$$\\\",\" + \"\\\"width\\\":200\" + \"},\" + \"{\" + \"\\\"height\\\":56\" + \"}]\" + \"}\" + \"}\");\r\n    ProtoWithAnnotations rebuilt = gsonWithLowerHyphen.fromJson(json, ProtoWithAnnotations.class);\r\n    assertThat(rebuilt).isEqualTo(proto);\r\n}","Signature":"public void testProtoWithAnnotations_serialize()"}, {"Body : ":"{\r\n    ProtoWithAnnotations proto = ProtoWithAnnotations.newBuilder().setId(\"09f3j20839h032y0329hf30932h0nffn\").setOuterMessage(OuterMessage.newBuilder().setMonth(14).setYear(6650).setLongTimestamp(468406876880768L)).setInnerMessage1(InnerMessage.newBuilder().setNIdCt(12).setContent(Type.IMAGE).addData(Data.newBuilder().setData(\"data$$\").setWidth(200)).addData(Data.newBuilder().setHeight(56))).build();\r\n    String json = gsonWithLowerHyphen.toJson(proto);\r\n    assertThat(json).isEqualTo(\"{\\\"id\\\":\\\"09f3j20839h032y0329hf30932h0nffn\\\",\" + \"\\\"expiration_date\\\":{\" + \"\\\"month\\\":14,\" + \"\\\"year\\\":6650,\" + \"\\\"timeStamp\\\":468406876880768\" + \"},\" + \"\\\"inner-message-1\\\":{\" + \"\\\"n--id-ct\\\":12,\" + \"\\\"content\\\":2,\" + \"\\\"$binary_data$\\\":[\" + \"{\" + \"\\\"data\\\":\\\"data$$\\\",\" + \"\\\"width\\\":200\" + \"},\" + \"{\" + \"\\\"height\\\":56\" + \"}]\" + \"}\" + \"}\");\r\n    ProtoWithAnnotations rebuilt = gsonWithLowerHyphen.fromJson(json, ProtoWithAnnotations.class);\r\n    assertThat(rebuilt).isEqualTo(proto);\r\n}","Comment":"","Method:":"public void testProtoWithAnnotations_serialize() {\r\n    ProtoWithAnnotations proto = ProtoWithAnnotations.newBuilder().setId(\"09f3j20839h032y0329hf30932h0nffn\").setOuterMessage(OuterMessage.newBuilder().setMonth(14).setYear(6650).setLongTimestamp(468406876880768L)).setInnerMessage1(InnerMessage.newBuilder().setNIdCt(12).setContent(Type.IMAGE).addData(Data.newBuilder().setData(\"data$$\").setWidth(200)).addData(Data.newBuilder().setHeight(56))).build();\r\n    String json = gsonWithLowerHyphen.toJson(proto);\r\n    assertThat(json).isEqualTo(\"{\\\"id\\\":\\\"09f3j20839h032y0329hf30932h0nffn\\\",\" + \"\\\"expiration_date\\\":{\" + \"\\\"month\\\":14,\" + \"\\\"year\\\":6650,\" + \"\\\"timeStamp\\\":468406876880768\" + \"},\" + \"\\\"inner-message-1\\\":{\" + \"\\\"n--id-ct\\\":12,\" + \"\\\"content\\\":2,\" + \"\\\"$binary_data$\\\":[\" + \"{\" + \"\\\"data\\\":\\\"data$$\\\",\" + \"\\\"width\\\":200\" + \"},\" + \"{\" + \"\\\"height\\\":56\" + \"}]\" + \"}\" + \"}\");\r\n    ProtoWithAnnotations rebuilt = gsonWithLowerHyphen.fromJson(json, ProtoWithAnnotations.class);\r\n    assertThat(rebuilt).isEqualTo(proto);\r\n}","Signature":"public void testProtoWithAnnotations_serialize()"}, {"Body : ":"{\r\n    ProtoWithAnnotations proto = ProtoWithAnnotations.newBuilder().setId(\"09f3j20839h032y0329hf30932h0nffn\").setOuterMessage(OuterMessage.newBuilder().setMonth(14).setYear(6650).setLongTimestamp(468406876880768L)).setInnerMessage1(InnerMessage.newBuilder().setNIdCt(12).setContent(Type.IMAGE).addData(Data.newBuilder().setData(\"data$$\").setWidth(200)).addData(Data.newBuilder().setHeight(56))).build();\r\n    String json = gsonWithLowerHyphen.toJson(proto);\r\n    assertThat(json).isEqualTo(\"{\\\"id\\\":\\\"09f3j20839h032y0329hf30932h0nffn\\\",\" + \"\\\"expiration_date\\\":{\" + \"\\\"month\\\":14,\" + \"\\\"year\\\":6650,\" + \"\\\"timeStamp\\\":468406876880768\" + \"},\" + \"\\\"inner-message-1\\\":{\" + \"\\\"n--id-ct\\\":12,\" + \"\\\"content\\\":2,\" + \"\\\"$binary_data$\\\":[\" + \"{\" + \"\\\"data\\\":\\\"data$$\\\",\" + \"\\\"width\\\":200\" + \"},\" + \"{\" + \"\\\"height\\\":56\" + \"}]\" + \"}\" + \"}\");\r\n    ProtoWithAnnotations rebuilt = gsonWithLowerHyphen.fromJson(json, ProtoWithAnnotations.class);\r\n    assertThat(rebuilt).isEqualTo(proto);\r\n}","Comment":"","Method:":"public void testProtoWithAnnotations_serialize() {\r\n    ProtoWithAnnotations proto = ProtoWithAnnotations.newBuilder().setId(\"09f3j20839h032y0329hf30932h0nffn\").setOuterMessage(OuterMessage.newBuilder().setMonth(14).setYear(6650).setLongTimestamp(468406876880768L)).setInnerMessage1(InnerMessage.newBuilder().setNIdCt(12).setContent(Type.IMAGE).addData(Data.newBuilder().setData(\"data$$\").setWidth(200)).addData(Data.newBuilder().setHeight(56))).build();\r\n    String json = gsonWithLowerHyphen.toJson(proto);\r\n    assertThat(json).isEqualTo(\"{\\\"id\\\":\\\"09f3j20839h032y0329hf30932h0nffn\\\",\" + \"\\\"expiration_date\\\":{\" + \"\\\"month\\\":14,\" + \"\\\"year\\\":6650,\" + \"\\\"timeStamp\\\":468406876880768\" + \"},\" + \"\\\"inner-message-1\\\":{\" + \"\\\"n--id-ct\\\":12,\" + \"\\\"content\\\":2,\" + \"\\\"$binary_data$\\\":[\" + \"{\" + \"\\\"data\\\":\\\"data$$\\\",\" + \"\\\"width\\\":200\" + \"},\" + \"{\" + \"\\\"height\\\":56\" + \"}]\" + \"}\" + \"}\");\r\n    ProtoWithAnnotations rebuilt = gsonWithLowerHyphen.fromJson(json, ProtoWithAnnotations.class);\r\n    assertThat(rebuilt).isEqualTo(proto);\r\n}","Signature":"public void testProtoWithAnnotations_serialize()"},]}, {"longName":"com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest",
"methods":[{"Body : ":"{\r\n    final String json = \"{NameThatTestsCaseFormat:['bar'],AnotherField:'foo'}\";\r\n    ProtoWithDifferentCaseFormat proto = upperCamelGson.fromJson(json, ProtoWithDifferentCaseFormat.class);\r\n    assertEquals(\"foo\", proto.getAnotherField());\r\n    assertEquals(\"bar\", proto.getNameThatTestsCaseFormat(0));\r\n}","Comment":"","Method:":"public void testDeserializeDifferentCaseFormat() {\r\n    final String json = \"{NameThatTestsCaseFormat:['bar'],AnotherField:'foo'}\";\r\n    ProtoWithDifferentCaseFormat proto = upperCamelGson.fromJson(json, ProtoWithDifferentCaseFormat.class);\r\n    assertEquals(\"foo\", proto.getAnotherField());\r\n    assertEquals(\"bar\", proto.getNameThatTestsCaseFormat(0));\r\n}","Signature":"public void testDeserializeDifferentCaseFormat()"}, {"Body : ":"{\r\n    final String json = \"{NameThatTestsCaseFormat:['bar'],AnotherField:'foo'}\";\r\n    ProtoWithDifferentCaseFormat proto = upperCamelGson.fromJson(json, ProtoWithDifferentCaseFormat.class);\r\n    assertEquals(\"foo\", proto.getAnotherField());\r\n    assertEquals(\"bar\", proto.getNameThatTestsCaseFormat(0));\r\n}","Comment":"","Method:":"public void testDeserializeDifferentCaseFormat() {\r\n    final String json = \"{NameThatTestsCaseFormat:['bar'],AnotherField:'foo'}\";\r\n    ProtoWithDifferentCaseFormat proto = upperCamelGson.fromJson(json, ProtoWithDifferentCaseFormat.class);\r\n    assertEquals(\"foo\", proto.getAnotherField());\r\n    assertEquals(\"bar\", proto.getNameThatTestsCaseFormat(0));\r\n}","Signature":"public void testDeserializeDifferentCaseFormat()"}, {"Body : ":"{\r\n    final String json = \"{NameThatTestsCaseFormat:['bar'],AnotherField:'foo'}\";\r\n    ProtoWithDifferentCaseFormat proto = upperCamelGson.fromJson(json, ProtoWithDifferentCaseFormat.class);\r\n    assertEquals(\"foo\", proto.getAnotherField());\r\n    assertEquals(\"bar\", proto.getNameThatTestsCaseFormat(0));\r\n}","Comment":"","Method:":"public void testDeserializeDifferentCaseFormat() {\r\n    final String json = \"{NameThatTestsCaseFormat:['bar'],AnotherField:'foo'}\";\r\n    ProtoWithDifferentCaseFormat proto = upperCamelGson.fromJson(json, ProtoWithDifferentCaseFormat.class);\r\n    assertEquals(\"foo\", proto.getAnotherField());\r\n    assertEquals(\"bar\", proto.getNameThatTestsCaseFormat(0));\r\n}","Signature":"public void testDeserializeDifferentCaseFormat()"}, {"Body : ":"{\r\n    final String json = \"{NameThatTestsCaseFormat:['bar'],AnotherField:'foo'}\";\r\n    ProtoWithDifferentCaseFormat proto = upperCamelGson.fromJson(json, ProtoWithDifferentCaseFormat.class);\r\n    assertEquals(\"foo\", proto.getAnotherField());\r\n    assertEquals(\"bar\", proto.getNameThatTestsCaseFormat(0));\r\n}","Comment":"","Method:":"public void testDeserializeDifferentCaseFormat() {\r\n    final String json = \"{NameThatTestsCaseFormat:['bar'],AnotherField:'foo'}\";\r\n    ProtoWithDifferentCaseFormat proto = upperCamelGson.fromJson(json, ProtoWithDifferentCaseFormat.class);\r\n    assertEquals(\"foo\", proto.getAnotherField());\r\n    assertEquals(\"bar\", proto.getNameThatTestsCaseFormat(0));\r\n}","Signature":"public void testDeserializeDifferentCaseFormat()"}, {"Body : ":"{\r\n    final String json = \"{NameThatTestsCaseFormat:['bar'],AnotherField:'foo'}\";\r\n    ProtoWithDifferentCaseFormat proto = upperCamelGson.fromJson(json, ProtoWithDifferentCaseFormat.class);\r\n    assertEquals(\"foo\", proto.getAnotherField());\r\n    assertEquals(\"bar\", proto.getNameThatTestsCaseFormat(0));\r\n}","Comment":"","Method:":"public void testDeserializeDifferentCaseFormat() {\r\n    final String json = \"{NameThatTestsCaseFormat:['bar'],AnotherField:'foo'}\";\r\n    ProtoWithDifferentCaseFormat proto = upperCamelGson.fromJson(json, ProtoWithDifferentCaseFormat.class);\r\n    assertEquals(\"foo\", proto.getAnotherField());\r\n    assertEquals(\"bar\", proto.getNameThatTestsCaseFormat(0));\r\n}","Signature":"public void testDeserializeDifferentCaseFormat()"},]}, {"longName":"com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest",
"methods":[{"Body : ":"{\r\n    SimpleProto proto = gson.fromJson(\"{msg:'foo',count:null}\", SimpleProto.class);\r\n    assertEquals(\"foo\", proto.getMsg());\r\n    assertEquals(0, proto.getCount());\r\n}","Comment":"","Method:":"public void testDeserializeWithExplicitNullValue() {\r\n    SimpleProto proto = gson.fromJson(\"{msg:'foo',count:null}\", SimpleProto.class);\r\n    assertEquals(\"foo\", proto.getMsg());\r\n    assertEquals(0, proto.getCount());\r\n}","Signature":"public void testDeserializeWithExplicitNullValue()"}, {"Body : ":"{\r\n    SimpleProto proto = gson.fromJson(\"{msg:'foo',count:null}\", SimpleProto.class);\r\n    assertEquals(\"foo\", proto.getMsg());\r\n    assertEquals(0, proto.getCount());\r\n}","Comment":"","Method:":"public void testDeserializeWithExplicitNullValue() {\r\n    SimpleProto proto = gson.fromJson(\"{msg:'foo',count:null}\", SimpleProto.class);\r\n    assertEquals(\"foo\", proto.getMsg());\r\n    assertEquals(0, proto.getCount());\r\n}","Signature":"public void testDeserializeWithExplicitNullValue()"}, {"Body : ":"{\r\n    SimpleProto proto = gson.fromJson(\"{msg:'foo',count:null}\", SimpleProto.class);\r\n    assertEquals(\"foo\", proto.getMsg());\r\n    assertEquals(0, proto.getCount());\r\n}","Comment":"","Method:":"public void testDeserializeWithExplicitNullValue() {\r\n    SimpleProto proto = gson.fromJson(\"{msg:'foo',count:null}\", SimpleProto.class);\r\n    assertEquals(\"foo\", proto.getMsg());\r\n    assertEquals(0, proto.getCount());\r\n}","Signature":"public void testDeserializeWithExplicitNullValue()"}, {"Body : ":"{\r\n    SimpleProto proto = gson.fromJson(\"{msg:'foo',count:null}\", SimpleProto.class);\r\n    assertEquals(\"foo\", proto.getMsg());\r\n    assertEquals(0, proto.getCount());\r\n}","Comment":"","Method:":"public void testDeserializeWithExplicitNullValue() {\r\n    SimpleProto proto = gson.fromJson(\"{msg:'foo',count:null}\", SimpleProto.class);\r\n    assertEquals(\"foo\", proto.getMsg());\r\n    assertEquals(0, proto.getCount());\r\n}","Signature":"public void testDeserializeWithExplicitNullValue()"}, {"Body : ":"{\r\n    SimpleProto proto = gson.fromJson(\"{msg:'foo',count:null}\", SimpleProto.class);\r\n    assertEquals(\"foo\", proto.getMsg());\r\n    assertEquals(0, proto.getCount());\r\n}","Comment":"","Method:":"public void testDeserializeWithExplicitNullValue() {\r\n    SimpleProto proto = gson.fromJson(\"{msg:'foo',count:null}\", SimpleProto.class);\r\n    assertEquals(\"foo\", proto.getMsg());\r\n    assertEquals(0, proto.getCount());\r\n}","Signature":"public void testDeserializeWithExplicitNullValue()"}, {"Body : ":"{\r\n    SimpleProto proto = gson.fromJson(\"{msg:'foo',count:null}\", SimpleProto.class);\r\n    assertEquals(\"foo\", proto.getMsg());\r\n    assertEquals(0, proto.getCount());\r\n}","Comment":"","Method:":"public void testDeserializeWithExplicitNullValue() {\r\n    SimpleProto proto = gson.fromJson(\"{msg:'foo',count:null}\", SimpleProto.class);\r\n    assertEquals(\"foo\", proto.getMsg());\r\n    assertEquals(0, proto.getCount());\r\n}","Signature":"public void testDeserializeWithExplicitNullValue()"},]},
]